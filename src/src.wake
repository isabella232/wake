# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package build_wake

from wake import _
from gcc_wake import _

def srcDir =
    here

def src (dir: String) (variant: Pair String String) (internal: List (Pair String String => Result SysLib Error)) (external: List (Pair String String => Result SysLib Error)): Result SysLib Error =
    def Pair cppVariant cVariant =
        variant

    def internalLibResults =
        map (_ variant) internal

    require Pass externalLibs =
        map (_ variant) external
        | findFail

    def externalLib =
        flattenSysLibs externalLibs

    def ym4s =
        sources here `.*\.y\.m4`

    require Pass parsers =
        map (parserGen variant) ym4s
        | findFail

    def headers =
        version_h Unit,
        map getPairSecond parsers ++
        externalLib.getSysLibHeaders ++
        sources srcDir `.*\.h` ++
        sources vendorDir `.*\.h`

    def cflags =
        "-I{srcDir}",
        "-I{vendorDir}",
        externalLib.getSysLibCFlags

    def re2obj re =
        require Pass cpp = re2c re
        cppCompile cpp

    def cCompile =
        compileC cVariant cflags headers

    def cppCompile =
        compileC cppVariant cflags headers

    def cppExtra =
        map getPairFirst parsers
        | filter (matches `^${dir.quote}/.*` _.getPathName)

    def objectResults =
        map re2obj     (sources dir `.*\.re`) ++
        map cCompile   (sources dir `.*\.c`) ++
        map cppCompile (cppExtra ++ sources dir `.*\.cpp`)

    require Pass objects =
        findFail objectResults

    require Pass internalLibs =
        findFail internalLibResults
    
    def internalLib =
        flattenSysLibs internalLibs

    def allObjects =
        (internalLib.getSysLibObjects ++ externalLib.getSysLibObjects ++ objects.flatten)
        | distinctBy (_.getPathName <=>* _.getPathName)

    Pass (SysLib "0.0" headers allObjects cflags externalLib.getSysLibLFlags)

def version_h Unit =
    match (buildAs Unit)
        Fail f = makeBadPath f
        Pass ver = write "{here}/version.h" "#define VERSION {ver}\n"

def parserLemon variant ym4 =
    require Pass parser_y =
        m4 ym4

    lemon variant parser_y

def parserGen variant ym4 =
    require Fail _ =
        parserLemon variant ym4

    def basename =
        replace `\.y\.m4$` "" ym4.getPathName

    require Pass parser_c =
        gunzip (source "{basename}.cpp.gz")

    require Pass parser_h =
        gunzip (source "{basename}.h.gz")

    Pass (Pair parser_c parser_h)
