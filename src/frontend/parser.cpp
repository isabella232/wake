/* This file is automatically generated by Lemon from input grammar
** source file "parser.y". */
/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
/************ Begin %include sections from the grammar ************************/
#line 31 "parser.y"

// Open Group Base Specifications Issue 7
#define _XOPEN_SOURCE 700
#define _POSIX_C_SOURCE 200809L

#include <string.h>
#include "frontend/syntax.h"
#include "frontend/diagnostic.h"
#include "frontend/cst.h"
#include "frontend/file.h"
#include <vector>
#include <sstream>
#include <iostream>

#define add(t, ...) pinfo.cst->addNode((t), __VA_ARGS__)
#define pop(x) pinfo.cst->delNodes(x)

#define fail(sstream, token)                                                           \
  do {                                                                                 \
    std::stringstream sstr;                                                            \
    sstr << "syntax error; " << sstream;                                               \
    Location l = token.location(*pinfo.fcontent);                                      \
    pinfo.reporter->reportError(l, sstr.str());                                        \
  } while (0)
#line 54 "parser.c"
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols.
***************** Begin token definitions *************************************/
#ifndef TOKEN_WS
#define TOKEN_WS                              1
#define TOKEN_COMMENT                         2
#define TOKEN_P_BOPEN                         3
#define TOKEN_P_BCLOSE                        4
#define TOKEN_P_SOPEN                         5
#define TOKEN_P_SCLOSE                        6
#define TOKEN_ID                              7
#define TOKEN_NL                              8
#define TOKEN_INDENT                          9
#define TOKEN_DEDENT                         10
#define TOKEN_KW_PACKAGE                     11
#define TOKEN_KW_FROM                        12
#define TOKEN_KW_IMPORT                      13
#define TOKEN_P_HOLE                         14
#define TOKEN_KW_EXPORT                      15
#define TOKEN_KW_DEF                         16
#define TOKEN_KW_TYPE                        17
#define TOKEN_KW_TOPIC                       18
#define TOKEN_KW_UNARY                       19
#define TOKEN_KW_BINARY                      20
#define TOKEN_P_EQUALS                       21
#define TOKEN_OP_DOT                         22
#define TOKEN_OP_QUANT                       23
#define TOKEN_OP_EXP                         24
#define TOKEN_OP_MULDIV                      25
#define TOKEN_OP_ADDSUB                      26
#define TOKEN_OP_COMPARE                     27
#define TOKEN_OP_INEQUAL                     28
#define TOKEN_OP_AND                         29
#define TOKEN_OP_OR                          30
#define TOKEN_OP_DOLLAR                      31
#define TOKEN_OP_LRARROW                     32
#define TOKEN_OP_EQARROW                     33
#define TOKEN_OP_COMMA                       34
#define TOKEN_KW_GLOBAL                      35
#define TOKEN_P_COLON                        36
#define TOKEN_KW_PUBLISH                     37
#define TOKEN_KW_DATA                        38
#define TOKEN_KW_TUPLE                       39
#define TOKEN_KW_TARGET                      40
#define TOKEN_P_BSLASH                       41
#define TOKEN_P_POPEN                        42
#define TOKEN_P_PCLOSE                       43
#define TOKEN_STR_RAW                        44
#define TOKEN_STR_SINGLE                     45
#define TOKEN_STR_MID                        46
#define TOKEN_STR_OPEN                       47
#define TOKEN_STR_CLOSE                      48
#define TOKEN_MSTR_CONTINUE                  49
#define TOKEN_MSTR_BEGIN                     50
#define TOKEN_MSTR_END                       51
#define TOKEN_MSTR_PAUSE                     52
#define TOKEN_MSTR_MID                       53
#define TOKEN_MSTR_RESUME                    54
#define TOKEN_LSTR_CONTINUE                  55
#define TOKEN_LSTR_BEGIN                     56
#define TOKEN_LSTR_END                       57
#define TOKEN_LSTR_PAUSE                     58
#define TOKEN_LSTR_MID                       59
#define TOKEN_LSTR_RESUME                    60
#define TOKEN_REG_SINGLE                     61
#define TOKEN_REG_MID                        62
#define TOKEN_REG_OPEN                       63
#define TOKEN_REG_CLOSE                      64
#define TOKEN_DOUBLE                         65
#define TOKEN_INTEGER                        66
#define TOKEN_KW_HERE                        67
#define TOKEN_KW_SUBSCRIBE                   68
#define TOKEN_KW_PRIM                        69
#define TOKEN_KW_MATCH                       70
#define TOKEN_KW_IF                          71
#define TOKEN_KW_THEN                        72
#define TOKEN_KW_ELSE                        73
#define TOKEN_KW_REQUIRE                     74
#endif
/**************** End token definitions ***************************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    ParseTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal 
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_PARAM     Code to pass %extra_argument as a subroutine parameter
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    ParseCTX_*         As ParseARG_ except for %extra_context
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYNTOKEN           Number of terminal symbols
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
**    YY_MIN_REDUCE      Minimum value for reduce actions
**    YY_MAX_REDUCE      Maximum value for reduce actions
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/************* Begin control #defines *****************************************/
#define YYCODETYPE unsigned char
#define YYNOCODE 176
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE TokenInfo
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  size_t yy39;
  int yy353;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 0
#endif
#define ParseARG_SDECL ParseInfo pinfo;
#define ParseARG_PDECL ,ParseInfo pinfo
#define ParseARG_PARAM ,pinfo
#define ParseARG_FETCH ParseInfo pinfo=yypParser->pinfo;
#define ParseARG_STORE yypParser->pinfo=pinfo;
#define ParseCTX_SDECL
#define ParseCTX_PDECL
#define ParseCTX_PARAM
#define ParseCTX_FETCH
#define ParseCTX_STORE
#define YYERRORSYMBOL 75
#define YYERRSYMDT yy353
#define YYNSTATE             195
#define YYNRULE              274
#define YYNRULE_WITH_ACTION  274
#define YYNTOKEN             75
#define YY_MAX_SHIFT         194
#define YY_MIN_SHIFTREDUCE   434
#define YY_MAX_SHIFTREDUCE   707
#define YY_ERROR_ACTION      708
#define YY_ACCEPT_ACTION     709
#define YY_NO_ACTION         710
#define YY_MIN_REDUCE        711
#define YY_MAX_REDUCE        984
/************* End control #defines *******************************************/
#define YY_NLOOKAHEAD ((int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])))

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X.
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
#define YY_ACTTAB_COUNT (5587)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   151,  116,  877,   34,  736,  890,   36,  194,  889,   33,
 /*    10 */   713,   80,  739,  187,  901,   32,  108,  136,  709,   83,
 /*    20 */    31,   64,  135,  812,   74,   62,  824,  133,   59,  131,
 /*    30 */   822,   57,  130,  827,   55,  129,  832,   53,  128,  837,
 /*    40 */    51,  124,  842,   49,  123,  847,  959,  859,  122,   47,
 /*    50 */   864,  121,   44,  120,  862,   42,  119,  867,  480,  942,
 /*    60 */   118,   23,  132,  877,   34,  437,  489,  181,  790,  889,
 /*    70 */    33,   75,  125,  877,   34,  901,   32,  703,  115,  889,
 /*    80 */    33,   31,   96,  148,  791,  901,   32,  740,  155,  465,
 /*    90 */   706,   31,  100,  955,  950,    5,  609,  151,  611,  174,
 /*   100 */   968,  452,  453,  454,  466,  467,  468,  469,  470,  471,
 /*   110 */   472,  473,  474,  475,  476,  477,  478,  114,   64,  135,
 /*   120 */   812,   74,   62,  824,  133,   59,  131,  822,   57,  130,
 /*   130 */   827,   55,  129,  832,   53,  128,  837,   51,  124,  842,
 /*   140 */    49,  123,  847,  107,  859,  122,   47,  864,  121,   44,
 /*   150 */   120,  862,   42,  119,  867,  491,  942,  118,  113,  132,
 /*   160 */   877,   34,  621,  137,  181,  792,  889,   33,   17,  117,
 /*   170 */   877,   34,  901,   32,  189,  115,  889,   33,   31,  633,
 /*   180 */   138,  793,  901,   32,  902,   37,  465,  450,   31,  154,
 /*   190 */   954,  950,    5,  883,  151,   35,  640,  968,  642,  938,
 /*   200 */   158,  466,  467,  468,  469,  470,  471,  472,  473,  474,
 /*   210 */   475,  476,  477,  478,  161,   64,  135,  812,   74,   62,
 /*   220 */   824,  133,   59,  131,  822,   57,  130,  827,   55,  129,
 /*   230 */   832,   53,  128,  837,   51,  124,  842,   49,  123,  847,
 /*   240 */   663,  859,  122,   47,  864,  121,   44,  120,  862,   42,
 /*   250 */   119,  867,  163,  942,  118,  445,  132,  877,   34,  164,
 /*   260 */    97,  181,   98,  889,   33,  117,  877,   34,  737,  901,
 /*   270 */    32,  167,  889,   33,  711,   31,  738,  187,  901,   32,
 /*   280 */    11,  957,   91,  142,   31,   93,   92,  949,  950,    5,
 /*   290 */    39,  106,  736,   22,  968,  938,  914,   38,  736,   81,
 /*   300 */   739,  187,   13,   12,    8,   82,  739,  187,   94,  480,
 /*   310 */     1,   85,   64,  135,  812,   74,   62,  824,  133,   59,
 /*   320 */   131,  822,   57,  130,  827,   55,  129,  832,   53,  128,
 /*   330 */   837,   51,  124,  842,   49,  123,  847,   76,  859,  122,
 /*   340 */    47,  864,  121,   44,  120,  862,   42,  119,  867,   77,
 /*   350 */   942,  118,  175,  132,  877,   34,  437,  701,  945,  465,
 /*   360 */   889,   33,  452,  453,  454,  176,  901,   32,  178,  109,
 /*   370 */   151,   27,   31,  185,  466,  467,  468,  469,  470,  471,
 /*   380 */   472,  473,  474,  475,  476,  477,  478,    2,   84,  956,
 /*   390 */   512,   64,  135,  812,   74,   62,  824,  133,   59,  131,
 /*   400 */   822,   57,  130,  827,   55,  129,  832,   53,  128,  837,
 /*   410 */    51,  124,  842,   49,  123,  847,  173,  859,  122,   47,
 /*   420 */   864,  121,   44,  120,  862,   42,  119,  867,  526,  942,
 /*   430 */   118,   78,  132,  877,   34,  437,  483,  181,  186,  889,
 /*   440 */    33,   18,  112,  437,  443,  901,   32,  437,  440,  510,
 /*   450 */    79,   31,  117,  877,   34,  876,   34,  456,  457,  889,
 /*   460 */    33,  889,   33,  172,  951,  901,   32,  901,   32,  482,
 /*   470 */   969,   31,   15,   31,  501,  188,  171,  452,  453,  454,
 /*   480 */    30,    6,   40,   75,   64,  135,  812,   74,   62,  824,
 /*   490 */   133,   59,  131,  822,   57,  130,  827,   55,  129,  832,
 /*   500 */    53,  128,  837,   51,  124,  842,   49,  123,  847,  618,
 /*   510 */   859,  122,   47,  864,  121,   44,  120,  862,   42,  119,
 /*   520 */   867,  520,  942,  118,  192,  132,  877,   34,  191,  485,
 /*   530 */   948,  598,  889,   33,   19,   69,  877,   34,  901,   32,
 /*   540 */   593,  190,  889,   33,   31,   99,  172,   41,  901,   32,
 /*   550 */   617,  508,  623,  622,   31,  588,   43,   29,  583,  171,
 /*   560 */    73,   67,  963,  652,  103,  578,   45,   64,  135,  812,
 /*   570 */    74,   62,  824,  133,   59,  131,  822,   57,  130,  827,
 /*   580 */    55,  129,  832,   53,  128,  837,   51,  124,  842,   49,
 /*   590 */   123,  847,   46,  859,  122,   47,  864,  121,   44,  120,
 /*   600 */   862,   42,  119,  867,  497,  942,  118,  618,  132,  877,
 /*   610 */    34,  573,  693,  948,  675,  889,   33,   20,   16,  697,
 /*   620 */   651,  901,   32,  134,  877,   34,   48,   31,  568,   50,
 /*   630 */   889,   33,   21,   52,  563,  159,  901,   32,  650,  926,
 /*   640 */   437,  925,   31,  558,   54,  962,  553,   56,  617,  548,
 /*   650 */   619,  620,  156,  101,   58,  543,   64,  135,  812,   74,
 /*   660 */    62,  824,  133,   59,  131,  822,   57,  130,  827,   55,
 /*   670 */   129,  832,   53,  128,  837,   51,  124,  842,   49,  123,
 /*   680 */   847,   60,  859,  122,   47,  864,  121,   44,  120,  862,
 /*   690 */    42,  119,  867,  538,  942,  118,  533,  132,  877,   34,
 /*   700 */    61,  144,  945,  779,  889,   33,  143,  180,   65,  145,
 /*   710 */   901,   32,  146,  147,  193,  780,   31,  149,  494,  492,
 /*   720 */   490,   66,  529,  527,   64,  135,  812,   74,   62,  824,
 /*   730 */   133,   59,  131,  822,   57,  130,  827,   55,  129,  832,
 /*   740 */    53,  128,  837,   51,  124,  842,   49,  123,  847,  525,
 /*   750 */   859,  122,   47,  864,  121,   44,  120,  862,   42,  119,
 /*   760 */   867,  523,  942,  118,  521,  132,  877,   34,  602,  519,
 /*   770 */   946,  511,  889,   33,  509,  507,  500,  690,  901,   32,
 /*   780 */   498,  111,  496,  664,   31,   64,  135,  812,   74,   62,
 /*   790 */   824,  133,   59,  131,  822,   57,  130,  827,   55,  129,
 /*   800 */   832,   53,  128,  837,   51,  124,  842,   49,  123,  847,
 /*   810 */   689,  859,  122,   47,  864,  121,   44,  120,  862,   42,
 /*   820 */   119,  867,    7,  942,  118,  705,  132,  877,   34,  694,
 /*   830 */   704,  945,  702,  889,   33,  162,  700,  698,   24,  901,
 /*   840 */    32,  696,  676,   25,  488,   31,  486,  484,   95,  447,
 /*   850 */   152,  446,  102,  931,  444,  442,   64,  135,  812,   74,
 /*   860 */    62,  824,  133,   59,  131,  822,   57,  130,  827,   55,
 /*   870 */   129,  832,   53,  128,  837,   51,  124,  842,   49,  123,
 /*   880 */   847,  441,  859,  122,   47,  864,  121,   44,  120,  862,
 /*   890 */    42,  119,  867,  439,  942,  118,  165,  132,  877,   34,
 /*   900 */   438,  710,  945,  710,  889,   33,  710,  710,  104,  710,
 /*   910 */   901,   32,  710,  710,  710,  710,   31,   64,  135,  812,
 /*   920 */    74,   62,  824,  133,   59,  131,  822,   57,  130,  827,
 /*   930 */    55,  129,  832,   53,  128,  837,   51,  124,  842,   49,
 /*   940 */   123,  847,  710,  859,  122,   47,  864,  121,   44,  120,
 /*   950 */   862,   42,  119,  867,  710,  942,  118,  710,  132,  877,
 /*   960 */    34,  168,  710,  946,  710,  889,   33,  710,  710,  710,
 /*   970 */   710,  901,   32,  105,  710,  710,  710,   31,  710,  710,
 /*   980 */   710,  710,   64,  135,  812,   74,   62,  824,  133,   59,
 /*   990 */   131,  822,   57,  130,  827,   55,  129,  832,   53,  128,
 /*  1000 */   837,   51,  124,  842,   49,  123,  847,  710,  859,  122,
 /*  1010 */    47,  864,  121,   44,  120,  862,   42,  119,  867,  710,
 /*  1020 */   942,  118,  179,  132,  877,   34,  710,  710,  946,  710,
 /*  1030 */   889,   33,  710,  710,  710,  710,  901,   32,  710,  110,
 /*  1040 */   710,  710,   31,   64,  135,  812,   74,   62,  824,  133,
 /*  1050 */    59,  131,  822,   57,  130,  827,   55,  129,  832,   53,
 /*  1060 */   128,  837,   51,  124,  842,   49,  123,  847,  710,  859,
 /*  1070 */   122,   47,  864,  121,   44,  120,  862,   42,  119,  867,
 /*  1080 */   710,  942,  118,  710,  132,  877,   34,  781,  710,  945,
 /*  1090 */   710,  889,   33,  710,  710,  710,  710,  901,   32,  782,
 /*  1100 */   710,  710,  710,   31,  710,  710,  710,  710,   64,  135,
 /*  1110 */   812,   74,   62,  824,  133,   59,  131,  822,   57,  130,
 /*  1120 */   827,   55,  129,  832,   53,  128,  837,   51,  124,  842,
 /*  1130 */    49,  123,  847,  710,  859,  122,   47,  864,  121,   44,
 /*  1140 */   120,  862,   42,  119,  867,  710,  942,  118,  710,  132,
 /*  1150 */   877,   34,  710,  710,  946,  710,  889,   33,  710,  710,
 /*  1160 */   710,  710,  901,   32,  710,  111,  710,  710,   31,   64,
 /*  1170 */   135,  812,   74,   62,  824,  133,   59,  131,  822,   57,
 /*  1180 */   130,  827,   55,  129,  832,   53,  128,  837,   51,  124,
 /*  1190 */   842,   49,  123,  847,  710,  859,  122,   47,  864,  121,
 /*  1200 */    44,  120,  862,   42,  119,  867,  710,  942,  118,  710,
 /*  1210 */   132,  877,   34,  710,  710,  945,  710,  889,   33,  710,
 /*  1220 */   710,  710,  710,  901,   32,  710,  710,  710,  710,   31,
 /*  1230 */   153,  710,  710,  710,  710,  710,  710,  930,   64,  135,
 /*  1240 */   812,   74,   62,  824,  133,   59,  131,  822,   57,  130,
 /*  1250 */   827,   55,  129,  832,   53,  128,  837,   51,  124,  842,
 /*  1260 */    49,  123,  847,  710,  859,  122,   47,  864,  121,   44,
 /*  1270 */   120,  862,   42,  119,  867,  710,  942,  118,  710,  132,
 /*  1280 */   877,   34,  710,  710,  948,  710,  889,   33,  710,  710,
 /*  1290 */   710,  157,  901,   32,  710,  710,  710,  710,   31,   64,
 /*  1300 */   135,  812,   74,   62,  824,  133,   59,  131,  822,   57,
 /*  1310 */   130,  827,   55,  129,  832,   53,  128,  837,   51,  124,
 /*  1320 */   842,   49,  123,  847,  710,  859,  122,   47,  864,  121,
 /*  1330 */    44,  120,  862,   42,  119,  867,  710,  942,  118,  710,
 /*  1340 */   132,  877,   34,  710,  710,  948,  710,  889,   33,  710,
 /*  1350 */   710,  710,  710,  901,   32,  160,  710,  710,  710,   31,
 /*  1360 */   710,  710,  710,   64,  135,  812,   74,   62,  824,  133,
 /*  1370 */    59,  131,  822,   57,  130,  827,   55,  129,  832,   53,
 /*  1380 */   128,  837,   51,  124,  842,   49,  123,  847,  710,  859,
 /*  1390 */   122,   47,  864,  121,   44,  120,  862,   42,  119,  867,
 /*  1400 */   710,  942,  118,  710,  132,  877,   34,  710,  710,  948,
 /*  1410 */   710,  889,   33,  710,  710,  166,  710,  901,   32,  710,
 /*  1420 */   710,  710,  710,   31,   64,  135,  812,   74,   62,  824,
 /*  1430 */   133,   59,  131,  822,   57,  130,  827,   55,  129,  832,
 /*  1440 */    53,  128,  837,   51,  124,  842,   49,  123,  847,  710,
 /*  1450 */   859,  122,   47,  864,  121,   44,  120,  862,   42,  119,
 /*  1460 */   867,  710,  942,  118,  710,  132,  877,   34,  710,  710,
 /*  1470 */   946,  710,  889,   33,  710,  710,  710,  710,  901,   32,
 /*  1480 */   177,  710,  710,  710,   31,  710,  710,  710,   64,  135,
 /*  1490 */   812,   74,   62,  824,  133,   59,  131,  822,   57,  130,
 /*  1500 */   827,   55,  129,  832,   53,  128,  837,   51,  124,  842,
 /*  1510 */    49,  123,  847,  710,  859,  122,   47,  864,  121,   44,
 /*  1520 */   120,  862,   42,  119,  867,  710,  942,  118,  710,  132,
 /*  1530 */   877,   34,  710,  710,  948,  710,  889,   33,  710,  710,
 /*  1540 */   710,  937,  901,   32,  710,  710,  710,  710,   31,   64,
 /*  1550 */   135,  812,   74,   62,  824,  133,   59,  131,  822,   57,
 /*  1560 */   130,  827,   55,  129,  832,   53,  128,  837,   51,  124,
 /*  1570 */   842,   49,  123,  847,  710,  859,  122,   47,  864,  121,
 /*  1580 */    44,  120,  862,   42,  119,  867,  710,  942,  118,  710,
 /*  1590 */   132,  877,   34,  710,  710,  948,  710,  889,   33,  710,
 /*  1600 */   710,  710,  710,  901,   32,  961,  710,  710,  710,   31,
 /*  1610 */   710,  710,  710,   64,  135,  812,   74,   62,  824,  133,
 /*  1620 */    59,  131,  822,   57,  130,  827,   55,  129,  832,   53,
 /*  1630 */   128,  837,   51,  124,  842,   49,  123,  847,  710,  859,
 /*  1640 */   122,   47,  864,  121,   44,  120,  862,   42,  119,  867,
 /*  1650 */   710,  942,  118,  710,  132,  877,   34,  710,  710,  948,
 /*  1660 */   710,  889,   33,  710,  710,  710,  944,  901,   32,  710,
 /*  1670 */   710,  710,  710,   31,   64,  135,  812,   74,   62,  824,
 /*  1680 */   133,   59,  131,  822,   57,  130,  827,   55,  129,  832,
 /*  1690 */    53,  128,  837,   51,  124,  842,   49,  123,  847,  710,
 /*  1700 */   859,  122,   47,  864,  121,   44,  120,  862,   42,  119,
 /*  1710 */   867,  710,  942,  118,  710,  132,  877,   34,  710,  710,
 /*  1720 */   948,  710,  889,   33,  710,  710,  710,  710,  901,   32,
 /*  1730 */   182,  710,  710,  710,   31,  710,  710,  710,   64,  135,
 /*  1740 */   812,   74,   62,  824,  133,   59,  131,  822,   57,  130,
 /*  1750 */   827,   55,  129,  832,   53,  128,  837,   51,  124,  842,
 /*  1760 */    49,  123,  847,  710,  859,  122,   47,  864,  121,   44,
 /*  1770 */   120,  862,   42,  119,  867,  710,  942,  118,  710,  132,
 /*  1780 */   877,   34,  710,  710,  948,  710,  889,   33,  710,  710,
 /*  1790 */   710,  183,  901,   32,  710,  710,  710,  710,   31,   64,
 /*  1800 */   135,  812,   74,   62,  824,  133,   59,  131,  822,   57,
 /*  1810 */   130,  827,   55,  129,  832,   53,  128,  837,   51,  124,
 /*  1820 */   842,   49,  123,  847,  710,  859,  122,   47,  864,  121,
 /*  1830 */    44,  120,  862,   42,  119,  867,  710,  942,  118,  710,
 /*  1840 */   132,  877,   34,  710,  710,  948,  710,  889,   33,  710,
 /*  1850 */   710,  710,  710,  901,   32,  932,  710,  710,  710,   31,
 /*  1860 */   710,  710,  710,   64,  135,  812,   74,   62,  824,  133,
 /*  1870 */    59,  131,  822,   57,  130,  827,   55,  129,  832,   53,
 /*  1880 */   128,  837,   51,  124,  842,   49,  123,  847,  710,  859,
 /*  1890 */   122,   47,  864,  121,   44,  120,  862,   42,  119,  867,
 /*  1900 */   710,  942,  118,  710,  132,  877,   34,  710,  710,  948,
 /*  1910 */   710,  889,   33,  710,  710,  710,  169,  901,   32,  710,
 /*  1920 */   710,  710,  710,   31,   64,  135,  812,   74,   62,  824,
 /*  1930 */   133,   59,  131,  822,   57,  130,  827,   55,  129,  832,
 /*  1940 */    53,  128,  837,   51,  124,  842,   49,  123,  847,  710,
 /*  1950 */   859,  122,   47,  864,  121,   44,  120,  862,   42,  119,
 /*  1960 */   867,  710,  942,  118,  710,  132,  877,   34,  710,  710,
 /*  1970 */   948,  710,  889,   33,  710,  710,  710,  184,  901,   32,
 /*  1980 */   710,  710,  710,  710,   31,  710,   64,  135,  812,   74,
 /*  1990 */    62,  824,  133,   59,  131,  822,   57,  130,  827,   55,
 /*  2000 */   129,  832,   53,  128,  837,   51,  124,  842,   49,  123,
 /*  2010 */   847,  710,  859,  122,   47,  864,  121,   44,  120,  862,
 /*  2020 */    42,  119,  867,  710,  942,  118,  710,  132,  877,   34,
 /*  2030 */   710,  710,  946,  710,  889,   33,  710,  710,  794,  710,
 /*  2040 */   901,   32,  710,  710,  710,  710,   31,   64,  135,  812,
 /*  2050 */    74,   62,  824,  133,   59,  131,  822,   57,  130,  827,
 /*  2060 */    55,  129,  832,   53,  128,  837,   51,  124,  842,   49,
 /*  2070 */   123,  847,  710,  859,  122,   47,  864,  121,   44,  120,
 /*  2080 */   862,   42,  119,  867,  710,  942,  118,  710,  132,  877,
 /*  2090 */    34,  710,  710,  946,  710,  889,   33,  710,  710,  710,
 /*  2100 */   710,  901,   32,  710,  710,  710,  710,   31,  710,   64,
 /*  2110 */   135,  812,   74,   62,  824,  133,   59,  131,  822,   57,
 /*  2120 */   130,  827,   55,  129,  832,   53,  128,  837,   51,  124,
 /*  2130 */   842,   49,  123,  847,  710,  859,  122,   47,  864,  121,
 /*  2140 */    44,  120,  862,   42,  119,  867,  710,  942,  118,  710,
 /*  2150 */   132,  877,   34,  710,  710,  915,  710,  889,   33,  710,
 /*  2160 */   710,  710,  710,  901,   32,  710,  710,  710,  710,   31,
 /*  2170 */    89,   64,  135,  812,   74,   62,  824,  133,   59,  131,
 /*  2180 */   822,   57,  130,  827,   55,  129,  832,   53,  128,  837,
 /*  2190 */    51,  124,  842,   49,  123,  847,  710,  859,  122,   47,
 /*  2200 */   864,  121,   44,  120,  862,   42,  119,  867,  710,  942,
 /*  2210 */   118,  710,  132,  877,   34,  710,  710,  903,  710,  889,
 /*  2220 */    33,  710,  710,  710,  710,  901,   32,   88,  710,  710,
 /*  2230 */   710,   31,   64,  135,  812,   74,   62,  824,  133,   59,
 /*  2240 */   131,  822,   57,  130,  827,   55,  129,  832,   53,  128,
 /*  2250 */   837,   51,  124,  842,   49,  123,  847,  710,  859,  122,
 /*  2260 */    47,  864,  121,   44,  120,  862,   42,  119,  867,  710,
 /*  2270 */   942,  118,  710,  132,  877,   34,  710,  710,  891,  710,
 /*  2280 */   889,   33,   87,  710,  710,  710,  901,   32,  710,  710,
 /*  2290 */   710,  710,   31,  710,   64,  135,  812,   74,   62,  824,
 /*  2300 */   133,   59,  131,  822,   57,  130,  827,   55,  129,  832,
 /*  2310 */    53,  128,  837,   51,  124,  842,   49,  123,  847,  710,
 /*  2320 */   859,  122,   47,  864,  121,   44,  120,  862,   42,  119,
 /*  2330 */   867,  710,  942,  118,  710,  132,  877,   34,   86,  710,
 /*  2340 */   884,  710,  889,   33,  710,  710,  710,  710,  901,   32,
 /*  2350 */   710,  710,  710,  710,   31,   64,  135,  812,   74,   62,
 /*  2360 */   824,  133,   59,  131,  822,   57,  130,  827,   55,  129,
 /*  2370 */   832,   53,  128,  837,   51,  124,  842,   49,  123,  847,
 /*  2380 */   710,  859,  122,   47,  864,  121,   44,  120,  862,   42,
 /*  2390 */   119,  867,  710,  942,  118,  710,  132,  877,   34,  710,
 /*  2400 */   710,  885,  710,  889,   33,  710,  710,  710,  710,  901,
 /*  2410 */    32,  710,  710,  710,  710,   31,  710,   64,  135,  812,
 /*  2420 */    74,   62,  824,  133,   59,  131,  822,   57,  130,  827,
 /*  2430 */    55,  129,  832,   53,  128,  837,   51,  124,  842,   49,
 /*  2440 */   123,  847,  710,  859,  122,   47,  864,  121,   44,  120,
 /*  2450 */   862,   42,  119,  867,  710,  942,  118,  710,  132,  877,
 /*  2460 */    34,  710,  710,  892,  710,  889,   33,  710,  710,  710,
 /*  2470 */   710,  901,   32,  710,  710,  710,  710,   31,   64,  135,
 /*  2480 */   812,   74,   62,  824,  133,   59,  131,  822,   57,  130,
 /*  2490 */   827,   55,  129,  832,   53,  128,  837,   51,  124,  842,
 /*  2500 */    49,  123,  847,  710,  859,  122,   47,  864,  121,   44,
 /*  2510 */   120,  862,   42,  119,  867,  710,  942,  118,  710,  132,
 /*  2520 */   877,   34,  710,  710,  904,  710,  889,   33,  710,  710,
 /*  2530 */   710,  710,  901,   32,  710,  710,  710,  710,   31,  710,
 /*  2540 */    64,  135,  812,   74,   62,  824,  133,   59,  131,  822,
 /*  2550 */    57,  130,  827,   55,  129,  832,   53,  128,  837,   51,
 /*  2560 */   124,  842,   49,  123,  847,  710,  859,  122,   47,  864,
 /*  2570 */   121,   44,  120,  862,   42,  119,  867,  710,  942,  118,
 /*  2580 */   710,  132,  877,   34,  710,  710,  916,  710,  889,   33,
 /*  2590 */   710,  710,  710,  710,  901,   32,  710,  710,  710,  710,
 /*  2600 */    31,   64,  135,  812,   74,   62,  824,  133,   59,  131,
 /*  2610 */   822,   57,  130,  827,   55,  129,  832,   53,  128,  837,
 /*  2620 */    51,  124,  842,   49,  123,  847,  710,  859,  122,   47,
 /*  2630 */   864,  121,   44,  120,  862,   42,  119,  867,  710,  942,
 /*  2640 */   118,  710,  132,  877,   34,  710,  710,  170,  710,  889,
 /*  2650 */    33,  710,  710,  710,  710,  901,   32,  710,  710,  710,
 /*  2660 */   710,   31,  710,   64,  135,  812,   74,   62,  824,  133,
 /*  2670 */    59,  131,  822,   57,  130,  827,   55,  129,  832,   53,
 /*  2680 */   128,  837,   51,  124,  842,   49,  123,  847,  710,  859,
 /*  2690 */   122,   47,  864,  121,   44,  120,  862,   42,  119,  867,
 /*  2700 */   710,  942,  118,  710,  132,  877,   34,  710,  710,  943,
 /*  2710 */   710,  889,   33,  710,  710,  710,  710,  901,   32,  710,
 /*  2720 */   710,  630,  710,   31,   64,  135,  812,   74,   62,  824,
 /*  2730 */   133,   59,  131,  822,   57,  130,  827,   55,  129,  832,
 /*  2740 */    53,  128,  837,   51,  124,  842,   49,  123,  847,  710,
 /*  2750 */   859,  122,   47,  864,  121,   44,  120,  862,   42,  119,
 /*  2760 */   867,  710,  871,  118,  710,  132,  877,   34,  629,  710,
 /*  2770 */   635,  634,  889,   33,  630,  710,  710,  710,  901,   32,
 /*  2780 */   710,  710,  710,  710,   31,  710,   64,  135,  812,   74,
 /*  2790 */    62,  824,  133,   59,  131,  822,   57,  130,  827,   55,
 /*  2800 */   129,  832,   53,  128,  837,   51,  124,  842,   49,  123,
 /*  2810 */   847,  710,  859,  122,   47,  864,  121,   44,  120,  862,
 /*  2820 */    42,  629,  868,  631,  632,  710,  710,  132,  877,   34,
 /*  2830 */   710,  710,  710,  710,  889,   33,  710,  710,  710,  710,
 /*  2840 */   901,   32,  710,  710,  710,  710,   31,   64,  135,  812,
 /*  2850 */    74,   62,  824,  133,   59,  131,  822,   57,  130,  827,
 /*  2860 */    55,  129,  832,   53,  128,  837,   51,  124,  842,   49,
 /*  2870 */   123,  847,  710,  859,  122,   47,  864,  121,   44,  120,
 /*  2880 */   862,   42,  710,  866,  710,  710,  710,  710,  132,  877,
 /*  2890 */    34,  710,  710,  710,  710,  889,   33,  710,  710,  710,
 /*  2900 */   710,  901,   32,  710,  710,  710,  710,   31,  710,   64,
 /*  2910 */   135,  812,   74,   62,  824,  133,   59,  131,  822,   57,
 /*  2920 */   130,  827,   55,  129,  832,   53,  128,  837,   51,  124,
 /*  2930 */   842,   49,  123,  847,  710,  859,  122,   47,  864,  121,
 /*  2940 */    44,  710,  863,  710,  710,  710,  710,  710,  710,  710,
 /*  2950 */   132,  877,   34,  710,  710,  710,  710,  889,   33,  710,
 /*  2960 */   710,  710,  710,  901,   32,  710,  710,  710,  710,   31,
 /*  2970 */    64,  135,  812,   74,   62,  824,  133,   59,  131,  822,
 /*  2980 */    57,  130,  827,   55,  129,  832,   53,  128,  837,   51,
 /*  2990 */   124,  842,   49,  123,  847,  710,  859,  122,   47,  864,
 /*  3000 */   121,   44,  710,  861,  710,  710,  710,  710,  710,  710,
 /*  3010 */   710,  132,  877,   34,  710,  710,  710,  710,  889,   33,
 /*  3020 */   710,  710,  710,  710,  901,   32,  710,  710,  710,  710,
 /*  3030 */    31,  710,   64,  135,  812,   74,   62,  824,  133,   59,
 /*  3040 */   131,  822,   57,  130,  827,   55,  129,  832,   53,  128,
 /*  3050 */   837,   51,  124,  842,   49,  123,  847,  710,  859,  122,
 /*  3060 */    47,  856,  121,  710,  710,  710,  710,  710,  710,  710,
 /*  3070 */   710,  710,  710,  132,  877,   34,  710,  710,  710,  710,
 /*  3080 */   889,   33,  710,  710,  710,  710,  901,   32,  710,  710,
 /*  3090 */   710,  710,   31,   64,  135,  812,   74,   62,  824,  133,
 /*  3100 */    59,  131,  822,   57,  130,  827,   55,  129,  832,   53,
 /*  3110 */   128,  837,   51,  124,  842,   49,  123,  847,  710,  859,
 /*  3120 */   122,   47,  710,  858,  710,  710,  710,  710,  710,  710,
 /*  3130 */   710,  710,  710,  710,  132,  877,   34,  710,  710,  710,
 /*  3140 */   710,  889,   33,  710,  710,  710,  710,  901,   32,  710,
 /*  3150 */   710,   68,  710,   31,  710,   64,  135,  812,   74,   62,
 /*  3160 */   824,  133,   59,  131,  822,   57,  130,  827,   55,  129,
 /*  3170 */   832,   53,  128,  837,   51,  124,  842,   49,  123,  847,
 /*  3180 */   710,  851,  122,  710,  710,  710,  710,  710,  710,  710,
 /*  3190 */   710,  710,  710,  117,  877,   34,  132,  877,   34,  710,
 /*  3200 */   889,   33,  710,  889,   33,  710,  901,   32,  710,  901,
 /*  3210 */    32,  601,   31,  139,  710,   31,   90,  710,  603,  150,
 /*  3220 */    14,  710,  936,  939,  710,  710,  710,  533,  538,  543,
 /*  3230 */   548,  553,  558,  563,  568,  710,  583,  588,  710,  710,
 /*  3240 */   578,  710,  710,  710,  710,   71,   28,  710,  604,  605,
 /*  3250 */   710,  610,  710,  710,  141,  710,  710,  710,  710,  710,
 /*  3260 */   140,  710,  808,   70,  710,  636,  710,  641,  710,  643,
 /*  3270 */   644,  645,  127,  126,   72,   26,  710,  710,    4,   64,
 /*  3280 */   135,  812,   74,   62,  824,  133,   59,  131,  822,   57,
 /*  3290 */   130,  827,   55,  129,  832,   53,  128,  837,   51,  124,
 /*  3300 */   842,   49,  710,  848,  710,  117,  877,   34,  710,  710,
 /*  3310 */   710,  710,  889,   33,  710,  710,  710,  710,  901,   32,
 /*  3320 */   132,  877,   34,  710,   31,  710,  710,  889,   33,  710,
 /*  3330 */   710,  710,  710,  901,   32,  939,  710,  710,  710,   31,
 /*  3340 */   710,  710,   64,  135,  812,   74,   62,  824,  133,   59,
 /*  3350 */   131,  822,   57,  130,  827,   55,  129,  832,   53,  128,
 /*  3360 */   837,   51,  124,  842,   49,  710,  846,  710,  710,  710,
 /*  3370 */   710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
 /*  3380 */   710,  710,  710,  132,  877,   34,  710,  710,  710,  710,
 /*  3390 */   889,   33,  601,  173,  710,  710,  901,   32,  710,  603,
 /*  3400 */   710,  710,   31,  710,  710,  710,  710,  710,  533,  538,
 /*  3410 */   543,  548,  553,  558,  563,  568,  710,  583,  588,  710,
 /*  3420 */   710,  578,  710,  710,  710,  710,   71,   28,  710,  604,
 /*  3430 */   605,  710,  610,  710,  710,  141,  710,  710,  710,  710,
 /*  3440 */   710,  140,  710,  710,  710,  710,  636,  710,  641,  710,
 /*  3450 */   643,  644,  645,  127,  126,   72,   26,  710,    6,  601,
 /*  3460 */   688,    3,  710,  710,  710,  710,  603,  710,  710,  710,
 /*  3470 */   710,  710,  710,  710,  710,  533,  538,  543,  548,  553,
 /*  3480 */   558,  563,  568,  710,  583,  588,  710,  710,  578,  710,
 /*  3490 */   710,  710,  710,   71,   28,  710,  604,  605,  710,  610,
 /*  3500 */   710,  710,  141,  710,  710,  710,  710,  710,  140,  710,
 /*  3510 */   710,  710,  710,  636,  710,  641,  710,  643,  644,  645,
 /*  3520 */   127,  126,   72,   26,  710,  601,  493,    3,  710,  710,
 /*  3530 */   710,  710,  603,  710,  710,  710,  710,  710,  710,  710,
 /*  3540 */   710,  533,  538,  543,  548,  553,  558,  563,  568,  710,
 /*  3550 */   583,  588,  710,  710,  578,  710,  710,  710,  710,   71,
 /*  3560 */    28,  710,  604,  605,  710,  610,  710,  710,  141,  710,
 /*  3570 */   710,  710,  710,  710,  140,  710,  710,  710,  710,  636,
 /*  3580 */   710,  641,  710,  643,  644,  645,  127,  126,   72,   26,
 /*  3590 */   710,  601,  528,    3,  710,  710,  710,  710,  603,  710,
 /*  3600 */   710,  710,  710,  710,  710,  710,  710,  533,  538,  543,
 /*  3610 */   548,  553,  558,  563,  568,  710,  583,  588,  710,  710,
 /*  3620 */   578,  710,  710,  710,  710,   71,   28,  710,  604,  605,
 /*  3630 */   710,  610,  710,  710,  141,  710,  710,  710,  710,  710,
 /*  3640 */   140,  710,  710,  710,  710,  636,  710,  641,  710,  643,
 /*  3650 */   644,  645,  127,  126,   72,   26,  710,  601,  522,    3,
 /*  3660 */   710,  710,  710,  710,  603,  710,  710,  710,  710,  710,
 /*  3670 */   710,  710,  710,  533,  538,  543,  548,  553,  558,  563,
 /*  3680 */   568,  710,  583,  588,  710,  710,  578,  710,  710,  710,
 /*  3690 */   710,   71,   28,  710,  604,  605,  710,  610,  710,  710,
 /*  3700 */   141,  710,  710,  710,  710,  710,  140,  710,  710,  710,
 /*  3710 */   710,  636,  710,  641,  710,  643,  644,  645,  127,  126,
 /*  3720 */    72,   26,  710,  601,  499,    9,  710,  710,  710,  710,
 /*  3730 */   603,  710,  710,  710,  710,  710,  710,  710,  710,  533,
 /*  3740 */   538,  543,  548,  553,  558,  563,  568,  710,  583,  588,
 /*  3750 */   710,  710,  578,  710,  710,  710,  710,   71,   28,  710,
 /*  3760 */   604,  605,  710,  610,  710,  710,  141,  710,  710,  710,
 /*  3770 */   710,  710,  140,  710,  710,  710,  710,  636,  710,  641,
 /*  3780 */   710,  643,  644,  645,  127,  126,   72,   26,  710,  601,
 /*  3790 */   699,    3,  710,  710,  710,  710,  603,  710,  710,  710,
 /*  3800 */   710,  710,  710,  710,  710,  533,  538,  543,  548,  553,
 /*  3810 */   558,  563,  568,  710,  583,  588,  710,  710,  578,  710,
 /*  3820 */   710,  710,  710,   71,   28,  710,  604,  605,  710,  610,
 /*  3830 */   710,  710,  141,  710,  710,  710,  710,  710,  140,  710,
 /*  3840 */   710,  710,  710,  636,  710,  641,  710,  643,  644,  645,
 /*  3850 */   127,  126,   72,   26,  710,  601,  524,  710,  710,  710,
 /*  3860 */   710,  710,  603,  710,  710,  710,  710,  710,  710,  710,
 /*  3870 */   710,  533,  538,  543,  548,  553,  558,  563,  568,  710,
 /*  3880 */   583,  588,  710,  710,  578,  710,  710,  710,  710,   71,
 /*  3890 */    28,  710,  604,  605,  710,  610,  710,  710,  141,  710,
 /*  3900 */   710,  710,  710,  710,  140,  710,  710,  710,  710,  636,
 /*  3910 */   710,  641,  710,  643,  644,  645,  127,  126,   72,   26,
 /*  3920 */   710,  601,  518,  710,  710,  710,  710,  710,  603,  710,
 /*  3930 */   710,  710,  710,  710,  710,  710,  710,  533,  538,  543,
 /*  3940 */   548,  553,  558,  563,  568,  710,  583,  588,  710,  710,
 /*  3950 */   578,  710,  710,  710,  710,   71,   28,  710,  604,  605,
 /*  3960 */   710,  610,  710,  710,  141,  710,  710,  710,  710,  710,
 /*  3970 */   140,  710,  710,  710,  710,  636,  710,  641,  710,  643,
 /*  3980 */   644,  645,  127,  126,   72,   26,  710,  601,  506,  710,
 /*  3990 */   710,  710,  710,  710,  603,  710,  710,  710,  710,  710,
 /*  4000 */   710,  710,  710,  533,  538,  543,  548,  553,  558,  563,
 /*  4010 */   568,  710,  583,  588,  710,  710,  578,  710,  710,  710,
 /*  4020 */   710,   71,   28,  710,  604,  605,  710,  610,  710,  710,
 /*  4030 */   141,  710,  710,  710,  710,  710,  140,  710,  710,  710,
 /*  4040 */   710,  636,  710,  641,  710,  643,  644,  645,  127,  126,
 /*  4050 */    72,   26,  710,  601,  495,  710,  710,  710,  710,  710,
 /*  4060 */   603,  710,  710,  710,  710,  710,  710,  710,  710,  533,
 /*  4070 */   538,  543,  548,  553,  558,  563,  568,  710,  583,  588,
 /*  4080 */   710,  710,  578,  710,  710,  710,  710,   71,   28,  710,
 /*  4090 */   604,  605,  710,  610,  710,  710,  141,  710,  710,  710,
 /*  4100 */   710,  710,  140,  710,  710,  710,  710,  636,  710,  641,
 /*  4110 */   710,  643,  644,  645,  127,  126,   72,   26,  710,  601,
 /*  4120 */   695,  710,  710,  710,  710,  710,  603,  710,  710,  710,
 /*  4130 */   710,  710,  710,  710,  710,  533,  538,  543,  548,  553,
 /*  4140 */   558,  563,  568,  710,  583,  588,  710,  710,  578,  710,
 /*  4150 */   710,  710,  710,   71,   28,  710,  604,  605,  710,  610,
 /*  4160 */   710,  710,  141,  710,  710,  710,  710,  710,  140,  710,
 /*  4170 */   710,  710,  710,  636,  710,  641,  710,  643,  644,  645,
 /*  4180 */   127,  126,   72,   26,  710,  601,  710,    3,  710,  710,
 /*  4190 */   710,  710,  603,  710,  710,  710,  710,  710,  710,  710,
 /*  4200 */   710,  533,  538,  543,  548,  553,  558,  563,  568,  710,
 /*  4210 */   583,  588,  710,  710,  578,  710,  710,  710,  710,   71,
 /*  4220 */    28,  710,  604,  605,  710,  610,  710,  710,  141,  710,
 /*  4230 */   710,  710,  710,  710,  140,  710,  710,  710,  710,  636,
 /*  4240 */   710,  641,  710,  643,  644,  645,  127,  126,   72,   26,
 /*  4250 */   710,  601,  487,  710,  710,  710,  710,  710,  603,  710,
 /*  4260 */   710,  710,  710,  710,  710,  710,  710,  533,  538,  543,
 /*  4270 */   548,  553,  558,  563,  568,  710,  583,  588,  710,  710,
 /*  4280 */   578,  710,  710,  710,  710,   71,   28,  710,  604,  605,
 /*  4290 */   710,  610,  710,  710,  141,  710,  710,  710,  710,  710,
 /*  4300 */   140,  710,  710,  710,  710,  636,  710,  641,  710,  643,
 /*  4310 */   644,  645,  127,  126,   72,   26,  710,  601,  710,  710,
 /*  4320 */   710,  710,  710,  710,  603,  710,  710,  710,  710,  710,
 /*  4330 */   710,  710,  710,  533,  538,  543,  548,  553,  558,  563,
 /*  4340 */   568,  710,  583,  588,  710,  710,  578,  710,  710,  710,
 /*  4350 */   710,   71,   28,  710,  604,  605,  710,  610,  710,  710,
 /*  4360 */   141,  710,  710,  710,  710,  710,  140,   64,  710,  813,
 /*  4370 */    74,  636,  710,  641,  710,  643,  644,  645,  127,  126,
 /*  4380 */    72,   26,   64,  135,  812,   74,   62,  824,  133,   59,
 /*  4390 */   131,  822,   57,  130,  827,   55,  129,  832,   53,  128,
 /*  4400 */   837,   51,  710,  843,  710,  710,  710,  710,  132,  877,
 /*  4410 */    34,  710,  710,  710,  710,  889,   33,  710,  710,  710,
 /*  4420 */   710,  901,   32,  132,  877,   34,  710,   31,  710,  710,
 /*  4430 */   889,   33,  710,   68,  710,  710,  901,   32,  710,  710,
 /*  4440 */   710,  710,   31,   64,  135,  812,   74,   62,  824,  133,
 /*  4450 */    59,  131,  822,   57,  130,  827,   55,  129,  832,   53,
 /*  4460 */   128,  837,   51,  710,  841,  710,  710,  710,  710,  710,
 /*  4470 */   710,  710,  710,  710,  710,  117,  877,   34,  710,  710,
 /*  4480 */   710,  710,  889,   33,  132,  877,   34,  710,  901,   32,
 /*  4490 */   710,  889,   33,  601,   31,  710,  710,  901,   32,  710,
 /*  4500 */   603,  710,  710,   31,  935,  939,  710,  710,  710,  533,
 /*  4510 */   538,  543,  548,  553,  558,  563,  568,  710,  583,  588,
 /*  4520 */   710,  710,  578,  710,  710,  710,  710,  710,   28,  710,
 /*  4530 */   604,  605,  710,  610,  710,  710,  141,  710,  710,  710,
 /*  4540 */   710,  601,  140,  710,  710,  710,  710,  636,  603,  641,
 /*  4550 */   710,  643,  644,  645,  127,  126,   72,  533,  538,  543,
 /*  4560 */   548,  553,  558,  563,  568,  710,  583,  710,  710,  710,
 /*  4570 */   578,  710,  710,  710,  710,  710,   28,  710,  604,  605,
 /*  4580 */   710,  610,  710,  710,  141,  710,  710,  710,  710,  710,
 /*  4590 */   140,  710,  710,  710,  710,  636,  710,  641,  710,  643,
 /*  4600 */   644,  645,  127,  126,   72,  710,   64,  135,  812,   74,
 /*  4610 */    62,  824,  133,   59,  131,  822,   57,  130,  827,   55,
 /*  4620 */   129,  832,   53,  710,  838,  710,  710,   64,  135,  812,
 /*  4630 */    74,   62,  824,  133,   59,  131,  822,   57,  130,  827,
 /*  4640 */    55,  129,  832,   53,  710,  836,  710,  132,  877,   34,
 /*  4650 */   710,  710,  710,  710,  889,   33,  710,  710,  710,  710,
 /*  4660 */   901,   32,  710,  710,  710,  710,   31,  710,  132,  877,
 /*  4670 */    34,  710,  710,  710,  710,  889,   33,  601,  710,  710,
 /*  4680 */   710,  901,   32,  710,  603,  710,  710,   31,  710,  710,
 /*  4690 */   710,  710,  710,  533,  538,  543,  548,  553,  558,  563,
 /*  4700 */   568,  710,  710,  710,  710,  710,  578,  710,  710,  710,
 /*  4710 */   710,  710,   28,  710,  604,  605,  710,  610,  710,  710,
 /*  4720 */   141,  710,  710,  710,  710,  601,  140,  710,  710,  710,
 /*  4730 */   710,  636,  603,  641,  710,  643,  644,  645,  127,  126,
 /*  4740 */    72,  533,  538,  543,  548,  553,  558,  563,  568,  710,
 /*  4750 */   710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
 /*  4760 */    28,  710,  604,  605,  710,  610,  710,  710,  141,  710,
 /*  4770 */   710,  710,  710,  601,  140,  710,  710,  710,  710,  636,
 /*  4780 */   603,  641,  710,  643,  644,  645,  127,  126,   72,  533,
 /*  4790 */   538,  543,  548,  553,  558,  563,  710,  710,  710,  710,
 /*  4800 */   710,  710,  710,  710,  710,  710,  710,  710,   28,  710,
 /*  4810 */   604,  605,  710,  610,  710,  710,  141,  710,  710,  710,
 /*  4820 */   710,  710,  140,  710,  710,  710,  710,  636,  710,  641,
 /*  4830 */   710,  643,  644,  645,  127,  126,   72,   64,  135,  812,
 /*  4840 */    74,   62,  824,  133,   59,  131,  822,   57,  130,  827,
 /*  4850 */    55,  710,  833,  710,  710,  710,  710,   64,  135,  812,
 /*  4860 */    74,   62,  824,  133,   59,  131,  822,   57,  130,  827,
 /*  4870 */    55,  710,  831,  710,  710,  710,  710,  710,  132,  877,
 /*  4880 */    34,  710,  710,  710,  710,  889,   33,  710,  710,  710,
 /*  4890 */   710,  901,   32,  710,  710,  710,  710,   31,  132,  877,
 /*  4900 */    34,  710,  710,  710,  710,  889,   33,  601,  710,  710,
 /*  4910 */   710,  901,   32,  710,  603,  710,  710,   31,  710,  710,
 /*  4920 */   710,  710,  710,  533,  538,  543,  548,  553,  558,  710,
 /*  4930 */   710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
 /*  4940 */   710,  710,   28,  710,  604,  605,  710,  610,  710,  710,
 /*  4950 */   141,  710,  710,  710,  710,  601,  140,  710,  710,  710,
 /*  4960 */   710,  636,  603,  641,  710,  643,  644,  645,  127,  126,
 /*  4970 */    72,  533,  538,  543,  548,  553,  710,  710,  710,  710,
 /*  4980 */   710,  710,   64,  135,  812,   74,   62,  824,  133,   59,
 /*  4990 */    28,  823,  604,  605,  710,  610,  710,  710,  141,  710,
 /*  5000 */   710,  710,  710,  601,  140,  710,  710,  710,  710,  636,
 /*  5010 */   603,  641,  710,  643,  644,  645,  127,  126,   72,  533,
 /*  5020 */   538,  543,  548,  132,  877,   34,  710,  710,  710,  710,
 /*  5030 */   889,   33,  710,  710,  710,  710,  901,   32,   28,  710,
 /*  5040 */   604,  605,   31,  610,  710,  710,  141,  710,  710,  710,
 /*  5050 */   710,  710,  140,  710,  710,  710,  710,  636,  710,  641,
 /*  5060 */   710,  643,  644,  645,  127,  126,   72,   64,  135,  812,
 /*  5070 */    74,   62,  824,  133,   59,  131,  822,   57,  710,  828,
 /*  5080 */   710,  710,  710,  710,  710,  710,  710,   64,  135,  812,
 /*  5090 */    74,   62,  824,  133,   59,  131,  822,   57,  710,  826,
 /*  5100 */   710,  710,  710,  710,  710,  710,  710,  710,  132,  877,
 /*  5110 */    34,  710,  710,  710,  710,  889,   33,  710,  710,  710,
 /*  5120 */   710,  901,   32,  710,  710,  710,  710,   31,  132,  877,
 /*  5130 */    34,  710,  710,  710,  710,  889,   33,  601,  710,  710,
 /*  5140 */   710,  901,   32,  710,  603,  710,  710,   31,  710,  710,
 /*  5150 */   710,  710,  710,  533,  538,  543,  710,  710,  710,  710,
 /*  5160 */   710,  710,  710,  710,   64,  135,  812,   74,   62,  824,
 /*  5170 */   133,   59,   28,  821,  604,  605,  710,  610,  710,  710,
 /*  5180 */   141,  710,  710,  710,  710,  601,  140,  710,  710,  710,
 /*  5190 */   710,  636,  603,  641,  710,  643,  644,  645,  127,  126,
 /*  5200 */    72,  533,  538,  710,  710,  132,  877,   34,  710,  710,
 /*  5210 */   710,  710,  889,   33,  601,  710,  710,  710,  901,   32,
 /*  5220 */    28,  603,  604,  605,   31,  610,  710,  710,  141,  710,
 /*  5230 */   533,  710,  710,  710,  140,  710,  710,  710,  710,  636,
 /*  5240 */   710,  641,  710,  643,  644,  645,  127,  126,   72,   28,
 /*  5250 */   710,  604,  605,  710,  610,  601,  710,  141,  710,  710,
 /*  5260 */   710,  710,  603,  140,  710,  710,  710,  710,  636,  663,
 /*  5270 */   641,  710,  643,  644,  645,  127,  126,   72,  710,  710,
 /*  5280 */   710,  710,   64,  135,  812,   74,   62,  816,  133,  710,
 /*  5290 */    28,  710,  604,  605,  710,  610,  710,  710,  141,  710,
 /*  5300 */   710,  710,  710,  601,  140,   10,  710,  710,  710,  636,
 /*  5310 */   603,  641,  710,  643,  644,  645,  710,  710,  598,   39,
 /*  5320 */   710,  710,  710,  132,  877,   34,  710,  710,  710,  710,
 /*  5330 */   889,   33,  710,  710,  710,  710,  901,   32,   28,  710,
 /*  5340 */   604,  605,   31,  610,  710,  710,  141,  710,  710,  465,
 /*  5350 */   448,  710,  140,  710,  710,  710,  710,  636,  710,  641,
 /*  5360 */   710,  643,  644,  645,  466,  467,  468,  469,  470,  471,
 /*  5370 */   472,  473,  474,  475,  476,  477,  478,  465,  707,  710,
 /*  5380 */   710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
 /*  5390 */   710,  710,  466,  467,  468,  469,  470,  471,  472,  473,
 /*  5400 */   474,  475,  476,  477,  478,  465,  451,  710,  710,  710,
 /*  5410 */   710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
 /*  5420 */   466,  467,  468,  469,  470,  471,  472,  473,  474,  475,
 /*  5430 */   476,  477,  478,  465,  449,   64,  135,  812,   74,   62,
 /*  5440 */   710,  818,  710,  710,  710,  710,  710,  710,  466,  467,
 /*  5450 */   468,  469,  470,  471,  472,  473,  474,  475,  476,  477,
 /*  5460 */   478,  601,  710,   63,  710,  710,  710,  710,  603,  710,
 /*  5470 */   710,  710,  710,  710,  710,  710,  132,  877,   34,  710,
 /*  5480 */   710,  710,  710,  889,   33,  710,  710,  710,  710,  901,
 /*  5490 */    32,  710,  710,  710,  710,   31,   28,  710,  604,  605,
 /*  5500 */   710,  610,  710,  710,  141,  710,  601,  710,  710,  710,
 /*  5510 */   140,  710,  710,  603,  710,  636,  710,  641,  710,  643,
 /*  5520 */   644,  645,  710,  710,  710,  710,   64,  710,  811,   74,
 /*  5530 */   710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
 /*  5540 */   710,   28,  710,  604,  605,  710,  610,  710,  710,  141,
 /*  5550 */   710,  710,  710,  710,  710,  140,  710,  710,  710,  710,
 /*  5560 */   636,  710,  641,  710,  643,  644,  645,  132,  877,   34,
 /*  5570 */   710,  710,  710,  710,  889,   33,  710,  710,  710,  710,
 /*  5580 */   901,   32,  710,  710,  710,  710,   31,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    75,  137,  138,  139,   75,  147,  148,   75,  144,  145,
 /*    10 */    78,   82,   83,   84,  150,  151,   80,   85,   76,   77,
 /*    20 */   156,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*    30 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*    40 */   115,  116,  117,  118,  119,  120,   75,  122,  123,  124,
 /*    50 */   125,  126,  127,  128,  129,  130,  131,  132,   35,  134,
 /*    60 */   135,   21,  137,  138,  139,    7,    8,  142,   75,  144,
 /*    70 */   145,  136,  137,  138,  139,  150,  151,    8,   85,  144,
 /*    80 */   145,  156,   13,   90,   91,  150,  151,   84,   75,    7,
 /*    90 */     8,  156,   79,  168,  169,  170,   46,   75,   48,   14,
 /*   100 */   175,   16,   17,   18,   22,   23,   24,   25,   26,   27,
 /*   110 */    28,   29,   30,   31,   32,   33,   34,   80,   96,   97,
 /*   120 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   130 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*   140 */   118,  119,  120,  172,  122,  123,  124,  125,  126,  127,
 /*   150 */   128,  129,  130,  131,  132,    8,  134,  135,   80,  137,
 /*   160 */   138,  139,   53,   54,  142,   75,  144,  145,   21,  137,
 /*   170 */   138,  139,  150,  151,   75,   85,  144,  145,  156,   59,
 /*   180 */    60,   91,  150,  151,  153,  154,    7,    8,  156,   75,
 /*   190 */   168,  169,  170,  141,   75,  143,   62,  175,   64,  167,
 /*   200 */    75,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*   210 */    31,   32,   33,   34,   75,   96,   97,   98,   99,  100,
 /*   220 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   230 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*   240 */    21,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*   250 */   131,  132,   75,  134,  135,    8,  137,  138,  139,   75,
 /*   260 */    13,  142,   15,  144,  145,  137,  138,  139,   75,  150,
 /*   270 */   151,   75,  144,  145,    0,  156,   83,   84,  150,  151,
 /*   280 */    16,  173,   18,    9,  156,   11,   12,  168,  169,  170,
 /*   290 */    71,   75,   75,  165,  175,  167,  158,  159,   75,   82,
 /*   300 */    83,   84,   38,   39,   40,   82,   83,   84,   92,   35,
 /*   310 */   173,   37,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   320 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   330 */   114,  115,  116,  117,  118,  119,  120,   81,  122,  123,
 /*   340 */   124,  125,  126,  127,  128,  129,  130,  131,  132,   81,
 /*   350 */   134,  135,   75,  137,  138,  139,    7,    8,  142,    7,
 /*   360 */   144,  145,   16,   17,   18,   75,  150,  151,   75,   79,
 /*   370 */    75,  165,  156,   75,   22,   23,   24,   25,   26,   27,
 /*   380 */    28,   29,   30,   31,   32,   33,   34,  171,    8,  173,
 /*   390 */    10,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   400 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*   410 */   115,  116,  117,  118,  119,  120,    8,  122,  123,  124,
 /*   420 */   125,  126,  127,  128,  129,  130,  131,  132,    8,  134,
 /*   430 */   135,   81,  137,  138,  139,    7,    8,  142,   75,  144,
 /*   440 */   145,   21,   79,    7,    8,  150,  151,    7,    8,    8,
 /*   450 */     9,  156,  137,  138,  139,  138,  139,   19,   20,  144,
 /*   460 */   145,  144,  145,   75,  169,  150,  151,  150,  151,   15,
 /*   470 */   175,  156,    8,  156,   10,   14,   88,   16,   17,   18,
 /*   480 */    86,   73,  167,  136,   96,   97,   98,   99,  100,  101,
 /*   490 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*   500 */   112,  113,  114,  115,  116,  117,  118,  119,  120,    8,
 /*   510 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*   520 */   132,    8,  134,  135,   75,  137,  138,  139,   79,    8,
 /*   530 */   142,   22,  144,  145,   21,  137,  138,  139,  150,  151,
 /*   540 */    34,   75,  144,  145,  156,   79,   75,  133,  150,  151,
 /*   550 */    49,    8,   51,   52,  156,   33,  130,   36,   32,   88,
 /*   560 */   162,    8,  174,   10,   21,   36,  127,   96,   97,   98,
 /*   570 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   580 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*   590 */   119,  120,  124,  122,  123,  124,  125,  126,  127,  128,
 /*   600 */   129,  130,  131,  132,    8,  134,  135,    8,  137,  138,
 /*   610 */   139,   31,    8,  142,   10,  144,  145,   21,    8,    8,
 /*   620 */    10,  150,  151,  137,  138,  139,  121,  156,   30,  118,
 /*   630 */   144,  145,   21,  115,   29,   75,  150,  151,   45,  160,
 /*   640 */     7,   79,  156,   28,  112,  174,   27,  109,   49,   26,
 /*   650 */    51,   52,   92,   93,  106,   25,   96,   97,   98,   99,
 /*   660 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   670 */   110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
 /*   680 */   120,  103,  122,  123,  124,  125,  126,  127,  128,  129,
 /*   690 */   130,  131,  132,   24,  134,  135,   23,  137,  138,  139,
 /*   700 */   100,  149,  142,   75,  144,  145,   86,   75,   96,  155,
 /*   710 */   150,  151,  155,  149,   75,   87,  156,   89,    8,    8,
 /*   720 */     8,   41,    8,    8,   96,   97,   98,   99,  100,  101,
 /*   730 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*   740 */   112,  113,  114,  115,  116,  117,  118,  119,  120,    8,
 /*   750 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*   760 */   132,    8,  134,  135,    8,  137,  138,  139,   43,    8,
 /*   770 */   142,    8,  144,  145,    8,    8,    8,    8,  150,  151,
 /*   780 */     8,   92,    8,   21,  156,   96,   97,   98,   99,  100,
 /*   790 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   800 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*   810 */     8,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*   820 */   131,  132,   73,  134,  135,    8,  137,  138,  139,   10,
 /*   830 */     8,  142,    8,  144,  145,   75,    8,    8,   73,  150,
 /*   840 */   151,    8,   10,   72,    8,  156,    8,    8,   21,    8,
 /*   850 */   161,    8,   92,  164,    8,    8,   96,   97,   98,   99,
 /*   860 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*   870 */   110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
 /*   880 */   120,    8,  122,  123,  124,  125,  126,  127,  128,  129,
 /*   890 */   130,  131,  132,   10,  134,  135,   75,  137,  138,  139,
 /*   900 */     8,  176,  142,  176,  144,  145,  176,  176,   87,  176,
 /*   910 */   150,  151,  176,  176,  176,  176,  156,   96,   97,   98,
 /*   920 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   930 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*   940 */   119,  120,  176,  122,  123,  124,  125,  126,  127,  128,
 /*   950 */   129,  130,  131,  132,  176,  134,  135,  176,  137,  138,
 /*   960 */   139,   75,  176,  142,  176,  144,  145,  176,  176,  176,
 /*   970 */   176,  150,  151,   87,  176,  176,  176,  156,  176,  176,
 /*   980 */   176,  176,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   990 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  1000 */   114,  115,  116,  117,  118,  119,  120,  176,  122,  123,
 /*  1010 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  176,
 /*  1020 */   134,  135,   75,  137,  138,  139,  176,  176,  142,  176,
 /*  1030 */   144,  145,  176,  176,  176,  176,  150,  151,  176,   92,
 /*  1040 */   176,  176,  156,   96,   97,   98,   99,  100,  101,  102,
 /*  1050 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1060 */   113,  114,  115,  116,  117,  118,  119,  120,  176,  122,
 /*  1070 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1080 */   176,  134,  135,  176,  137,  138,  139,   75,  176,  142,
 /*  1090 */   176,  144,  145,  176,  176,  176,  176,  150,  151,   87,
 /*  1100 */   176,  176,  176,  156,  176,  176,  176,  176,   96,   97,
 /*  1110 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1120 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  1130 */   118,  119,  120,  176,  122,  123,  124,  125,  126,  127,
 /*  1140 */   128,  129,  130,  131,  132,  176,  134,  135,  176,  137,
 /*  1150 */   138,  139,  176,  176,  142,  176,  144,  145,  176,  176,
 /*  1160 */   176,  176,  150,  151,  176,   92,  176,  176,  156,   96,
 /*  1170 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1180 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1190 */   117,  118,  119,  120,  176,  122,  123,  124,  125,  126,
 /*  1200 */   127,  128,  129,  130,  131,  132,  176,  134,  135,  176,
 /*  1210 */   137,  138,  139,  176,  176,  142,  176,  144,  145,  176,
 /*  1220 */   176,  176,  176,  150,  151,  176,  176,  176,  176,  156,
 /*  1230 */    88,  176,  176,  176,  176,  176,  176,  164,   96,   97,
 /*  1240 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1250 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  1260 */   118,  119,  120,  176,  122,  123,  124,  125,  126,  127,
 /*  1270 */   128,  129,  130,  131,  132,  176,  134,  135,  176,  137,
 /*  1280 */   138,  139,  176,  176,  142,  176,  144,  145,  176,  176,
 /*  1290 */   176,   88,  150,  151,  176,  176,  176,  176,  156,   96,
 /*  1300 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1310 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1320 */   117,  118,  119,  120,  176,  122,  123,  124,  125,  126,
 /*  1330 */   127,  128,  129,  130,  131,  132,  176,  134,  135,  176,
 /*  1340 */   137,  138,  139,  176,  176,  142,  176,  144,  145,  176,
 /*  1350 */   176,  176,  176,  150,  151,   88,  176,  176,  176,  156,
 /*  1360 */   176,  176,  176,   96,   97,   98,   99,  100,  101,  102,
 /*  1370 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1380 */   113,  114,  115,  116,  117,  118,  119,  120,  176,  122,
 /*  1390 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1400 */   176,  134,  135,  176,  137,  138,  139,  176,  176,  142,
 /*  1410 */   176,  144,  145,  176,  176,   87,  176,  150,  151,  176,
 /*  1420 */   176,  176,  176,  156,   96,   97,   98,   99,  100,  101,
 /*  1430 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1440 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  176,
 /*  1450 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  1460 */   132,  176,  134,  135,  176,  137,  138,  139,  176,  176,
 /*  1470 */   142,  176,  144,  145,  176,  176,  176,  176,  150,  151,
 /*  1480 */    88,  176,  176,  176,  156,  176,  176,  176,   96,   97,
 /*  1490 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1500 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  1510 */   118,  119,  120,  176,  122,  123,  124,  125,  126,  127,
 /*  1520 */   128,  129,  130,  131,  132,  176,  134,  135,  176,  137,
 /*  1530 */   138,  139,  176,  176,  142,  176,  144,  145,  176,  176,
 /*  1540 */   176,   88,  150,  151,  176,  176,  176,  176,  156,   96,
 /*  1550 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1560 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1570 */   117,  118,  119,  120,  176,  122,  123,  124,  125,  126,
 /*  1580 */   127,  128,  129,  130,  131,  132,  176,  134,  135,  176,
 /*  1590 */   137,  138,  139,  176,  176,  142,  176,  144,  145,  176,
 /*  1600 */   176,  176,  176,  150,  151,   88,  176,  176,  176,  156,
 /*  1610 */   176,  176,  176,   96,   97,   98,   99,  100,  101,  102,
 /*  1620 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1630 */   113,  114,  115,  116,  117,  118,  119,  120,  176,  122,
 /*  1640 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1650 */   176,  134,  135,  176,  137,  138,  139,  176,  176,  142,
 /*  1660 */   176,  144,  145,  176,  176,  176,   88,  150,  151,  176,
 /*  1670 */   176,  176,  176,  156,   96,   97,   98,   99,  100,  101,
 /*  1680 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1690 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  176,
 /*  1700 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  1710 */   132,  176,  134,  135,  176,  137,  138,  139,  176,  176,
 /*  1720 */   142,  176,  144,  145,  176,  176,  176,  176,  150,  151,
 /*  1730 */    88,  176,  176,  176,  156,  176,  176,  176,   96,   97,
 /*  1740 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  1750 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  1760 */   118,  119,  120,  176,  122,  123,  124,  125,  126,  127,
 /*  1770 */   128,  129,  130,  131,  132,  176,  134,  135,  176,  137,
 /*  1780 */   138,  139,  176,  176,  142,  176,  144,  145,  176,  176,
 /*  1790 */   176,   88,  150,  151,  176,  176,  176,  176,  156,   96,
 /*  1800 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1810 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1820 */   117,  118,  119,  120,  176,  122,  123,  124,  125,  126,
 /*  1830 */   127,  128,  129,  130,  131,  132,  176,  134,  135,  176,
 /*  1840 */   137,  138,  139,  176,  176,  142,  176,  144,  145,  176,
 /*  1850 */   176,  176,  176,  150,  151,   88,  176,  176,  176,  156,
 /*  1860 */   176,  176,  176,   96,   97,   98,   99,  100,  101,  102,
 /*  1870 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1880 */   113,  114,  115,  116,  117,  118,  119,  120,  176,  122,
 /*  1890 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1900 */   176,  134,  135,  176,  137,  138,  139,  176,  176,  142,
 /*  1910 */   176,  144,  145,  176,  176,  176,   88,  150,  151,  176,
 /*  1920 */   176,  176,  176,  156,   96,   97,   98,   99,  100,  101,
 /*  1930 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1940 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  176,
 /*  1950 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  1960 */   132,  176,  134,  135,  176,  137,  138,  139,  176,  176,
 /*  1970 */   142,  176,  144,  145,  176,  176,  176,   87,  150,  151,
 /*  1980 */   176,  176,  176,  176,  156,  176,   96,   97,   98,   99,
 /*  1990 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  2000 */   110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  2010 */   120,  176,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  2020 */   130,  131,  132,  176,  134,  135,  176,  137,  138,  139,
 /*  2030 */   176,  176,  142,  176,  144,  145,  176,  176,   87,  176,
 /*  2040 */   150,  151,  176,  176,  176,  176,  156,   96,   97,   98,
 /*  2050 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2060 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  2070 */   119,  120,  176,  122,  123,  124,  125,  126,  127,  128,
 /*  2080 */   129,  130,  131,  132,  176,  134,  135,  176,  137,  138,
 /*  2090 */   139,  176,  176,  142,  176,  144,  145,  176,  176,  176,
 /*  2100 */   176,  150,  151,  176,  176,  176,  176,  156,  176,   96,
 /*  2110 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2120 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  2130 */   117,  118,  119,  120,  176,  122,  123,  124,  125,  126,
 /*  2140 */   127,  128,  129,  130,  131,  132,  176,  134,  135,  176,
 /*  2150 */   137,  138,  139,  176,  176,  142,  176,  144,  145,  176,
 /*  2160 */   176,  176,  176,  150,  151,  176,  176,  176,  176,  156,
 /*  2170 */   157,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2180 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2190 */   115,  116,  117,  118,  119,  120,  176,  122,  123,  124,
 /*  2200 */   125,  126,  127,  128,  129,  130,  131,  132,  176,  134,
 /*  2210 */   135,  176,  137,  138,  139,  176,  176,  142,  176,  144,
 /*  2220 */   145,  176,  176,  176,  176,  150,  151,  152,  176,  176,
 /*  2230 */   176,  156,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  2240 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  2250 */   114,  115,  116,  117,  118,  119,  120,  176,  122,  123,
 /*  2260 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  176,
 /*  2270 */   134,  135,  176,  137,  138,  139,  176,  176,  142,  176,
 /*  2280 */   144,  145,  146,  176,  176,  176,  150,  151,  176,  176,
 /*  2290 */   176,  176,  156,  176,   96,   97,   98,   99,  100,  101,
 /*  2300 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2310 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  176,
 /*  2320 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  2330 */   132,  176,  134,  135,  176,  137,  138,  139,  140,  176,
 /*  2340 */   142,  176,  144,  145,  176,  176,  176,  176,  150,  151,
 /*  2350 */   176,  176,  176,  176,  156,   96,   97,   98,   99,  100,
 /*  2360 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2370 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  2380 */   176,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  2390 */   131,  132,  176,  134,  135,  176,  137,  138,  139,  176,
 /*  2400 */   176,  142,  176,  144,  145,  176,  176,  176,  176,  150,
 /*  2410 */   151,  176,  176,  176,  176,  156,  176,   96,   97,   98,
 /*  2420 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2430 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  2440 */   119,  120,  176,  122,  123,  124,  125,  126,  127,  128,
 /*  2450 */   129,  130,  131,  132,  176,  134,  135,  176,  137,  138,
 /*  2460 */   139,  176,  176,  142,  176,  144,  145,  176,  176,  176,
 /*  2470 */   176,  150,  151,  176,  176,  176,  176,  156,   96,   97,
 /*  2480 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  2490 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  2500 */   118,  119,  120,  176,  122,  123,  124,  125,  126,  127,
 /*  2510 */   128,  129,  130,  131,  132,  176,  134,  135,  176,  137,
 /*  2520 */   138,  139,  176,  176,  142,  176,  144,  145,  176,  176,
 /*  2530 */   176,  176,  150,  151,  176,  176,  176,  176,  156,  176,
 /*  2540 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  2550 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  2560 */   116,  117,  118,  119,  120,  176,  122,  123,  124,  125,
 /*  2570 */   126,  127,  128,  129,  130,  131,  132,  176,  134,  135,
 /*  2580 */   176,  137,  138,  139,  176,  176,  142,  176,  144,  145,
 /*  2590 */   176,  176,  176,  176,  150,  151,  176,  176,  176,  176,
 /*  2600 */   156,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2610 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2620 */   115,  116,  117,  118,  119,  120,  176,  122,  123,  124,
 /*  2630 */   125,  126,  127,  128,  129,  130,  131,  132,  176,  134,
 /*  2640 */   135,  176,  137,  138,  139,  176,  176,  142,  176,  144,
 /*  2650 */   145,  176,  176,  176,  176,  150,  151,  176,  176,  176,
 /*  2660 */   176,  156,  176,   96,   97,   98,   99,  100,  101,  102,
 /*  2670 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2680 */   113,  114,  115,  116,  117,  118,  119,  120,  176,  122,
 /*  2690 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2700 */   176,  134,  135,  176,  137,  138,  139,  176,  176,  142,
 /*  2710 */   176,  144,  145,  176,  176,  176,  176,  150,  151,  176,
 /*  2720 */   176,    8,  176,  156,   96,   97,   98,   99,  100,  101,
 /*  2730 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  2740 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  176,
 /*  2750 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  2760 */   132,  176,  134,  135,  176,  137,  138,  139,   55,  176,
 /*  2770 */    57,   58,  144,  145,    8,  176,  176,  176,  150,  151,
 /*  2780 */   176,  176,  176,  176,  156,  176,   96,   97,   98,   99,
 /*  2790 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  2800 */   110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  2810 */   120,  176,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  2820 */   130,   55,  132,   57,   58,  176,  176,  137,  138,  139,
 /*  2830 */   176,  176,  176,  176,  144,  145,  176,  176,  176,  176,
 /*  2840 */   150,  151,  176,  176,  176,  176,  156,   96,   97,   98,
 /*  2850 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2860 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  2870 */   119,  120,  176,  122,  123,  124,  125,  126,  127,  128,
 /*  2880 */   129,  130,  176,  132,  176,  176,  176,  176,  137,  138,
 /*  2890 */   139,  176,  176,  176,  176,  144,  145,  176,  176,  176,
 /*  2900 */   176,  150,  151,  176,  176,  176,  176,  156,  176,   96,
 /*  2910 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2920 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  2930 */   117,  118,  119,  120,  176,  122,  123,  124,  125,  126,
 /*  2940 */   127,  176,  129,  176,  176,  176,  176,  176,  176,  176,
 /*  2950 */   137,  138,  139,  176,  176,  176,  176,  144,  145,  176,
 /*  2960 */   176,  176,  176,  150,  151,  176,  176,  176,  176,  156,
 /*  2970 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  2980 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  2990 */   116,  117,  118,  119,  120,  176,  122,  123,  124,  125,
 /*  3000 */   126,  127,  176,  129,  176,  176,  176,  176,  176,  176,
 /*  3010 */   176,  137,  138,  139,  176,  176,  176,  176,  144,  145,
 /*  3020 */   176,  176,  176,  176,  150,  151,  176,  176,  176,  176,
 /*  3030 */   156,  176,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  3040 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  3050 */   114,  115,  116,  117,  118,  119,  120,  176,  122,  123,
 /*  3060 */   124,  125,  126,  176,  176,  176,  176,  176,  176,  176,
 /*  3070 */   176,  176,  176,  137,  138,  139,  176,  176,  176,  176,
 /*  3080 */   144,  145,  176,  176,  176,  176,  150,  151,  176,  176,
 /*  3090 */   176,  176,  156,   96,   97,   98,   99,  100,  101,  102,
 /*  3100 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3110 */   113,  114,  115,  116,  117,  118,  119,  120,  176,  122,
 /*  3120 */   123,  124,  176,  126,  176,  176,  176,  176,  176,  176,
 /*  3130 */   176,  176,  176,  176,  137,  138,  139,  176,  176,  176,
 /*  3140 */   176,  144,  145,  176,  176,  176,  176,  150,  151,  176,
 /*  3150 */   176,   95,  176,  156,  176,   96,   97,   98,   99,  100,
 /*  3160 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  3170 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  3180 */   176,  122,  123,  176,  176,  176,  176,  176,  176,  176,
 /*  3190 */   176,  176,  176,  137,  138,  139,  137,  138,  139,  176,
 /*  3200 */   144,  145,  176,  144,  145,  176,  150,  151,  176,  150,
 /*  3210 */   151,    7,  156,    9,  176,  156,   12,  176,   14,  163,
 /*  3220 */    16,  176,  166,  167,  176,  176,  176,   23,   24,   25,
 /*  3230 */    26,   27,   28,   29,   30,  176,   32,   33,  176,  176,
 /*  3240 */    36,  176,  176,  176,  176,   41,   42,  176,   44,   45,
 /*  3250 */   176,   47,  176,  176,   50,  176,  176,  176,  176,  176,
 /*  3260 */    56,  176,   94,   95,  176,   61,  176,   63,  176,   65,
 /*  3270 */    66,   67,   68,   69,   70,   71,  176,  176,   74,   96,
 /*  3280 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  3290 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  3300 */   117,  118,  176,  120,  176,  137,  138,  139,  176,  176,
 /*  3310 */   176,  176,  144,  145,  176,  176,  176,  176,  150,  151,
 /*  3320 */   137,  138,  139,  176,  156,  176,  176,  144,  145,  176,
 /*  3330 */   176,  176,  176,  150,  151,  167,  176,  176,  176,  156,
 /*  3340 */   176,  176,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  3350 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  3360 */   114,  115,  116,  117,  118,  176,  120,  176,  176,  176,
 /*  3370 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  3380 */   176,  176,  176,  137,  138,  139,  176,  176,  176,  176,
 /*  3390 */   144,  145,    7,    8,  176,  176,  150,  151,  176,   14,
 /*  3400 */   176,  176,  156,  176,  176,  176,  176,  176,   23,   24,
 /*  3410 */    25,   26,   27,   28,   29,   30,  176,   32,   33,  176,
 /*  3420 */   176,   36,  176,  176,  176,  176,   41,   42,  176,   44,
 /*  3430 */    45,  176,   47,  176,  176,   50,  176,  176,  176,  176,
 /*  3440 */   176,   56,  176,  176,  176,  176,   61,  176,   63,  176,
 /*  3450 */    65,   66,   67,   68,   69,   70,   71,  176,   73,    7,
 /*  3460 */     8,    9,  176,  176,  176,  176,   14,  176,  176,  176,
 /*  3470 */   176,  176,  176,  176,  176,   23,   24,   25,   26,   27,
 /*  3480 */    28,   29,   30,  176,   32,   33,  176,  176,   36,  176,
 /*  3490 */   176,  176,  176,   41,   42,  176,   44,   45,  176,   47,
 /*  3500 */   176,  176,   50,  176,  176,  176,  176,  176,   56,  176,
 /*  3510 */   176,  176,  176,   61,  176,   63,  176,   65,   66,   67,
 /*  3520 */    68,   69,   70,   71,  176,    7,    8,    9,  176,  176,
 /*  3530 */   176,  176,   14,  176,  176,  176,  176,  176,  176,  176,
 /*  3540 */   176,   23,   24,   25,   26,   27,   28,   29,   30,  176,
 /*  3550 */    32,   33,  176,  176,   36,  176,  176,  176,  176,   41,
 /*  3560 */    42,  176,   44,   45,  176,   47,  176,  176,   50,  176,
 /*  3570 */   176,  176,  176,  176,   56,  176,  176,  176,  176,   61,
 /*  3580 */   176,   63,  176,   65,   66,   67,   68,   69,   70,   71,
 /*  3590 */   176,    7,    8,    9,  176,  176,  176,  176,   14,  176,
 /*  3600 */   176,  176,  176,  176,  176,  176,  176,   23,   24,   25,
 /*  3610 */    26,   27,   28,   29,   30,  176,   32,   33,  176,  176,
 /*  3620 */    36,  176,  176,  176,  176,   41,   42,  176,   44,   45,
 /*  3630 */   176,   47,  176,  176,   50,  176,  176,  176,  176,  176,
 /*  3640 */    56,  176,  176,  176,  176,   61,  176,   63,  176,   65,
 /*  3650 */    66,   67,   68,   69,   70,   71,  176,    7,    8,    9,
 /*  3660 */   176,  176,  176,  176,   14,  176,  176,  176,  176,  176,
 /*  3670 */   176,  176,  176,   23,   24,   25,   26,   27,   28,   29,
 /*  3680 */    30,  176,   32,   33,  176,  176,   36,  176,  176,  176,
 /*  3690 */   176,   41,   42,  176,   44,   45,  176,   47,  176,  176,
 /*  3700 */    50,  176,  176,  176,  176,  176,   56,  176,  176,  176,
 /*  3710 */   176,   61,  176,   63,  176,   65,   66,   67,   68,   69,
 /*  3720 */    70,   71,  176,    7,    8,    9,  176,  176,  176,  176,
 /*  3730 */    14,  176,  176,  176,  176,  176,  176,  176,  176,   23,
 /*  3740 */    24,   25,   26,   27,   28,   29,   30,  176,   32,   33,
 /*  3750 */   176,  176,   36,  176,  176,  176,  176,   41,   42,  176,
 /*  3760 */    44,   45,  176,   47,  176,  176,   50,  176,  176,  176,
 /*  3770 */   176,  176,   56,  176,  176,  176,  176,   61,  176,   63,
 /*  3780 */   176,   65,   66,   67,   68,   69,   70,   71,  176,    7,
 /*  3790 */     8,    9,  176,  176,  176,  176,   14,  176,  176,  176,
 /*  3800 */   176,  176,  176,  176,  176,   23,   24,   25,   26,   27,
 /*  3810 */    28,   29,   30,  176,   32,   33,  176,  176,   36,  176,
 /*  3820 */   176,  176,  176,   41,   42,  176,   44,   45,  176,   47,
 /*  3830 */   176,  176,   50,  176,  176,  176,  176,  176,   56,  176,
 /*  3840 */   176,  176,  176,   61,  176,   63,  176,   65,   66,   67,
 /*  3850 */    68,   69,   70,   71,  176,    7,    8,  176,  176,  176,
 /*  3860 */   176,  176,   14,  176,  176,  176,  176,  176,  176,  176,
 /*  3870 */   176,   23,   24,   25,   26,   27,   28,   29,   30,  176,
 /*  3880 */    32,   33,  176,  176,   36,  176,  176,  176,  176,   41,
 /*  3890 */    42,  176,   44,   45,  176,   47,  176,  176,   50,  176,
 /*  3900 */   176,  176,  176,  176,   56,  176,  176,  176,  176,   61,
 /*  3910 */   176,   63,  176,   65,   66,   67,   68,   69,   70,   71,
 /*  3920 */   176,    7,    8,  176,  176,  176,  176,  176,   14,  176,
 /*  3930 */   176,  176,  176,  176,  176,  176,  176,   23,   24,   25,
 /*  3940 */    26,   27,   28,   29,   30,  176,   32,   33,  176,  176,
 /*  3950 */    36,  176,  176,  176,  176,   41,   42,  176,   44,   45,
 /*  3960 */   176,   47,  176,  176,   50,  176,  176,  176,  176,  176,
 /*  3970 */    56,  176,  176,  176,  176,   61,  176,   63,  176,   65,
 /*  3980 */    66,   67,   68,   69,   70,   71,  176,    7,    8,  176,
 /*  3990 */   176,  176,  176,  176,   14,  176,  176,  176,  176,  176,
 /*  4000 */   176,  176,  176,   23,   24,   25,   26,   27,   28,   29,
 /*  4010 */    30,  176,   32,   33,  176,  176,   36,  176,  176,  176,
 /*  4020 */   176,   41,   42,  176,   44,   45,  176,   47,  176,  176,
 /*  4030 */    50,  176,  176,  176,  176,  176,   56,  176,  176,  176,
 /*  4040 */   176,   61,  176,   63,  176,   65,   66,   67,   68,   69,
 /*  4050 */    70,   71,  176,    7,    8,  176,  176,  176,  176,  176,
 /*  4060 */    14,  176,  176,  176,  176,  176,  176,  176,  176,   23,
 /*  4070 */    24,   25,   26,   27,   28,   29,   30,  176,   32,   33,
 /*  4080 */   176,  176,   36,  176,  176,  176,  176,   41,   42,  176,
 /*  4090 */    44,   45,  176,   47,  176,  176,   50,  176,  176,  176,
 /*  4100 */   176,  176,   56,  176,  176,  176,  176,   61,  176,   63,
 /*  4110 */   176,   65,   66,   67,   68,   69,   70,   71,  176,    7,
 /*  4120 */     8,  176,  176,  176,  176,  176,   14,  176,  176,  176,
 /*  4130 */   176,  176,  176,  176,  176,   23,   24,   25,   26,   27,
 /*  4140 */    28,   29,   30,  176,   32,   33,  176,  176,   36,  176,
 /*  4150 */   176,  176,  176,   41,   42,  176,   44,   45,  176,   47,
 /*  4160 */   176,  176,   50,  176,  176,  176,  176,  176,   56,  176,
 /*  4170 */   176,  176,  176,   61,  176,   63,  176,   65,   66,   67,
 /*  4180 */    68,   69,   70,   71,  176,    7,  176,    9,  176,  176,
 /*  4190 */   176,  176,   14,  176,  176,  176,  176,  176,  176,  176,
 /*  4200 */   176,   23,   24,   25,   26,   27,   28,   29,   30,  176,
 /*  4210 */    32,   33,  176,  176,   36,  176,  176,  176,  176,   41,
 /*  4220 */    42,  176,   44,   45,  176,   47,  176,  176,   50,  176,
 /*  4230 */   176,  176,  176,  176,   56,  176,  176,  176,  176,   61,
 /*  4240 */   176,   63,  176,   65,   66,   67,   68,   69,   70,   71,
 /*  4250 */   176,    7,    8,  176,  176,  176,  176,  176,   14,  176,
 /*  4260 */   176,  176,  176,  176,  176,  176,  176,   23,   24,   25,
 /*  4270 */    26,   27,   28,   29,   30,  176,   32,   33,  176,  176,
 /*  4280 */    36,  176,  176,  176,  176,   41,   42,  176,   44,   45,
 /*  4290 */   176,   47,  176,  176,   50,  176,  176,  176,  176,  176,
 /*  4300 */    56,  176,  176,  176,  176,   61,  176,   63,  176,   65,
 /*  4310 */    66,   67,   68,   69,   70,   71,  176,    7,  176,  176,
 /*  4320 */   176,  176,  176,  176,   14,  176,  176,  176,  176,  176,
 /*  4330 */   176,  176,  176,   23,   24,   25,   26,   27,   28,   29,
 /*  4340 */    30,  176,   32,   33,  176,  176,   36,  176,  176,  176,
 /*  4350 */   176,   41,   42,  176,   44,   45,  176,   47,  176,  176,
 /*  4360 */    50,  176,  176,  176,  176,  176,   56,   96,  176,   98,
 /*  4370 */    99,   61,  176,   63,  176,   65,   66,   67,   68,   69,
 /*  4380 */    70,   71,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  4390 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  4400 */   114,  115,  176,  117,  176,  176,  176,  176,  137,  138,
 /*  4410 */   139,  176,  176,  176,  176,  144,  145,  176,  176,  176,
 /*  4420 */   176,  150,  151,  137,  138,  139,  176,  156,  176,  176,
 /*  4430 */   144,  145,  176,   95,  176,  176,  150,  151,  176,  176,
 /*  4440 */   176,  176,  156,   96,   97,   98,   99,  100,  101,  102,
 /*  4450 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  4460 */   113,  114,  115,  176,  117,  176,  176,  176,  176,  176,
 /*  4470 */   176,  176,  176,  176,  176,  137,  138,  139,  176,  176,
 /*  4480 */   176,  176,  144,  145,  137,  138,  139,  176,  150,  151,
 /*  4490 */   176,  144,  145,    7,  156,  176,  176,  150,  151,  176,
 /*  4500 */    14,  176,  176,  156,  166,  167,  176,  176,  176,   23,
 /*  4510 */    24,   25,   26,   27,   28,   29,   30,  176,   32,   33,
 /*  4520 */   176,  176,   36,  176,  176,  176,  176,  176,   42,  176,
 /*  4530 */    44,   45,  176,   47,  176,  176,   50,  176,  176,  176,
 /*  4540 */   176,    7,   56,  176,  176,  176,  176,   61,   14,   63,
 /*  4550 */   176,   65,   66,   67,   68,   69,   70,   23,   24,   25,
 /*  4560 */    26,   27,   28,   29,   30,  176,   32,  176,  176,  176,
 /*  4570 */    36,  176,  176,  176,  176,  176,   42,  176,   44,   45,
 /*  4580 */   176,   47,  176,  176,   50,  176,  176,  176,  176,  176,
 /*  4590 */    56,  176,  176,  176,  176,   61,  176,   63,  176,   65,
 /*  4600 */    66,   67,   68,   69,   70,  176,   96,   97,   98,   99,
 /*  4610 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  4620 */   110,  111,  112,  176,  114,  176,  176,   96,   97,   98,
 /*  4630 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  4640 */   109,  110,  111,  112,  176,  114,  176,  137,  138,  139,
 /*  4650 */   176,  176,  176,  176,  144,  145,  176,  176,  176,  176,
 /*  4660 */   150,  151,  176,  176,  176,  176,  156,  176,  137,  138,
 /*  4670 */   139,  176,  176,  176,  176,  144,  145,    7,  176,  176,
 /*  4680 */   176,  150,  151,  176,   14,  176,  176,  156,  176,  176,
 /*  4690 */   176,  176,  176,   23,   24,   25,   26,   27,   28,   29,
 /*  4700 */    30,  176,  176,  176,  176,  176,   36,  176,  176,  176,
 /*  4710 */   176,  176,   42,  176,   44,   45,  176,   47,  176,  176,
 /*  4720 */    50,  176,  176,  176,  176,    7,   56,  176,  176,  176,
 /*  4730 */   176,   61,   14,   63,  176,   65,   66,   67,   68,   69,
 /*  4740 */    70,   23,   24,   25,   26,   27,   28,   29,   30,  176,
 /*  4750 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  4760 */    42,  176,   44,   45,  176,   47,  176,  176,   50,  176,
 /*  4770 */   176,  176,  176,    7,   56,  176,  176,  176,  176,   61,
 /*  4780 */    14,   63,  176,   65,   66,   67,   68,   69,   70,   23,
 /*  4790 */    24,   25,   26,   27,   28,   29,  176,  176,  176,  176,
 /*  4800 */   176,  176,  176,  176,  176,  176,  176,  176,   42,  176,
 /*  4810 */    44,   45,  176,   47,  176,  176,   50,  176,  176,  176,
 /*  4820 */   176,  176,   56,  176,  176,  176,  176,   61,  176,   63,
 /*  4830 */   176,   65,   66,   67,   68,   69,   70,   96,   97,   98,
 /*  4840 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  4850 */   109,  176,  111,  176,  176,  176,  176,   96,   97,   98,
 /*  4860 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  4870 */   109,  176,  111,  176,  176,  176,  176,  176,  137,  138,
 /*  4880 */   139,  176,  176,  176,  176,  144,  145,  176,  176,  176,
 /*  4890 */   176,  150,  151,  176,  176,  176,  176,  156,  137,  138,
 /*  4900 */   139,  176,  176,  176,  176,  144,  145,    7,  176,  176,
 /*  4910 */   176,  150,  151,  176,   14,  176,  176,  156,  176,  176,
 /*  4920 */   176,  176,  176,   23,   24,   25,   26,   27,   28,  176,
 /*  4930 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  4940 */   176,  176,   42,  176,   44,   45,  176,   47,  176,  176,
 /*  4950 */    50,  176,  176,  176,  176,    7,   56,  176,  176,  176,
 /*  4960 */   176,   61,   14,   63,  176,   65,   66,   67,   68,   69,
 /*  4970 */    70,   23,   24,   25,   26,   27,  176,  176,  176,  176,
 /*  4980 */   176,  176,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  4990 */    42,  105,   44,   45,  176,   47,  176,  176,   50,  176,
 /*  5000 */   176,  176,  176,    7,   56,  176,  176,  176,  176,   61,
 /*  5010 */    14,   63,  176,   65,   66,   67,   68,   69,   70,   23,
 /*  5020 */    24,   25,   26,  137,  138,  139,  176,  176,  176,  176,
 /*  5030 */   144,  145,  176,  176,  176,  176,  150,  151,   42,  176,
 /*  5040 */    44,   45,  156,   47,  176,  176,   50,  176,  176,  176,
 /*  5050 */   176,  176,   56,  176,  176,  176,  176,   61,  176,   63,
 /*  5060 */   176,   65,   66,   67,   68,   69,   70,   96,   97,   98,
 /*  5070 */    99,  100,  101,  102,  103,  104,  105,  106,  176,  108,
 /*  5080 */   176,  176,  176,  176,  176,  176,  176,   96,   97,   98,
 /*  5090 */    99,  100,  101,  102,  103,  104,  105,  106,  176,  108,
 /*  5100 */   176,  176,  176,  176,  176,  176,  176,  176,  137,  138,
 /*  5110 */   139,  176,  176,  176,  176,  144,  145,  176,  176,  176,
 /*  5120 */   176,  150,  151,  176,  176,  176,  176,  156,  137,  138,
 /*  5130 */   139,  176,  176,  176,  176,  144,  145,    7,  176,  176,
 /*  5140 */   176,  150,  151,  176,   14,  176,  176,  156,  176,  176,
 /*  5150 */   176,  176,  176,   23,   24,   25,  176,  176,  176,  176,
 /*  5160 */   176,  176,  176,  176,   96,   97,   98,   99,  100,  101,
 /*  5170 */   102,  103,   42,  105,   44,   45,  176,   47,  176,  176,
 /*  5180 */    50,  176,  176,  176,  176,    7,   56,  176,  176,  176,
 /*  5190 */   176,   61,   14,   63,  176,   65,   66,   67,   68,   69,
 /*  5200 */    70,   23,   24,  176,  176,  137,  138,  139,  176,  176,
 /*  5210 */   176,  176,  144,  145,    7,  176,  176,  176,  150,  151,
 /*  5220 */    42,   14,   44,   45,  156,   47,  176,  176,   50,  176,
 /*  5230 */    23,  176,  176,  176,   56,  176,  176,  176,  176,   61,
 /*  5240 */   176,   63,  176,   65,   66,   67,   68,   69,   70,   42,
 /*  5250 */   176,   44,   45,  176,   47,    7,  176,   50,  176,  176,
 /*  5260 */   176,  176,   14,   56,  176,  176,  176,  176,   61,   21,
 /*  5270 */    63,  176,   65,   66,   67,   68,   69,   70,  176,  176,
 /*  5280 */   176,  176,   96,   97,   98,   99,  100,  101,  102,  176,
 /*  5290 */    42,  176,   44,   45,  176,   47,  176,  176,   50,  176,
 /*  5300 */   176,  176,  176,    7,   56,    9,  176,  176,  176,   61,
 /*  5310 */    14,   63,  176,   65,   66,   67,  176,  176,   22,   71,
 /*  5320 */   176,  176,  176,  137,  138,  139,  176,  176,  176,  176,
 /*  5330 */   144,  145,  176,  176,  176,  176,  150,  151,   42,  176,
 /*  5340 */    44,   45,  156,   47,  176,  176,   50,  176,  176,    7,
 /*  5350 */     8,  176,   56,  176,  176,  176,  176,   61,  176,   63,
 /*  5360 */   176,   65,   66,   67,   22,   23,   24,   25,   26,   27,
 /*  5370 */    28,   29,   30,   31,   32,   33,   34,    7,    8,  176,
 /*  5380 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  5390 */   176,  176,   22,   23,   24,   25,   26,   27,   28,   29,
 /*  5400 */    30,   31,   32,   33,   34,    7,    8,  176,  176,  176,
 /*  5410 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  5420 */    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
 /*  5430 */    32,   33,   34,    7,    8,   96,   97,   98,   99,  100,
 /*  5440 */   176,  102,  176,  176,  176,  176,  176,  176,   22,   23,
 /*  5450 */    24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
 /*  5460 */    34,    7,  176,    9,  176,  176,  176,  176,   14,  176,
 /*  5470 */   176,  176,  176,  176,  176,  176,  137,  138,  139,  176,
 /*  5480 */   176,  176,  176,  144,  145,  176,  176,  176,  176,  150,
 /*  5490 */   151,  176,  176,  176,  176,  156,   42,  176,   44,   45,
 /*  5500 */   176,   47,  176,  176,   50,  176,    7,  176,  176,  176,
 /*  5510 */    56,  176,  176,   14,  176,   61,  176,   63,  176,   65,
 /*  5520 */    66,   67,  176,  176,  176,  176,   96,  176,   98,   99,
 /*  5530 */   176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
 /*  5540 */   176,   42,  176,   44,   45,  176,   47,  176,  176,   50,
 /*  5550 */   176,  176,  176,  176,  176,   56,  176,  176,  176,  176,
 /*  5560 */    61,  176,   63,  176,   65,   66,   67,  137,  138,  139,
 /*  5570 */   176,  176,  176,  176,  144,  145,  176,  176,  176,  176,
 /*  5580 */   150,  151,  176,  176,  176,  176,  156,   75,   75,   75,
 /*  5590 */    75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
 /*  5600 */    75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
 /*  5610 */    75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
 /*  5620 */    75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
 /*  5630 */    75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
 /*  5640 */    75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
 /*  5650 */    75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
 /*  5660 */    75,   75,
};
#define YY_SHIFT_COUNT    (194)
#define YY_SHIFT_MIN      (0)
#define YY_SHIFT_MAX      (5499)
static const unsigned short int yy_shift_ofst[] = {
 /*     0 */  5587, 3204, 3204, 3204, 3385, 3204, 3452, 3452, 3848, 4310,
 /*    10 */  4310, 3914, 3980, 4046, 4112, 4310, 4310, 3518, 3584, 3650,
 /*    20 */  3716, 3782, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4244,
 /*    30 */  4310, 4310, 4310, 4310, 4310, 4310, 4310, 4310, 4310, 4310,
 /*    40 */  4310, 4486, 4486, 4486, 4534, 4534, 4670, 4670, 4718, 4718,
 /*    50 */  4718, 4766, 4766, 4900, 4900, 4948, 4948, 4996, 4996, 5130,
 /*    60 */  5130, 5178, 5178, 5499, 5207, 5207, 5499, 5499, 5248, 5296,
 /*    70 */  5499, 5499, 5499, 5454, 5499, 5499,   82,  179, 5342,   23,
 /*    80 */  5370, 5398, 5426,  274,   23,   58,   50,  109,  120,  134,
 /*    90 */   349,  428,  436,  440,   40,  352,   85,  461,  346,  247,
 /*   100 */   147,  420,  513,  441,  543,  596,  408,  408,  438,   69,
 /*   110 */   611,  219,  521,  438,  438,  454,  509,  509,  506,  522,
 /*   120 */   526,  529,  580,  598,  605,  509,  593,  633,  615,  619,
 /*   130 */   623,  630,  509,  669,  509,  673,  454, 5587, 5587, 5587,
 /*   140 */  5587, 5587, 5587,  264,  501, 2713, 2766,  599,  380,  464,
 /*   150 */   553,  604,  610,  710,  711,  712,  680,  714,  715,  741,
 /*   160 */   753,  756,  761,  763,  766,  767,  768,  772,  774,  725,
 /*   170 */   762,  769,  802,  749,  817,  822,  824,  828,  829,  833,
 /*   180 */   819,  832,  765,  771,  836,  838,  839,  827,  841,  843,
 /*   190 */   846,  847,  873,  883,  892,
};
#define YY_REDUCE_COUNT (142)
#define YY_REDUCE_MIN   (-142)
#define YY_REDUCE_MAX   (5430)
static const short yy_reduce_ofst[] = {
 /*     0 */   -58,  -75,   22,  119,  216,  295,  388,  471,  560,  628,
 /*    10 */   689,  760,  821,  886,  947, 1012, 1073, 1142, 1203, 1267,
 /*    20 */  1328, 1392, 1453, 1517, 1578, 1642, 1703, 1767, 1828, 1890,
 /*    30 */  1951, 2013, 2075, 2136, 2198, 2259, 2321, 2382, 2444, 2505,
 /*    40 */  2567, 2628, 2690, 2751, 2813, 2874, 2936, 2997, 3059, 3183,
 /*    50 */  3246, 4286, 4347, 4510, 4531, 4741, 4761, 4971, 4991, 4886,
 /*    60 */  5068, 5186, 5339, 3056, 4271, 5430, 3168, 4338,  128,  -65,
 /*    70 */    32,  315,  398, -136,  486,  317,  -71,  217,  223,   -7,
 /*    80 */   193,  193,  193,  -68,   90,   13,   52, -142,   31,  138,
 /*    90 */   290,  363,  466,  449,  -29,    3,  -64,   37,   78,   99,
 /*   100 */   114,  125,  139,  177,  184,  196,  108,  137,  256,  277,
 /*   110 */   293,  206,  298,  268,  350,  394,  347,  347,  414,  426,
 /*   120 */   439,  468,  505,  511,  518,  347,  479,  562,  532,  538,
 /*   130 */   548,  578,  347,  600,  347,  612,  620,  552,  554,  632,
 /*   140 */   557,  564,  639,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   712,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*    10 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*    20 */   708,  708,  708,  960,  708,  708,  708,  708,  708,  708,
 /*    30 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*    40 */   708,  874,  708,  708,  708,  708,  708,  708,  854,  708,
 /*    50 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*    60 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*    70 */   809,  708,  708,  708,  814,  708,  708,  708,  708,  756,
 /*    80 */   708,  708,  708,  756,  756,  708,  708,  708,  708,  708,
 /*    90 */   708,  708,  708,  708,  958,  708,  732,  732,  732,  708,
 /*   100 */   708,  708,  708,  708,  708,  708,  708,  708,  735,  708,
 /*   110 */   708,  708,  708,  735,  735,  758,  934,  947,  872,  873,
 /*   120 */   869,  857,  852,  853,  849,  933,  708,  708,  844,  839,
 /*   130 */   834,  829,  924,  817,  923,  819,  758,  893,  905,  708,
 /*   140 */   905,  893,  708,  708,  708,  708,  708,  708,  708,  708,
 /*   150 */   708,  708,  708,  708,  708,  708,  807,  708,  708,  708,
 /*   160 */   708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
 /*   170 */   708,  708,  708,  964,  708,  708,  708,  708,  708,  708,
 /*   180 */   708,  708,  708,  708,  708,  708,  708,  741,  708,  708,
 /*   190 */   708,  708,  708,  708,  708,
};
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.  
** If a construct like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  yyStackEntry *yytos;          /* Pointer to top element of the stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyhwm;                    /* High-water mark of the stack */
#endif
#ifndef YYNOERRORRECOVERY
  int yyerrcnt;                 /* Shifts left before out of the error */
#endif
  ParseARG_SDECL                /* A place to hold %extra_argument */
  ParseCTX_SDECL                /* A place to hold %extra_context */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
  yyStackEntry yystk0;          /* First stack entry */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
  yyStackEntry *yystackEnd;            /* Last entry in the stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
#include <assert.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#if defined(YYCOVERAGE) || !defined(NDEBUG)
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  /*    0 */ "$",
  /*    1 */ "WS",
  /*    2 */ "COMMENT",
  /*    3 */ "P_BOPEN",
  /*    4 */ "P_BCLOSE",
  /*    5 */ "P_SOPEN",
  /*    6 */ "P_SCLOSE",
  /*    7 */ "ID",
  /*    8 */ "NL",
  /*    9 */ "INDENT",
  /*   10 */ "DEDENT",
  /*   11 */ "KW_PACKAGE",
  /*   12 */ "KW_FROM",
  /*   13 */ "KW_IMPORT",
  /*   14 */ "P_HOLE",
  /*   15 */ "KW_EXPORT",
  /*   16 */ "KW_DEF",
  /*   17 */ "KW_TYPE",
  /*   18 */ "KW_TOPIC",
  /*   19 */ "KW_UNARY",
  /*   20 */ "KW_BINARY",
  /*   21 */ "P_EQUALS",
  /*   22 */ "OP_DOT",
  /*   23 */ "OP_QUANT",
  /*   24 */ "OP_EXP",
  /*   25 */ "OP_MULDIV",
  /*   26 */ "OP_ADDSUB",
  /*   27 */ "OP_COMPARE",
  /*   28 */ "OP_INEQUAL",
  /*   29 */ "OP_AND",
  /*   30 */ "OP_OR",
  /*   31 */ "OP_DOLLAR",
  /*   32 */ "OP_LRARROW",
  /*   33 */ "OP_EQARROW",
  /*   34 */ "OP_COMMA",
  /*   35 */ "KW_GLOBAL",
  /*   36 */ "P_COLON",
  /*   37 */ "KW_PUBLISH",
  /*   38 */ "KW_DATA",
  /*   39 */ "KW_TUPLE",
  /*   40 */ "KW_TARGET",
  /*   41 */ "P_BSLASH",
  /*   42 */ "P_POPEN",
  /*   43 */ "P_PCLOSE",
  /*   44 */ "STR_RAW",
  /*   45 */ "STR_SINGLE",
  /*   46 */ "STR_MID",
  /*   47 */ "STR_OPEN",
  /*   48 */ "STR_CLOSE",
  /*   49 */ "MSTR_CONTINUE",
  /*   50 */ "MSTR_BEGIN",
  /*   51 */ "MSTR_END",
  /*   52 */ "MSTR_PAUSE",
  /*   53 */ "MSTR_MID",
  /*   54 */ "MSTR_RESUME",
  /*   55 */ "LSTR_CONTINUE",
  /*   56 */ "LSTR_BEGIN",
  /*   57 */ "LSTR_END",
  /*   58 */ "LSTR_PAUSE",
  /*   59 */ "LSTR_MID",
  /*   60 */ "LSTR_RESUME",
  /*   61 */ "REG_SINGLE",
  /*   62 */ "REG_MID",
  /*   63 */ "REG_OPEN",
  /*   64 */ "REG_CLOSE",
  /*   65 */ "DOUBLE",
  /*   66 */ "INTEGER",
  /*   67 */ "KW_HERE",
  /*   68 */ "KW_SUBSCRIBE",
  /*   69 */ "KW_PRIM",
  /*   70 */ "KW_MATCH",
  /*   71 */ "KW_IF",
  /*   72 */ "KW_THEN",
  /*   73 */ "KW_ELSE",
  /*   74 */ "KW_REQUIRE",
  /*   75 */ "error",
  /*   76 */ "start",
  /*   77 */ "top",
  /*   78 */ "topdef",
  /*   79 */ "id",
  /*   80 */ "kind",
  /*   81 */ "arity",
  /*   82 */ "idopeqs",
  /*   83 */ "idopeq",
  /*   84 */ "idop",
  /*   85 */ "global",
  /*   86 */ "export",
  /*   87 */ "type",
  /*   88 */ "block_opt",
  /*   89 */ "data_elts",
  /*   90 */ "tuple_elts",
  /*   91 */ "tuple_elt",
  /*   92 */ "pattern",
  /*   93 */ "target_pattern",
  /*   94 */ "target_args",
  /*   95 */ "pattern_terms",
  /*   96 */ "expression_op_quant",
  /*   97 */ "expression_binary_quant",
  /*   98 */ "expression_unary_quant",
  /*   99 */ "expression_binary_app",
  /*  100 */ "expression_op_exp",
  /*  101 */ "expression_binary_exp",
  /*  102 */ "expression_unary_exp",
  /*  103 */ "expression_op_muldiv",
  /*  104 */ "expression_binary_muldiv",
  /*  105 */ "expression_unary_muldiv",
  /*  106 */ "expression_op_addsub",
  /*  107 */ "expression_binary_addsub",
  /*  108 */ "expression_unary_addsub",
  /*  109 */ "expression_op_compare",
  /*  110 */ "expression_binary_compare",
  /*  111 */ "expression_unary_compare",
  /*  112 */ "expression_op_inequal",
  /*  113 */ "expression_binary_inequal",
  /*  114 */ "expression_unary_inequal",
  /*  115 */ "expression_op_and",
  /*  116 */ "expression_binary_and",
  /*  117 */ "expression_unary_and",
  /*  118 */ "expression_op_or",
  /*  119 */ "expression_binary_or",
  /*  120 */ "expression_unary_or",
  /*  121 */ "expression_op_dollar",
  /*  122 */ "expression_binary_dollar",
  /*  123 */ "expression_unary_dollar",
  /*  124 */ "expression_op_colon",
  /*  125 */ "expression_binary_colon",
  /*  126 */ "expression_unary_colon",
  /*  127 */ "expression_op_lrarrow",
  /*  128 */ "expression_binary_lrarrow",
  /*  129 */ "expression_unary_lrarrow",
  /*  130 */ "expression_op_eqarrow",
  /*  131 */ "expression_binary_eqarrow",
  /*  132 */ "expression_unary_eqarrow",
  /*  133 */ "expression_op_comma",
  /*  134 */ "expression_binary_comma",
  /*  135 */ "expression_unary_comma",
  /*  136 */ "op_dot",
  /*  137 */ "expression_term",
  /*  138 */ "expression_nodot",
  /*  139 */ "str_open",
  /*  140 */ "interpolated_string",
  /*  141 */ "str_close",
  /*  142 */ "expression",
  /*  143 */ "str_mid",
  /*  144 */ "mstr_single",
  /*  145 */ "mstr_open",
  /*  146 */ "interpolated_mstring",
  /*  147 */ "mstr_close",
  /*  148 */ "mstr_mid",
  /*  149 */ "mstr_cont",
  /*  150 */ "lstr_single",
  /*  151 */ "lstr_open",
  /*  152 */ "interpolated_lstring",
  /*  153 */ "lstr_close",
  /*  154 */ "lstr_mid",
  /*  155 */ "lstr_cont",
  /*  156 */ "reg_open",
  /*  157 */ "interpolated_regexp",
  /*  158 */ "reg_close",
  /*  159 */ "reg_mid",
  /*  160 */ "prim_literal",
  /*  161 */ "match1_cases",
  /*  162 */ "match_terms",
  /*  163 */ "matchx_cases",
  /*  164 */ "match1_case",
  /*  165 */ "guard",
  /*  166 */ "matchx_case",
  /*  167 */ "pattern_term",
  /*  168 */ "block",
  /*  169 */ "body",
  /*  170 */ "blockdefs",
  /*  171 */ "reqbad",
  /*  172 */ "reqbody",
  /*  173 */ "reqelse",
  /*  174 */ "reqelsebody",
  /*  175 */ "blockdef",
};
#endif /* defined(YYCOVERAGE) || !defined(NDEBUG) */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "start ::= top",
 /*   1 */ "top ::=",
 /*   2 */ "top ::= top topdef",
 /*   3 */ "id ::= ID",
 /*   4 */ "topdef ::= error NL",
 /*   5 */ "topdef ::= INDENT error DEDENT",
 /*   6 */ "topdef ::= KW_PACKAGE NL",
 /*   7 */ "topdef ::= KW_PACKAGE error NL",
 /*   8 */ "topdef ::= KW_PACKAGE id NL",
 /*   9 */ "topdef ::= KW_FROM NL",
 /*  10 */ "topdef ::= KW_FROM error NL",
 /*  11 */ "topdef ::= KW_FROM id NL",
 /*  12 */ "topdef ::= KW_FROM id error NL",
 /*  13 */ "topdef ::= KW_FROM id KW_IMPORT P_HOLE NL",
 /*  14 */ "topdef ::= KW_FROM id KW_IMPORT kind arity NL",
 /*  15 */ "topdef ::= KW_FROM id KW_IMPORT kind arity idopeqs NL",
 /*  16 */ "topdef ::= KW_FROM id KW_EXPORT kind arity NL",
 /*  17 */ "topdef ::= KW_FROM id KW_EXPORT kind arity idopeqs NL",
 /*  18 */ "kind ::= KW_DEF",
 /*  19 */ "kind ::= KW_TYPE",
 /*  20 */ "kind ::= KW_TOPIC",
 /*  21 */ "kind ::=",
 /*  22 */ "arity ::= KW_UNARY",
 /*  23 */ "arity ::= KW_BINARY",
 /*  24 */ "arity ::=",
 /*  25 */ "idopeqs ::= error",
 /*  26 */ "idopeqs ::= idopeqs error",
 /*  27 */ "idopeqs ::= idopeqs idopeq",
 /*  28 */ "idopeqs ::= idopeq",
 /*  29 */ "idopeq ::= idop P_EQUALS idop",
 /*  30 */ "idopeq ::= idop",
 /*  31 */ "idop ::= ID",
 /*  32 */ "idop ::= OP_DOT",
 /*  33 */ "idop ::= OP_QUANT",
 /*  34 */ "idop ::= OP_EXP",
 /*  35 */ "idop ::= OP_MULDIV",
 /*  36 */ "idop ::= OP_ADDSUB",
 /*  37 */ "idop ::= OP_COMPARE",
 /*  38 */ "idop ::= OP_INEQUAL",
 /*  39 */ "idop ::= OP_AND",
 /*  40 */ "idop ::= OP_OR",
 /*  41 */ "idop ::= OP_DOLLAR",
 /*  42 */ "idop ::= OP_LRARROW",
 /*  43 */ "idop ::= OP_EQARROW",
 /*  44 */ "idop ::= OP_COMMA",
 /*  45 */ "global ::=",
 /*  46 */ "global ::= KW_GLOBAL",
 /*  47 */ "export ::=",
 /*  48 */ "export ::= KW_EXPORT",
 /*  49 */ "topdef ::= global export KW_TOPIC NL",
 /*  50 */ "topdef ::= global export KW_TOPIC error NL",
 /*  51 */ "topdef ::= global export KW_TOPIC id NL",
 /*  52 */ "topdef ::= global export KW_TOPIC id error NL",
 /*  53 */ "topdef ::= global export KW_TOPIC id P_COLON NL",
 /*  54 */ "topdef ::= global export KW_TOPIC id P_COLON type NL",
 /*  55 */ "topdef ::= KW_PUBLISH NL",
 /*  56 */ "topdef ::= KW_PUBLISH error NL",
 /*  57 */ "topdef ::= KW_PUBLISH id NL",
 /*  58 */ "topdef ::= KW_PUBLISH id error NL",
 /*  59 */ "topdef ::= KW_PUBLISH id P_EQUALS NL",
 /*  60 */ "topdef ::= KW_PUBLISH id P_EQUALS block_opt NL",
 /*  61 */ "topdef ::= global export KW_DATA NL",
 /*  62 */ "topdef ::= global export KW_DATA error NL",
 /*  63 */ "topdef ::= global export KW_DATA type NL",
 /*  64 */ "topdef ::= global export KW_DATA type error NL",
 /*  65 */ "topdef ::= global export KW_DATA type P_EQUALS NL",
 /*  66 */ "topdef ::= global export KW_DATA type P_EQUALS type NL",
 /*  67 */ "topdef ::= global export KW_DATA type P_EQUALS INDENT data_elts DEDENT",
 /*  68 */ "data_elts ::= error",
 /*  69 */ "data_elts ::= type",
 /*  70 */ "data_elts ::= data_elts NL error",
 /*  71 */ "data_elts ::= data_elts NL type",
 /*  72 */ "topdef ::= global export KW_TUPLE NL",
 /*  73 */ "topdef ::= global export KW_TUPLE error NL",
 /*  74 */ "topdef ::= global export KW_TUPLE type NL",
 /*  75 */ "topdef ::= global export KW_TUPLE type error NL",
 /*  76 */ "topdef ::= global export KW_TUPLE type P_EQUALS NL",
 /*  77 */ "topdef ::= global export KW_TUPLE type P_EQUALS error NL",
 /*  78 */ "topdef ::= global export KW_TUPLE type P_EQUALS INDENT tuple_elts DEDENT",
 /*  79 */ "tuple_elts ::= error",
 /*  80 */ "tuple_elts ::= tuple_elt",
 /*  81 */ "tuple_elts ::= tuple_elts NL error",
 /*  82 */ "tuple_elts ::= tuple_elts NL tuple_elt",
 /*  83 */ "tuple_elt ::= global export type",
 /*  84 */ "topdef ::= global export KW_DEF NL",
 /*  85 */ "topdef ::= global export KW_DEF error NL",
 /*  86 */ "topdef ::= global export KW_DEF pattern NL",
 /*  87 */ "topdef ::= global export KW_DEF pattern error NL",
 /*  88 */ "topdef ::= global export KW_DEF pattern P_EQUALS NL",
 /*  89 */ "topdef ::= global export KW_DEF pattern P_EQUALS block_opt NL",
 /*  90 */ "topdef ::= global export KW_TARGET NL",
 /*  91 */ "topdef ::= global export KW_TARGET error NL",
 /*  92 */ "topdef ::= global export KW_TARGET target_pattern NL",
 /*  93 */ "topdef ::= global export KW_TARGET target_pattern error NL",
 /*  94 */ "topdef ::= global export KW_TARGET target_pattern P_EQUALS NL",
 /*  95 */ "topdef ::= global export KW_TARGET target_pattern P_EQUALS block_opt NL",
 /*  96 */ "target_pattern ::= pattern",
 /*  97 */ "target_pattern ::= pattern P_BSLASH target_args",
 /*  98 */ "target_args ::= pattern_terms",
 /*  99 */ "expression_op_quant ::= OP_QUANT",
 /* 100 */ "expression_binary_quant ::= expression_binary_quant expression_op_quant expression_unary_quant",
 /* 101 */ "expression_binary_quant ::= expression_unary_quant",
 /* 102 */ "expression_unary_quant ::= expression_op_quant expression_unary_quant",
 /* 103 */ "expression_unary_quant ::= expression_binary_app",
 /* 104 */ "expression_op_exp ::= OP_EXP",
 /* 105 */ "expression_binary_exp ::= expression_unary_exp expression_op_exp expression_binary_exp",
 /* 106 */ "expression_binary_exp ::= expression_unary_exp",
 /* 107 */ "expression_unary_exp ::= expression_op_exp expression_unary_exp",
 /* 108 */ "expression_unary_exp ::= expression_binary_quant",
 /* 109 */ "expression_op_muldiv ::= OP_MULDIV",
 /* 110 */ "expression_binary_muldiv ::= expression_binary_muldiv expression_op_muldiv expression_unary_muldiv",
 /* 111 */ "expression_binary_muldiv ::= expression_unary_muldiv",
 /* 112 */ "expression_unary_muldiv ::= expression_op_muldiv expression_unary_muldiv",
 /* 113 */ "expression_unary_muldiv ::= expression_binary_exp",
 /* 114 */ "expression_op_addsub ::= OP_ADDSUB",
 /* 115 */ "expression_binary_addsub ::= expression_binary_addsub expression_op_addsub expression_unary_addsub",
 /* 116 */ "expression_binary_addsub ::= expression_unary_addsub",
 /* 117 */ "expression_unary_addsub ::= expression_op_addsub expression_unary_addsub",
 /* 118 */ "expression_unary_addsub ::= expression_binary_muldiv",
 /* 119 */ "expression_op_compare ::= OP_COMPARE",
 /* 120 */ "expression_binary_compare ::= expression_binary_compare expression_op_compare expression_unary_compare",
 /* 121 */ "expression_binary_compare ::= expression_unary_compare",
 /* 122 */ "expression_unary_compare ::= expression_op_compare expression_unary_compare",
 /* 123 */ "expression_unary_compare ::= expression_binary_addsub",
 /* 124 */ "expression_op_inequal ::= OP_INEQUAL",
 /* 125 */ "expression_binary_inequal ::= expression_binary_inequal expression_op_inequal expression_unary_inequal",
 /* 126 */ "expression_binary_inequal ::= expression_unary_inequal",
 /* 127 */ "expression_unary_inequal ::= expression_op_inequal expression_unary_inequal",
 /* 128 */ "expression_unary_inequal ::= expression_binary_compare",
 /* 129 */ "expression_op_and ::= OP_AND",
 /* 130 */ "expression_binary_and ::= expression_binary_and expression_op_and expression_unary_and",
 /* 131 */ "expression_binary_and ::= expression_unary_and",
 /* 132 */ "expression_unary_and ::= expression_op_and expression_unary_and",
 /* 133 */ "expression_unary_and ::= expression_binary_inequal",
 /* 134 */ "expression_op_or ::= OP_OR",
 /* 135 */ "expression_binary_or ::= expression_binary_or expression_op_or expression_unary_or",
 /* 136 */ "expression_binary_or ::= expression_unary_or",
 /* 137 */ "expression_unary_or ::= expression_op_or expression_unary_or",
 /* 138 */ "expression_unary_or ::= expression_binary_and",
 /* 139 */ "expression_op_dollar ::= OP_DOLLAR",
 /* 140 */ "expression_binary_dollar ::= expression_unary_dollar expression_op_dollar expression_binary_dollar",
 /* 141 */ "expression_binary_dollar ::= expression_unary_dollar",
 /* 142 */ "expression_unary_dollar ::= expression_binary_or",
 /* 143 */ "expression_unary_dollar ::= expression_unary_dollar expression_op_dollar",
 /* 144 */ "expression_op_colon ::= P_COLON",
 /* 145 */ "expression_binary_colon ::= expression_unary_colon expression_op_colon expression_binary_colon",
 /* 146 */ "expression_binary_colon ::= expression_unary_colon",
 /* 147 */ "expression_unary_colon ::= expression_op_colon expression_unary_colon",
 /* 148 */ "expression_unary_colon ::= expression_binary_dollar",
 /* 149 */ "expression_op_lrarrow ::= OP_LRARROW",
 /* 150 */ "expression_binary_lrarrow ::= expression_binary_lrarrow expression_op_lrarrow expression_unary_lrarrow",
 /* 151 */ "expression_binary_lrarrow ::= expression_unary_lrarrow",
 /* 152 */ "expression_unary_lrarrow ::= expression_op_lrarrow expression_unary_lrarrow",
 /* 153 */ "expression_unary_lrarrow ::= expression_binary_colon",
 /* 154 */ "expression_op_eqarrow ::= OP_EQARROW",
 /* 155 */ "expression_binary_eqarrow ::= expression_binary_eqarrow expression_op_eqarrow expression_unary_eqarrow",
 /* 156 */ "expression_binary_eqarrow ::= expression_unary_eqarrow",
 /* 157 */ "expression_unary_eqarrow ::= expression_op_eqarrow expression_unary_eqarrow",
 /* 158 */ "expression_unary_eqarrow ::= expression_binary_lrarrow",
 /* 159 */ "expression_op_comma ::= OP_COMMA",
 /* 160 */ "expression_binary_comma ::= expression_unary_comma expression_op_comma expression_binary_comma",
 /* 161 */ "expression_binary_comma ::= expression_unary_comma",
 /* 162 */ "expression_unary_comma ::= expression_binary_eqarrow",
 /* 163 */ "expression_unary_comma ::= expression_unary_comma expression_op_comma",
 /* 164 */ "op_dot ::= OP_DOT",
 /* 165 */ "expression_term ::= expression_term op_dot expression_nodot",
 /* 166 */ "expression_term ::= expression_nodot",
 /* 167 */ "expression_nodot ::= ID",
 /* 168 */ "expression_nodot ::= P_POPEN block_opt P_PCLOSE",
 /* 169 */ "expression_nodot ::= P_HOLE",
 /* 170 */ "expression_nodot ::= STR_RAW",
 /* 171 */ "expression_nodot ::= STR_SINGLE",
 /* 172 */ "expression_nodot ::= str_open interpolated_string str_close",
 /* 173 */ "interpolated_string ::= expression",
 /* 174 */ "interpolated_string ::= interpolated_string str_mid expression",
 /* 175 */ "str_mid ::= STR_MID",
 /* 176 */ "str_open ::= STR_OPEN",
 /* 177 */ "str_close ::= STR_CLOSE",
 /* 178 */ "expression_nodot ::= mstr_single",
 /* 179 */ "expression_nodot ::= mstr_open interpolated_mstring mstr_close",
 /* 180 */ "interpolated_mstring ::= expression",
 /* 181 */ "interpolated_mstring ::= interpolated_mstring mstr_mid expression",
 /* 182 */ "mstr_cont ::=",
 /* 183 */ "mstr_cont ::= mstr_cont MSTR_CONTINUE",
 /* 184 */ "mstr_cont ::= mstr_cont NL",
 /* 185 */ "mstr_single ::= MSTR_BEGIN mstr_cont MSTR_END",
 /* 186 */ "mstr_open ::= MSTR_BEGIN mstr_cont MSTR_PAUSE",
 /* 187 */ "mstr_mid ::= MSTR_MID",
 /* 188 */ "mstr_mid ::= MSTR_RESUME mstr_cont MSTR_PAUSE",
 /* 189 */ "mstr_close ::= MSTR_RESUME mstr_cont MSTR_END",
 /* 190 */ "expression_nodot ::= lstr_single",
 /* 191 */ "expression_nodot ::= lstr_open interpolated_lstring lstr_close",
 /* 192 */ "interpolated_lstring ::= expression",
 /* 193 */ "interpolated_lstring ::= interpolated_lstring lstr_mid expression",
 /* 194 */ "lstr_cont ::=",
 /* 195 */ "lstr_cont ::= lstr_cont LSTR_CONTINUE",
 /* 196 */ "lstr_cont ::= lstr_cont NL",
 /* 197 */ "lstr_single ::= LSTR_BEGIN lstr_cont LSTR_END",
 /* 198 */ "lstr_open ::= LSTR_BEGIN lstr_cont LSTR_PAUSE",
 /* 199 */ "lstr_mid ::= LSTR_MID",
 /* 200 */ "lstr_mid ::= LSTR_RESUME lstr_cont LSTR_PAUSE",
 /* 201 */ "lstr_close ::= LSTR_RESUME lstr_cont LSTR_END",
 /* 202 */ "expression_nodot ::= REG_SINGLE",
 /* 203 */ "expression_nodot ::= reg_open interpolated_regexp reg_close",
 /* 204 */ "interpolated_regexp ::= expression",
 /* 205 */ "interpolated_regexp ::= interpolated_regexp reg_mid expression",
 /* 206 */ "reg_mid ::= REG_MID",
 /* 207 */ "reg_open ::= REG_OPEN",
 /* 208 */ "reg_close ::= REG_CLOSE",
 /* 209 */ "expression_nodot ::= DOUBLE",
 /* 210 */ "expression_nodot ::= INTEGER",
 /* 211 */ "expression_nodot ::= KW_HERE",
 /* 212 */ "expression_binary_app ::= expression_binary_app expression_term",
 /* 213 */ "expression_binary_app ::= expression_term",
 /* 214 */ "expression_binary_app ::= KW_SUBSCRIBE id",
 /* 215 */ "expression_binary_app ::= KW_PRIM prim_literal",
 /* 216 */ "prim_literal ::= STR_SINGLE",
 /* 217 */ "expression_binary_app ::= KW_MATCH expression_term INDENT match1_cases DEDENT",
 /* 218 */ "expression_binary_app ::= KW_MATCH match_terms INDENT matchx_cases DEDENT",
 /* 219 */ "match1_cases ::= match1_cases NL match1_case",
 /* 220 */ "match1_cases ::= match1_case",
 /* 221 */ "match1_case ::= pattern guard block_opt",
 /* 222 */ "match_terms ::= expression_term expression_term",
 /* 223 */ "match_terms ::= match_terms expression_term",
 /* 224 */ "matchx_cases ::= matchx_cases NL matchx_case",
 /* 225 */ "matchx_cases ::= matchx_case",
 /* 226 */ "matchx_case ::= pattern_terms guard block_opt",
 /* 227 */ "pattern_terms ::= pattern_terms pattern_term",
 /* 228 */ "pattern_terms ::= pattern_term",
 /* 229 */ "guard ::= P_EQUALS",
 /* 230 */ "guard ::= KW_IF expression P_EQUALS",
 /* 231 */ "expression ::= expression_binary_comma",
 /* 232 */ "expression ::= P_BSLASH pattern_term expression",
 /* 233 */ "expression ::= KW_IF block_opt KW_THEN block_opt KW_ELSE block_opt",
 /* 234 */ "pattern ::= expression",
 /* 235 */ "type ::= expression",
 /* 236 */ "pattern_term ::= expression_term",
 /* 237 */ "block_opt ::= expression",
 /* 238 */ "block_opt ::= INDENT block",
 /* 239 */ "block ::= body",
 /* 240 */ "block ::= blockdefs body",
 /* 241 */ "body ::= error DEDENT",
 /* 242 */ "body ::= expression DEDENT",
 /* 243 */ "body ::= KW_REQUIRE reqbad block",
 /* 244 */ "body ::= KW_REQUIRE pattern reqbody reqelse block",
 /* 245 */ "reqbad ::= reqelse",
 /* 246 */ "reqbad ::= error reqelse",
 /* 247 */ "reqbody ::=",
 /* 248 */ "reqbody ::= error",
 /* 249 */ "reqbody ::= P_EQUALS",
 /* 250 */ "reqbody ::= P_EQUALS block_opt",
 /* 251 */ "reqelse ::= NL KW_ELSE reqelsebody",
 /* 252 */ "reqelse ::= KW_ELSE reqelsebody",
 /* 253 */ "reqelse ::= NL",
 /* 254 */ "reqelsebody ::= NL",
 /* 255 */ "reqelsebody ::= error NL",
 /* 256 */ "reqelsebody ::= block_opt NL",
 /* 257 */ "blockdefs ::= blockdef",
 /* 258 */ "blockdefs ::= blockdefs blockdef",
 /* 259 */ "blockdef ::= error NL",
 /* 260 */ "blockdef ::= INDENT error DEDENT",
 /* 261 */ "blockdef ::= KW_DEF NL",
 /* 262 */ "blockdef ::= KW_DEF error NL",
 /* 263 */ "blockdef ::= KW_DEF pattern NL",
 /* 264 */ "blockdef ::= KW_DEF pattern error NL",
 /* 265 */ "blockdef ::= KW_DEF pattern P_EQUALS NL",
 /* 266 */ "blockdef ::= KW_DEF pattern P_EQUALS block_opt NL",
 /* 267 */ "blockdef ::= KW_FROM NL",
 /* 268 */ "blockdef ::= KW_FROM error NL",
 /* 269 */ "blockdef ::= KW_FROM id NL",
 /* 270 */ "blockdef ::= KW_FROM id error NL",
 /* 271 */ "blockdef ::= KW_FROM id KW_IMPORT P_HOLE NL",
 /* 272 */ "blockdef ::= KW_FROM id KW_IMPORT kind arity NL",
 /* 273 */ "blockdef ::= KW_FROM id KW_IMPORT kind arity idopeqs NL",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
static int yyGrowStack(yyParser *p){
  int newSize;
  int idx;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  idx = p->yytos ? (int)(p->yytos - p->yystack) : 0;
  if( p->yystack==&p->yystk0 ){
    pNew = (yyStackEntry *)malloc(newSize*sizeof(pNew[0]));
    if( pNew ) pNew[0] = p->yystk0;
  }else{
    pNew = (yyStackEntry *)realloc(p->yystack, newSize*sizeof(pNew[0]));
  }
  if( pNew ){
    p->yystack = pNew;
    p->yytos = &p->yystack[idx];
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
              yyTracePrompt, p->yystksz, newSize);
    }
#endif
    p->yystksz = newSize;
  }
  return pNew==0; 
}
#endif

/* Datatype of the argument to the memory allocated passed as the
** second argument to ParseAlloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
*/
#ifndef YYMALLOCARGTYPE
# define YYMALLOCARGTYPE size_t
#endif

/* Initialize a new parser that has already been allocated.
*/
void ParseInit(void *yypRawParser ParseCTX_PDECL){
  yyParser *yypParser = (yyParser*)yypRawParser;
  ParseCTX_STORE
#ifdef YYTRACKMAXSTACKDEPTH
  yypParser->yyhwm = 0;
#endif
#if YYSTACKDEPTH<=0
  yypParser->yytos = NULL;
  yypParser->yystack = NULL;
  yypParser->yystksz = 0;
  if( yyGrowStack(yypParser) ){
    yypParser->yystack = &yypParser->yystk0;
    yypParser->yystksz = 1;
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  yypParser->yytos = yypParser->yystack;
  yypParser->yystack[0].stateno = 0;
  yypParser->yystack[0].major = 0;
#if YYSTACKDEPTH>0
  yypParser->yystackEnd = &yypParser->yystack[YYSTACKDEPTH-1];
#endif
}

#ifndef Parse_ENGINEALWAYSONSTACK
/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(YYMALLOCARGTYPE) ParseCTX_PDECL){
  yyParser *yypParser;
  yypParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser) );
  if( yypParser ){
    ParseCTX_STORE
    ParseInit(yypParser ParseCTX_PARAM);
  }
  return (void*)yypParser;
}
#endif /* Parse_ENGINEALWAYSONSTACK */


/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the 
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH
  ParseCTX_FETCH
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are *not* used
    ** inside the C code.
    */
/********* Begin destructor definitions ***************************************/
      /* Default NON-TERMINAL Destructor */
    case 76: /* start */
    case 77: /* top */
    case 78: /* topdef */
    case 79: /* id */
    case 80: /* kind */
    case 81: /* arity */
    case 82: /* idopeqs */
    case 83: /* idopeq */
    case 84: /* idop */
    case 85: /* global */
    case 86: /* export */
    case 87: /* type */
    case 88: /* block_opt */
    case 89: /* data_elts */
    case 90: /* tuple_elts */
    case 91: /* tuple_elt */
    case 92: /* pattern */
    case 93: /* target_pattern */
    case 94: /* target_args */
    case 95: /* pattern_terms */
    case 96: /* expression_op_quant */
    case 97: /* expression_binary_quant */
    case 98: /* expression_unary_quant */
    case 99: /* expression_binary_app */
    case 100: /* expression_op_exp */
    case 101: /* expression_binary_exp */
    case 102: /* expression_unary_exp */
    case 103: /* expression_op_muldiv */
    case 104: /* expression_binary_muldiv */
    case 105: /* expression_unary_muldiv */
    case 106: /* expression_op_addsub */
    case 107: /* expression_binary_addsub */
    case 108: /* expression_unary_addsub */
    case 109: /* expression_op_compare */
    case 110: /* expression_binary_compare */
    case 111: /* expression_unary_compare */
    case 112: /* expression_op_inequal */
    case 113: /* expression_binary_inequal */
    case 114: /* expression_unary_inequal */
    case 115: /* expression_op_and */
    case 116: /* expression_binary_and */
    case 117: /* expression_unary_and */
    case 118: /* expression_op_or */
    case 119: /* expression_binary_or */
    case 120: /* expression_unary_or */
    case 121: /* expression_op_dollar */
    case 122: /* expression_binary_dollar */
    case 123: /* expression_unary_dollar */
    case 124: /* expression_op_colon */
    case 125: /* expression_binary_colon */
    case 126: /* expression_unary_colon */
    case 127: /* expression_op_lrarrow */
    case 128: /* expression_binary_lrarrow */
    case 129: /* expression_unary_lrarrow */
    case 130: /* expression_op_eqarrow */
    case 131: /* expression_binary_eqarrow */
    case 132: /* expression_unary_eqarrow */
    case 133: /* expression_op_comma */
    case 134: /* expression_binary_comma */
    case 135: /* expression_unary_comma */
    case 136: /* op_dot */
    case 137: /* expression_term */
    case 138: /* expression_nodot */
    case 139: /* str_open */
    case 140: /* interpolated_string */
    case 141: /* str_close */
    case 142: /* expression */
    case 143: /* str_mid */
    case 144: /* mstr_single */
    case 145: /* mstr_open */
    case 146: /* interpolated_mstring */
    case 147: /* mstr_close */
    case 148: /* mstr_mid */
    case 149: /* mstr_cont */
    case 150: /* lstr_single */
    case 151: /* lstr_open */
    case 152: /* interpolated_lstring */
    case 153: /* lstr_close */
    case 154: /* lstr_mid */
    case 155: /* lstr_cont */
    case 156: /* reg_open */
    case 157: /* interpolated_regexp */
    case 158: /* reg_close */
    case 159: /* reg_mid */
    case 160: /* prim_literal */
    case 161: /* match1_cases */
    case 162: /* match_terms */
    case 163: /* matchx_cases */
    case 164: /* match1_case */
    case 165: /* guard */
    case 166: /* matchx_case */
    case 167: /* pattern_term */
    case 168: /* block */
    case 169: /* body */
    case 170: /* blockdefs */
    case 171: /* reqbad */
    case 172: /* reqbody */
    case 173: /* reqelse */
    case 174: /* reqelsebody */
    case 175: /* blockdef */
{
#line 25 "parser.y"
 pop((yypminor->yy39)); 
#line 2283 "parser.c"
}
      break;
    case 75: /* error */
{
#line 26 "parser.y"
 
#line 2290 "parser.c"
}
      break;
/********* End destructor definitions *****************************************/
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
static void yy_pop_parser_stack(yyParser *pParser){
  yyStackEntry *yytos;
  assert( pParser->yytos!=0 );
  assert( pParser->yytos > pParser->yystack );
  yytos = pParser->yytos--;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yy_destructor(pParser, yytos->major, &yytos->minor);
}

/*
** Clear all secondary memory allocations from the parser
*/
void ParseFinalize(void *p){
  yyParser *pParser = (yyParser*)p;
  while( pParser->yytos>pParser->yystack ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  if( pParser->yystack!=&pParser->yystk0 ) free(pParser->yystack);
#endif
}

#ifndef Parse_ENGINEALWAYSONSTACK
/* 
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
#ifndef YYPARSEFREENEVERNULL
  if( p==0 ) return;
#endif
  ParseFinalize(p);
  (*freeProc)(p);
}
#endif /* Parse_ENGINEALWAYSONSTACK */

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyhwm;
}
#endif

/* This array of booleans keeps track of the parser statement
** coverage.  The element yycoverage[X][Y] is set when the parser
** is in state X and has a lookahead token Y.  In a well-tested
** systems, every element of this matrix should end up being set.
*/
#if defined(YYCOVERAGE)
static unsigned char yycoverage[YYNSTATE][YYNTOKEN];
#endif

/*
** Write into out a description of every state/lookahead combination that
**
**   (1)  has not been used by the parser, and
**   (2)  is not a syntax error.
**
** Return the number of missed state/lookahead combinations.
*/
#if defined(YYCOVERAGE)
int ParseCoverage(FILE *out){
  int stateno, iLookAhead, i;
  int nMissed = 0;
  for(stateno=0; stateno<YYNSTATE; stateno++){
    i = yy_shift_ofst[stateno];
    for(iLookAhead=0; iLookAhead<YYNTOKEN; iLookAhead++){
      if( yy_lookahead[i+iLookAhead]!=iLookAhead ) continue;
      if( yycoverage[stateno][iLookAhead]==0 ) nMissed++;
      if( out ){
        fprintf(out,"State %d lookahead %s %s\n", stateno,
                yyTokenName[iLookAhead],
                yycoverage[stateno][iLookAhead] ? "ok" : "missed");
      }
    }
  }
  return nMissed;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_shift_action(
  YYCODETYPE iLookAhead,    /* The look-ahead token */
  YYACTIONTYPE stateno      /* Current state number */
){
  int i;

  if( stateno>YY_MAX_SHIFT ) return stateno;
  assert( stateno <= YY_SHIFT_COUNT );
#if defined(YYCOVERAGE)
  yycoverage[stateno][iLookAhead] = 1;
#endif
  do{
    i = yy_shift_ofst[stateno];
    assert( i>=0 );
    assert( i<=YY_ACTTAB_COUNT );
    assert( i+YYNTOKEN<=(int)YY_NLOOKAHEAD );
    assert( iLookAhead!=YYNOCODE );
    assert( iLookAhead < YYNTOKEN );
    i += iLookAhead;
    assert( i<(int)YY_NLOOKAHEAD );
    if( yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      assert( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0]) );
      iFallback = yyFallback[iLookAhead];
      if( iFallback!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        assert( yyFallback[iFallback]==0 ); /* Fallback loop must terminate */
        iLookAhead = iFallback;
        continue;
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        assert( j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) );
        if( yy_lookahead[j]==YYWILDCARD && iLookAhead>0 ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead],
               yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
      return yy_default[stateno];
    }else{
      assert( i>=0 && i<(int)(sizeof(yy_action)/sizeof(yy_action[0])) );
      return yy_action[i];
    }
  }while(1);
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_reduce_action(
  YYACTIONTYPE stateno,     /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser){
   ParseARG_FETCH
   ParseCTX_FETCH
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/
/******** End %stack_overflow code ********************************************/
   ParseARG_STORE /* Suppress warning about unused %extra_argument var */
   ParseCTX_STORE
}

/*
** Print tracing information for a SHIFT action
*/
#ifndef NDEBUG
static void yyTraceShift(yyParser *yypParser, int yyNewState, const char *zTag){
  if( yyTraceFILE ){
    if( yyNewState<YYNSTATE ){
      fprintf(yyTraceFILE,"%s%s '%s', go to state %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState);
    }else{
      fprintf(yyTraceFILE,"%s%s '%s', pending reduce %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState - YY_MIN_REDUCE);
    }
  }
}
#else
# define yyTraceShift(X,Y,Z)
#endif

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  YYACTIONTYPE yyNewState,      /* The new state to shift in */
  YYCODETYPE yyMajor,           /* The major token to shift in */
  ParseTOKENTYPE yyMinor        /* The minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yytos++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
    yypParser->yyhwm++;
    assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack) );
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yytos>yypParser->yystackEnd ){
    yypParser->yytos--;
    yyStackOverflow(yypParser);
    return;
  }
#else
  if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz] ){
    if( yyGrowStack(yypParser) ){
      yypParser->yytos--;
      yyStackOverflow(yypParser);
      return;
    }
  }
#endif
  if( yyNewState > YY_MAX_SHIFT ){
    yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
  }
  yytos = yypParser->yytos;
  yytos->stateno = yyNewState;
  yytos->major = yyMajor;
  yytos->minor.yy0 = yyMinor;
  yyTraceShift(yypParser, yyNewState, "Shift");
}

/* For rule J, yyRuleInfoLhs[J] contains the symbol on the left-hand side
** of that rule */
static const YYCODETYPE yyRuleInfoLhs[] = {
    76,  /* (0) start ::= top */
    77,  /* (1) top ::= */
    77,  /* (2) top ::= top topdef */
    79,  /* (3) id ::= ID */
    78,  /* (4) topdef ::= error NL */
    78,  /* (5) topdef ::= INDENT error DEDENT */
    78,  /* (6) topdef ::= KW_PACKAGE NL */
    78,  /* (7) topdef ::= KW_PACKAGE error NL */
    78,  /* (8) topdef ::= KW_PACKAGE id NL */
    78,  /* (9) topdef ::= KW_FROM NL */
    78,  /* (10) topdef ::= KW_FROM error NL */
    78,  /* (11) topdef ::= KW_FROM id NL */
    78,  /* (12) topdef ::= KW_FROM id error NL */
    78,  /* (13) topdef ::= KW_FROM id KW_IMPORT P_HOLE NL */
    78,  /* (14) topdef ::= KW_FROM id KW_IMPORT kind arity NL */
    78,  /* (15) topdef ::= KW_FROM id KW_IMPORT kind arity idopeqs NL */
    78,  /* (16) topdef ::= KW_FROM id KW_EXPORT kind arity NL */
    78,  /* (17) topdef ::= KW_FROM id KW_EXPORT kind arity idopeqs NL */
    80,  /* (18) kind ::= KW_DEF */
    80,  /* (19) kind ::= KW_TYPE */
    80,  /* (20) kind ::= KW_TOPIC */
    80,  /* (21) kind ::= */
    81,  /* (22) arity ::= KW_UNARY */
    81,  /* (23) arity ::= KW_BINARY */
    81,  /* (24) arity ::= */
    82,  /* (25) idopeqs ::= error */
    82,  /* (26) idopeqs ::= idopeqs error */
    82,  /* (27) idopeqs ::= idopeqs idopeq */
    82,  /* (28) idopeqs ::= idopeq */
    83,  /* (29) idopeq ::= idop P_EQUALS idop */
    83,  /* (30) idopeq ::= idop */
    84,  /* (31) idop ::= ID */
    84,  /* (32) idop ::= OP_DOT */
    84,  /* (33) idop ::= OP_QUANT */
    84,  /* (34) idop ::= OP_EXP */
    84,  /* (35) idop ::= OP_MULDIV */
    84,  /* (36) idop ::= OP_ADDSUB */
    84,  /* (37) idop ::= OP_COMPARE */
    84,  /* (38) idop ::= OP_INEQUAL */
    84,  /* (39) idop ::= OP_AND */
    84,  /* (40) idop ::= OP_OR */
    84,  /* (41) idop ::= OP_DOLLAR */
    84,  /* (42) idop ::= OP_LRARROW */
    84,  /* (43) idop ::= OP_EQARROW */
    84,  /* (44) idop ::= OP_COMMA */
    85,  /* (45) global ::= */
    85,  /* (46) global ::= KW_GLOBAL */
    86,  /* (47) export ::= */
    86,  /* (48) export ::= KW_EXPORT */
    78,  /* (49) topdef ::= global export KW_TOPIC NL */
    78,  /* (50) topdef ::= global export KW_TOPIC error NL */
    78,  /* (51) topdef ::= global export KW_TOPIC id NL */
    78,  /* (52) topdef ::= global export KW_TOPIC id error NL */
    78,  /* (53) topdef ::= global export KW_TOPIC id P_COLON NL */
    78,  /* (54) topdef ::= global export KW_TOPIC id P_COLON type NL */
    78,  /* (55) topdef ::= KW_PUBLISH NL */
    78,  /* (56) topdef ::= KW_PUBLISH error NL */
    78,  /* (57) topdef ::= KW_PUBLISH id NL */
    78,  /* (58) topdef ::= KW_PUBLISH id error NL */
    78,  /* (59) topdef ::= KW_PUBLISH id P_EQUALS NL */
    78,  /* (60) topdef ::= KW_PUBLISH id P_EQUALS block_opt NL */
    78,  /* (61) topdef ::= global export KW_DATA NL */
    78,  /* (62) topdef ::= global export KW_DATA error NL */
    78,  /* (63) topdef ::= global export KW_DATA type NL */
    78,  /* (64) topdef ::= global export KW_DATA type error NL */
    78,  /* (65) topdef ::= global export KW_DATA type P_EQUALS NL */
    78,  /* (66) topdef ::= global export KW_DATA type P_EQUALS type NL */
    78,  /* (67) topdef ::= global export KW_DATA type P_EQUALS INDENT data_elts DEDENT */
    89,  /* (68) data_elts ::= error */
    89,  /* (69) data_elts ::= type */
    89,  /* (70) data_elts ::= data_elts NL error */
    89,  /* (71) data_elts ::= data_elts NL type */
    78,  /* (72) topdef ::= global export KW_TUPLE NL */
    78,  /* (73) topdef ::= global export KW_TUPLE error NL */
    78,  /* (74) topdef ::= global export KW_TUPLE type NL */
    78,  /* (75) topdef ::= global export KW_TUPLE type error NL */
    78,  /* (76) topdef ::= global export KW_TUPLE type P_EQUALS NL */
    78,  /* (77) topdef ::= global export KW_TUPLE type P_EQUALS error NL */
    78,  /* (78) topdef ::= global export KW_TUPLE type P_EQUALS INDENT tuple_elts DEDENT */
    90,  /* (79) tuple_elts ::= error */
    90,  /* (80) tuple_elts ::= tuple_elt */
    90,  /* (81) tuple_elts ::= tuple_elts NL error */
    90,  /* (82) tuple_elts ::= tuple_elts NL tuple_elt */
    91,  /* (83) tuple_elt ::= global export type */
    78,  /* (84) topdef ::= global export KW_DEF NL */
    78,  /* (85) topdef ::= global export KW_DEF error NL */
    78,  /* (86) topdef ::= global export KW_DEF pattern NL */
    78,  /* (87) topdef ::= global export KW_DEF pattern error NL */
    78,  /* (88) topdef ::= global export KW_DEF pattern P_EQUALS NL */
    78,  /* (89) topdef ::= global export KW_DEF pattern P_EQUALS block_opt NL */
    78,  /* (90) topdef ::= global export KW_TARGET NL */
    78,  /* (91) topdef ::= global export KW_TARGET error NL */
    78,  /* (92) topdef ::= global export KW_TARGET target_pattern NL */
    78,  /* (93) topdef ::= global export KW_TARGET target_pattern error NL */
    78,  /* (94) topdef ::= global export KW_TARGET target_pattern P_EQUALS NL */
    78,  /* (95) topdef ::= global export KW_TARGET target_pattern P_EQUALS block_opt NL */
    93,  /* (96) target_pattern ::= pattern */
    93,  /* (97) target_pattern ::= pattern P_BSLASH target_args */
    94,  /* (98) target_args ::= pattern_terms */
    96,  /* (99) expression_op_quant ::= OP_QUANT */
    97,  /* (100) expression_binary_quant ::= expression_binary_quant expression_op_quant expression_unary_quant */
    97,  /* (101) expression_binary_quant ::= expression_unary_quant */
    98,  /* (102) expression_unary_quant ::= expression_op_quant expression_unary_quant */
    98,  /* (103) expression_unary_quant ::= expression_binary_app */
   100,  /* (104) expression_op_exp ::= OP_EXP */
   101,  /* (105) expression_binary_exp ::= expression_unary_exp expression_op_exp expression_binary_exp */
   101,  /* (106) expression_binary_exp ::= expression_unary_exp */
   102,  /* (107) expression_unary_exp ::= expression_op_exp expression_unary_exp */
   102,  /* (108) expression_unary_exp ::= expression_binary_quant */
   103,  /* (109) expression_op_muldiv ::= OP_MULDIV */
   104,  /* (110) expression_binary_muldiv ::= expression_binary_muldiv expression_op_muldiv expression_unary_muldiv */
   104,  /* (111) expression_binary_muldiv ::= expression_unary_muldiv */
   105,  /* (112) expression_unary_muldiv ::= expression_op_muldiv expression_unary_muldiv */
   105,  /* (113) expression_unary_muldiv ::= expression_binary_exp */
   106,  /* (114) expression_op_addsub ::= OP_ADDSUB */
   107,  /* (115) expression_binary_addsub ::= expression_binary_addsub expression_op_addsub expression_unary_addsub */
   107,  /* (116) expression_binary_addsub ::= expression_unary_addsub */
   108,  /* (117) expression_unary_addsub ::= expression_op_addsub expression_unary_addsub */
   108,  /* (118) expression_unary_addsub ::= expression_binary_muldiv */
   109,  /* (119) expression_op_compare ::= OP_COMPARE */
   110,  /* (120) expression_binary_compare ::= expression_binary_compare expression_op_compare expression_unary_compare */
   110,  /* (121) expression_binary_compare ::= expression_unary_compare */
   111,  /* (122) expression_unary_compare ::= expression_op_compare expression_unary_compare */
   111,  /* (123) expression_unary_compare ::= expression_binary_addsub */
   112,  /* (124) expression_op_inequal ::= OP_INEQUAL */
   113,  /* (125) expression_binary_inequal ::= expression_binary_inequal expression_op_inequal expression_unary_inequal */
   113,  /* (126) expression_binary_inequal ::= expression_unary_inequal */
   114,  /* (127) expression_unary_inequal ::= expression_op_inequal expression_unary_inequal */
   114,  /* (128) expression_unary_inequal ::= expression_binary_compare */
   115,  /* (129) expression_op_and ::= OP_AND */
   116,  /* (130) expression_binary_and ::= expression_binary_and expression_op_and expression_unary_and */
   116,  /* (131) expression_binary_and ::= expression_unary_and */
   117,  /* (132) expression_unary_and ::= expression_op_and expression_unary_and */
   117,  /* (133) expression_unary_and ::= expression_binary_inequal */
   118,  /* (134) expression_op_or ::= OP_OR */
   119,  /* (135) expression_binary_or ::= expression_binary_or expression_op_or expression_unary_or */
   119,  /* (136) expression_binary_or ::= expression_unary_or */
   120,  /* (137) expression_unary_or ::= expression_op_or expression_unary_or */
   120,  /* (138) expression_unary_or ::= expression_binary_and */
   121,  /* (139) expression_op_dollar ::= OP_DOLLAR */
   122,  /* (140) expression_binary_dollar ::= expression_unary_dollar expression_op_dollar expression_binary_dollar */
   122,  /* (141) expression_binary_dollar ::= expression_unary_dollar */
   123,  /* (142) expression_unary_dollar ::= expression_binary_or */
   123,  /* (143) expression_unary_dollar ::= expression_unary_dollar expression_op_dollar */
   124,  /* (144) expression_op_colon ::= P_COLON */
   125,  /* (145) expression_binary_colon ::= expression_unary_colon expression_op_colon expression_binary_colon */
   125,  /* (146) expression_binary_colon ::= expression_unary_colon */
   126,  /* (147) expression_unary_colon ::= expression_op_colon expression_unary_colon */
   126,  /* (148) expression_unary_colon ::= expression_binary_dollar */
   127,  /* (149) expression_op_lrarrow ::= OP_LRARROW */
   128,  /* (150) expression_binary_lrarrow ::= expression_binary_lrarrow expression_op_lrarrow expression_unary_lrarrow */
   128,  /* (151) expression_binary_lrarrow ::= expression_unary_lrarrow */
   129,  /* (152) expression_unary_lrarrow ::= expression_op_lrarrow expression_unary_lrarrow */
   129,  /* (153) expression_unary_lrarrow ::= expression_binary_colon */
   130,  /* (154) expression_op_eqarrow ::= OP_EQARROW */
   131,  /* (155) expression_binary_eqarrow ::= expression_binary_eqarrow expression_op_eqarrow expression_unary_eqarrow */
   131,  /* (156) expression_binary_eqarrow ::= expression_unary_eqarrow */
   132,  /* (157) expression_unary_eqarrow ::= expression_op_eqarrow expression_unary_eqarrow */
   132,  /* (158) expression_unary_eqarrow ::= expression_binary_lrarrow */
   133,  /* (159) expression_op_comma ::= OP_COMMA */
   134,  /* (160) expression_binary_comma ::= expression_unary_comma expression_op_comma expression_binary_comma */
   134,  /* (161) expression_binary_comma ::= expression_unary_comma */
   135,  /* (162) expression_unary_comma ::= expression_binary_eqarrow */
   135,  /* (163) expression_unary_comma ::= expression_unary_comma expression_op_comma */
   136,  /* (164) op_dot ::= OP_DOT */
   137,  /* (165) expression_term ::= expression_term op_dot expression_nodot */
   137,  /* (166) expression_term ::= expression_nodot */
   138,  /* (167) expression_nodot ::= ID */
   138,  /* (168) expression_nodot ::= P_POPEN block_opt P_PCLOSE */
   138,  /* (169) expression_nodot ::= P_HOLE */
   138,  /* (170) expression_nodot ::= STR_RAW */
   138,  /* (171) expression_nodot ::= STR_SINGLE */
   138,  /* (172) expression_nodot ::= str_open interpolated_string str_close */
   140,  /* (173) interpolated_string ::= expression */
   140,  /* (174) interpolated_string ::= interpolated_string str_mid expression */
   143,  /* (175) str_mid ::= STR_MID */
   139,  /* (176) str_open ::= STR_OPEN */
   141,  /* (177) str_close ::= STR_CLOSE */
   138,  /* (178) expression_nodot ::= mstr_single */
   138,  /* (179) expression_nodot ::= mstr_open interpolated_mstring mstr_close */
   146,  /* (180) interpolated_mstring ::= expression */
   146,  /* (181) interpolated_mstring ::= interpolated_mstring mstr_mid expression */
   149,  /* (182) mstr_cont ::= */
   149,  /* (183) mstr_cont ::= mstr_cont MSTR_CONTINUE */
   149,  /* (184) mstr_cont ::= mstr_cont NL */
   144,  /* (185) mstr_single ::= MSTR_BEGIN mstr_cont MSTR_END */
   145,  /* (186) mstr_open ::= MSTR_BEGIN mstr_cont MSTR_PAUSE */
   148,  /* (187) mstr_mid ::= MSTR_MID */
   148,  /* (188) mstr_mid ::= MSTR_RESUME mstr_cont MSTR_PAUSE */
   147,  /* (189) mstr_close ::= MSTR_RESUME mstr_cont MSTR_END */
   138,  /* (190) expression_nodot ::= lstr_single */
   138,  /* (191) expression_nodot ::= lstr_open interpolated_lstring lstr_close */
   152,  /* (192) interpolated_lstring ::= expression */
   152,  /* (193) interpolated_lstring ::= interpolated_lstring lstr_mid expression */
   155,  /* (194) lstr_cont ::= */
   155,  /* (195) lstr_cont ::= lstr_cont LSTR_CONTINUE */
   155,  /* (196) lstr_cont ::= lstr_cont NL */
   150,  /* (197) lstr_single ::= LSTR_BEGIN lstr_cont LSTR_END */
   151,  /* (198) lstr_open ::= LSTR_BEGIN lstr_cont LSTR_PAUSE */
   154,  /* (199) lstr_mid ::= LSTR_MID */
   154,  /* (200) lstr_mid ::= LSTR_RESUME lstr_cont LSTR_PAUSE */
   153,  /* (201) lstr_close ::= LSTR_RESUME lstr_cont LSTR_END */
   138,  /* (202) expression_nodot ::= REG_SINGLE */
   138,  /* (203) expression_nodot ::= reg_open interpolated_regexp reg_close */
   157,  /* (204) interpolated_regexp ::= expression */
   157,  /* (205) interpolated_regexp ::= interpolated_regexp reg_mid expression */
   159,  /* (206) reg_mid ::= REG_MID */
   156,  /* (207) reg_open ::= REG_OPEN */
   158,  /* (208) reg_close ::= REG_CLOSE */
   138,  /* (209) expression_nodot ::= DOUBLE */
   138,  /* (210) expression_nodot ::= INTEGER */
   138,  /* (211) expression_nodot ::= KW_HERE */
    99,  /* (212) expression_binary_app ::= expression_binary_app expression_term */
    99,  /* (213) expression_binary_app ::= expression_term */
    99,  /* (214) expression_binary_app ::= KW_SUBSCRIBE id */
    99,  /* (215) expression_binary_app ::= KW_PRIM prim_literal */
   160,  /* (216) prim_literal ::= STR_SINGLE */
    99,  /* (217) expression_binary_app ::= KW_MATCH expression_term INDENT match1_cases DEDENT */
    99,  /* (218) expression_binary_app ::= KW_MATCH match_terms INDENT matchx_cases DEDENT */
   161,  /* (219) match1_cases ::= match1_cases NL match1_case */
   161,  /* (220) match1_cases ::= match1_case */
   164,  /* (221) match1_case ::= pattern guard block_opt */
   162,  /* (222) match_terms ::= expression_term expression_term */
   162,  /* (223) match_terms ::= match_terms expression_term */
   163,  /* (224) matchx_cases ::= matchx_cases NL matchx_case */
   163,  /* (225) matchx_cases ::= matchx_case */
   166,  /* (226) matchx_case ::= pattern_terms guard block_opt */
    95,  /* (227) pattern_terms ::= pattern_terms pattern_term */
    95,  /* (228) pattern_terms ::= pattern_term */
   165,  /* (229) guard ::= P_EQUALS */
   165,  /* (230) guard ::= KW_IF expression P_EQUALS */
   142,  /* (231) expression ::= expression_binary_comma */
   142,  /* (232) expression ::= P_BSLASH pattern_term expression */
   142,  /* (233) expression ::= KW_IF block_opt KW_THEN block_opt KW_ELSE block_opt */
    92,  /* (234) pattern ::= expression */
    87,  /* (235) type ::= expression */
   167,  /* (236) pattern_term ::= expression_term */
    88,  /* (237) block_opt ::= expression */
    88,  /* (238) block_opt ::= INDENT block */
   168,  /* (239) block ::= body */
   168,  /* (240) block ::= blockdefs body */
   169,  /* (241) body ::= error DEDENT */
   169,  /* (242) body ::= expression DEDENT */
   169,  /* (243) body ::= KW_REQUIRE reqbad block */
   169,  /* (244) body ::= KW_REQUIRE pattern reqbody reqelse block */
   171,  /* (245) reqbad ::= reqelse */
   171,  /* (246) reqbad ::= error reqelse */
   172,  /* (247) reqbody ::= */
   172,  /* (248) reqbody ::= error */
   172,  /* (249) reqbody ::= P_EQUALS */
   172,  /* (250) reqbody ::= P_EQUALS block_opt */
   173,  /* (251) reqelse ::= NL KW_ELSE reqelsebody */
   173,  /* (252) reqelse ::= KW_ELSE reqelsebody */
   173,  /* (253) reqelse ::= NL */
   174,  /* (254) reqelsebody ::= NL */
   174,  /* (255) reqelsebody ::= error NL */
   174,  /* (256) reqelsebody ::= block_opt NL */
   170,  /* (257) blockdefs ::= blockdef */
   170,  /* (258) blockdefs ::= blockdefs blockdef */
   175,  /* (259) blockdef ::= error NL */
   175,  /* (260) blockdef ::= INDENT error DEDENT */
   175,  /* (261) blockdef ::= KW_DEF NL */
   175,  /* (262) blockdef ::= KW_DEF error NL */
   175,  /* (263) blockdef ::= KW_DEF pattern NL */
   175,  /* (264) blockdef ::= KW_DEF pattern error NL */
   175,  /* (265) blockdef ::= KW_DEF pattern P_EQUALS NL */
   175,  /* (266) blockdef ::= KW_DEF pattern P_EQUALS block_opt NL */
   175,  /* (267) blockdef ::= KW_FROM NL */
   175,  /* (268) blockdef ::= KW_FROM error NL */
   175,  /* (269) blockdef ::= KW_FROM id NL */
   175,  /* (270) blockdef ::= KW_FROM id error NL */
   175,  /* (271) blockdef ::= KW_FROM id KW_IMPORT P_HOLE NL */
   175,  /* (272) blockdef ::= KW_FROM id KW_IMPORT kind arity NL */
   175,  /* (273) blockdef ::= KW_FROM id KW_IMPORT kind arity idopeqs NL */
};

/* For rule J, yyRuleInfoNRhs[J] contains the negative of the number
** of symbols on the right-hand side of that rule. */
static const signed char yyRuleInfoNRhs[] = {
   -1,  /* (0) start ::= top */
    0,  /* (1) top ::= */
   -2,  /* (2) top ::= top topdef */
   -1,  /* (3) id ::= ID */
   -2,  /* (4) topdef ::= error NL */
   -3,  /* (5) topdef ::= INDENT error DEDENT */
   -2,  /* (6) topdef ::= KW_PACKAGE NL */
   -3,  /* (7) topdef ::= KW_PACKAGE error NL */
   -3,  /* (8) topdef ::= KW_PACKAGE id NL */
   -2,  /* (9) topdef ::= KW_FROM NL */
   -3,  /* (10) topdef ::= KW_FROM error NL */
   -3,  /* (11) topdef ::= KW_FROM id NL */
   -4,  /* (12) topdef ::= KW_FROM id error NL */
   -5,  /* (13) topdef ::= KW_FROM id KW_IMPORT P_HOLE NL */
   -6,  /* (14) topdef ::= KW_FROM id KW_IMPORT kind arity NL */
   -7,  /* (15) topdef ::= KW_FROM id KW_IMPORT kind arity idopeqs NL */
   -6,  /* (16) topdef ::= KW_FROM id KW_EXPORT kind arity NL */
   -7,  /* (17) topdef ::= KW_FROM id KW_EXPORT kind arity idopeqs NL */
   -1,  /* (18) kind ::= KW_DEF */
   -1,  /* (19) kind ::= KW_TYPE */
   -1,  /* (20) kind ::= KW_TOPIC */
    0,  /* (21) kind ::= */
   -1,  /* (22) arity ::= KW_UNARY */
   -1,  /* (23) arity ::= KW_BINARY */
    0,  /* (24) arity ::= */
   -1,  /* (25) idopeqs ::= error */
   -2,  /* (26) idopeqs ::= idopeqs error */
   -2,  /* (27) idopeqs ::= idopeqs idopeq */
   -1,  /* (28) idopeqs ::= idopeq */
   -3,  /* (29) idopeq ::= idop P_EQUALS idop */
   -1,  /* (30) idopeq ::= idop */
   -1,  /* (31) idop ::= ID */
   -1,  /* (32) idop ::= OP_DOT */
   -1,  /* (33) idop ::= OP_QUANT */
   -1,  /* (34) idop ::= OP_EXP */
   -1,  /* (35) idop ::= OP_MULDIV */
   -1,  /* (36) idop ::= OP_ADDSUB */
   -1,  /* (37) idop ::= OP_COMPARE */
   -1,  /* (38) idop ::= OP_INEQUAL */
   -1,  /* (39) idop ::= OP_AND */
   -1,  /* (40) idop ::= OP_OR */
   -1,  /* (41) idop ::= OP_DOLLAR */
   -1,  /* (42) idop ::= OP_LRARROW */
   -1,  /* (43) idop ::= OP_EQARROW */
   -1,  /* (44) idop ::= OP_COMMA */
    0,  /* (45) global ::= */
   -1,  /* (46) global ::= KW_GLOBAL */
    0,  /* (47) export ::= */
   -1,  /* (48) export ::= KW_EXPORT */
   -4,  /* (49) topdef ::= global export KW_TOPIC NL */
   -5,  /* (50) topdef ::= global export KW_TOPIC error NL */
   -5,  /* (51) topdef ::= global export KW_TOPIC id NL */
   -6,  /* (52) topdef ::= global export KW_TOPIC id error NL */
   -6,  /* (53) topdef ::= global export KW_TOPIC id P_COLON NL */
   -7,  /* (54) topdef ::= global export KW_TOPIC id P_COLON type NL */
   -2,  /* (55) topdef ::= KW_PUBLISH NL */
   -3,  /* (56) topdef ::= KW_PUBLISH error NL */
   -3,  /* (57) topdef ::= KW_PUBLISH id NL */
   -4,  /* (58) topdef ::= KW_PUBLISH id error NL */
   -4,  /* (59) topdef ::= KW_PUBLISH id P_EQUALS NL */
   -5,  /* (60) topdef ::= KW_PUBLISH id P_EQUALS block_opt NL */
   -4,  /* (61) topdef ::= global export KW_DATA NL */
   -5,  /* (62) topdef ::= global export KW_DATA error NL */
   -5,  /* (63) topdef ::= global export KW_DATA type NL */
   -6,  /* (64) topdef ::= global export KW_DATA type error NL */
   -6,  /* (65) topdef ::= global export KW_DATA type P_EQUALS NL */
   -7,  /* (66) topdef ::= global export KW_DATA type P_EQUALS type NL */
   -8,  /* (67) topdef ::= global export KW_DATA type P_EQUALS INDENT data_elts DEDENT */
   -1,  /* (68) data_elts ::= error */
   -1,  /* (69) data_elts ::= type */
   -3,  /* (70) data_elts ::= data_elts NL error */
   -3,  /* (71) data_elts ::= data_elts NL type */
   -4,  /* (72) topdef ::= global export KW_TUPLE NL */
   -5,  /* (73) topdef ::= global export KW_TUPLE error NL */
   -5,  /* (74) topdef ::= global export KW_TUPLE type NL */
   -6,  /* (75) topdef ::= global export KW_TUPLE type error NL */
   -6,  /* (76) topdef ::= global export KW_TUPLE type P_EQUALS NL */
   -7,  /* (77) topdef ::= global export KW_TUPLE type P_EQUALS error NL */
   -8,  /* (78) topdef ::= global export KW_TUPLE type P_EQUALS INDENT tuple_elts DEDENT */
   -1,  /* (79) tuple_elts ::= error */
   -1,  /* (80) tuple_elts ::= tuple_elt */
   -3,  /* (81) tuple_elts ::= tuple_elts NL error */
   -3,  /* (82) tuple_elts ::= tuple_elts NL tuple_elt */
   -3,  /* (83) tuple_elt ::= global export type */
   -4,  /* (84) topdef ::= global export KW_DEF NL */
   -5,  /* (85) topdef ::= global export KW_DEF error NL */
   -5,  /* (86) topdef ::= global export KW_DEF pattern NL */
   -6,  /* (87) topdef ::= global export KW_DEF pattern error NL */
   -6,  /* (88) topdef ::= global export KW_DEF pattern P_EQUALS NL */
   -7,  /* (89) topdef ::= global export KW_DEF pattern P_EQUALS block_opt NL */
   -4,  /* (90) topdef ::= global export KW_TARGET NL */
   -5,  /* (91) topdef ::= global export KW_TARGET error NL */
   -5,  /* (92) topdef ::= global export KW_TARGET target_pattern NL */
   -6,  /* (93) topdef ::= global export KW_TARGET target_pattern error NL */
   -6,  /* (94) topdef ::= global export KW_TARGET target_pattern P_EQUALS NL */
   -7,  /* (95) topdef ::= global export KW_TARGET target_pattern P_EQUALS block_opt NL */
   -1,  /* (96) target_pattern ::= pattern */
   -3,  /* (97) target_pattern ::= pattern P_BSLASH target_args */
   -1,  /* (98) target_args ::= pattern_terms */
   -1,  /* (99) expression_op_quant ::= OP_QUANT */
   -3,  /* (100) expression_binary_quant ::= expression_binary_quant expression_op_quant expression_unary_quant */
   -1,  /* (101) expression_binary_quant ::= expression_unary_quant */
   -2,  /* (102) expression_unary_quant ::= expression_op_quant expression_unary_quant */
   -1,  /* (103) expression_unary_quant ::= expression_binary_app */
   -1,  /* (104) expression_op_exp ::= OP_EXP */
   -3,  /* (105) expression_binary_exp ::= expression_unary_exp expression_op_exp expression_binary_exp */
   -1,  /* (106) expression_binary_exp ::= expression_unary_exp */
   -2,  /* (107) expression_unary_exp ::= expression_op_exp expression_unary_exp */
   -1,  /* (108) expression_unary_exp ::= expression_binary_quant */
   -1,  /* (109) expression_op_muldiv ::= OP_MULDIV */
   -3,  /* (110) expression_binary_muldiv ::= expression_binary_muldiv expression_op_muldiv expression_unary_muldiv */
   -1,  /* (111) expression_binary_muldiv ::= expression_unary_muldiv */
   -2,  /* (112) expression_unary_muldiv ::= expression_op_muldiv expression_unary_muldiv */
   -1,  /* (113) expression_unary_muldiv ::= expression_binary_exp */
   -1,  /* (114) expression_op_addsub ::= OP_ADDSUB */
   -3,  /* (115) expression_binary_addsub ::= expression_binary_addsub expression_op_addsub expression_unary_addsub */
   -1,  /* (116) expression_binary_addsub ::= expression_unary_addsub */
   -2,  /* (117) expression_unary_addsub ::= expression_op_addsub expression_unary_addsub */
   -1,  /* (118) expression_unary_addsub ::= expression_binary_muldiv */
   -1,  /* (119) expression_op_compare ::= OP_COMPARE */
   -3,  /* (120) expression_binary_compare ::= expression_binary_compare expression_op_compare expression_unary_compare */
   -1,  /* (121) expression_binary_compare ::= expression_unary_compare */
   -2,  /* (122) expression_unary_compare ::= expression_op_compare expression_unary_compare */
   -1,  /* (123) expression_unary_compare ::= expression_binary_addsub */
   -1,  /* (124) expression_op_inequal ::= OP_INEQUAL */
   -3,  /* (125) expression_binary_inequal ::= expression_binary_inequal expression_op_inequal expression_unary_inequal */
   -1,  /* (126) expression_binary_inequal ::= expression_unary_inequal */
   -2,  /* (127) expression_unary_inequal ::= expression_op_inequal expression_unary_inequal */
   -1,  /* (128) expression_unary_inequal ::= expression_binary_compare */
   -1,  /* (129) expression_op_and ::= OP_AND */
   -3,  /* (130) expression_binary_and ::= expression_binary_and expression_op_and expression_unary_and */
   -1,  /* (131) expression_binary_and ::= expression_unary_and */
   -2,  /* (132) expression_unary_and ::= expression_op_and expression_unary_and */
   -1,  /* (133) expression_unary_and ::= expression_binary_inequal */
   -1,  /* (134) expression_op_or ::= OP_OR */
   -3,  /* (135) expression_binary_or ::= expression_binary_or expression_op_or expression_unary_or */
   -1,  /* (136) expression_binary_or ::= expression_unary_or */
   -2,  /* (137) expression_unary_or ::= expression_op_or expression_unary_or */
   -1,  /* (138) expression_unary_or ::= expression_binary_and */
   -1,  /* (139) expression_op_dollar ::= OP_DOLLAR */
   -3,  /* (140) expression_binary_dollar ::= expression_unary_dollar expression_op_dollar expression_binary_dollar */
   -1,  /* (141) expression_binary_dollar ::= expression_unary_dollar */
   -1,  /* (142) expression_unary_dollar ::= expression_binary_or */
   -2,  /* (143) expression_unary_dollar ::= expression_unary_dollar expression_op_dollar */
   -1,  /* (144) expression_op_colon ::= P_COLON */
   -3,  /* (145) expression_binary_colon ::= expression_unary_colon expression_op_colon expression_binary_colon */
   -1,  /* (146) expression_binary_colon ::= expression_unary_colon */
   -2,  /* (147) expression_unary_colon ::= expression_op_colon expression_unary_colon */
   -1,  /* (148) expression_unary_colon ::= expression_binary_dollar */
   -1,  /* (149) expression_op_lrarrow ::= OP_LRARROW */
   -3,  /* (150) expression_binary_lrarrow ::= expression_binary_lrarrow expression_op_lrarrow expression_unary_lrarrow */
   -1,  /* (151) expression_binary_lrarrow ::= expression_unary_lrarrow */
   -2,  /* (152) expression_unary_lrarrow ::= expression_op_lrarrow expression_unary_lrarrow */
   -1,  /* (153) expression_unary_lrarrow ::= expression_binary_colon */
   -1,  /* (154) expression_op_eqarrow ::= OP_EQARROW */
   -3,  /* (155) expression_binary_eqarrow ::= expression_binary_eqarrow expression_op_eqarrow expression_unary_eqarrow */
   -1,  /* (156) expression_binary_eqarrow ::= expression_unary_eqarrow */
   -2,  /* (157) expression_unary_eqarrow ::= expression_op_eqarrow expression_unary_eqarrow */
   -1,  /* (158) expression_unary_eqarrow ::= expression_binary_lrarrow */
   -1,  /* (159) expression_op_comma ::= OP_COMMA */
   -3,  /* (160) expression_binary_comma ::= expression_unary_comma expression_op_comma expression_binary_comma */
   -1,  /* (161) expression_binary_comma ::= expression_unary_comma */
   -1,  /* (162) expression_unary_comma ::= expression_binary_eqarrow */
   -2,  /* (163) expression_unary_comma ::= expression_unary_comma expression_op_comma */
   -1,  /* (164) op_dot ::= OP_DOT */
   -3,  /* (165) expression_term ::= expression_term op_dot expression_nodot */
   -1,  /* (166) expression_term ::= expression_nodot */
   -1,  /* (167) expression_nodot ::= ID */
   -3,  /* (168) expression_nodot ::= P_POPEN block_opt P_PCLOSE */
   -1,  /* (169) expression_nodot ::= P_HOLE */
   -1,  /* (170) expression_nodot ::= STR_RAW */
   -1,  /* (171) expression_nodot ::= STR_SINGLE */
   -3,  /* (172) expression_nodot ::= str_open interpolated_string str_close */
   -1,  /* (173) interpolated_string ::= expression */
   -3,  /* (174) interpolated_string ::= interpolated_string str_mid expression */
   -1,  /* (175) str_mid ::= STR_MID */
   -1,  /* (176) str_open ::= STR_OPEN */
   -1,  /* (177) str_close ::= STR_CLOSE */
   -1,  /* (178) expression_nodot ::= mstr_single */
   -3,  /* (179) expression_nodot ::= mstr_open interpolated_mstring mstr_close */
   -1,  /* (180) interpolated_mstring ::= expression */
   -3,  /* (181) interpolated_mstring ::= interpolated_mstring mstr_mid expression */
    0,  /* (182) mstr_cont ::= */
   -2,  /* (183) mstr_cont ::= mstr_cont MSTR_CONTINUE */
   -2,  /* (184) mstr_cont ::= mstr_cont NL */
   -3,  /* (185) mstr_single ::= MSTR_BEGIN mstr_cont MSTR_END */
   -3,  /* (186) mstr_open ::= MSTR_BEGIN mstr_cont MSTR_PAUSE */
   -1,  /* (187) mstr_mid ::= MSTR_MID */
   -3,  /* (188) mstr_mid ::= MSTR_RESUME mstr_cont MSTR_PAUSE */
   -3,  /* (189) mstr_close ::= MSTR_RESUME mstr_cont MSTR_END */
   -1,  /* (190) expression_nodot ::= lstr_single */
   -3,  /* (191) expression_nodot ::= lstr_open interpolated_lstring lstr_close */
   -1,  /* (192) interpolated_lstring ::= expression */
   -3,  /* (193) interpolated_lstring ::= interpolated_lstring lstr_mid expression */
    0,  /* (194) lstr_cont ::= */
   -2,  /* (195) lstr_cont ::= lstr_cont LSTR_CONTINUE */
   -2,  /* (196) lstr_cont ::= lstr_cont NL */
   -3,  /* (197) lstr_single ::= LSTR_BEGIN lstr_cont LSTR_END */
   -3,  /* (198) lstr_open ::= LSTR_BEGIN lstr_cont LSTR_PAUSE */
   -1,  /* (199) lstr_mid ::= LSTR_MID */
   -3,  /* (200) lstr_mid ::= LSTR_RESUME lstr_cont LSTR_PAUSE */
   -3,  /* (201) lstr_close ::= LSTR_RESUME lstr_cont LSTR_END */
   -1,  /* (202) expression_nodot ::= REG_SINGLE */
   -3,  /* (203) expression_nodot ::= reg_open interpolated_regexp reg_close */
   -1,  /* (204) interpolated_regexp ::= expression */
   -3,  /* (205) interpolated_regexp ::= interpolated_regexp reg_mid expression */
   -1,  /* (206) reg_mid ::= REG_MID */
   -1,  /* (207) reg_open ::= REG_OPEN */
   -1,  /* (208) reg_close ::= REG_CLOSE */
   -1,  /* (209) expression_nodot ::= DOUBLE */
   -1,  /* (210) expression_nodot ::= INTEGER */
   -1,  /* (211) expression_nodot ::= KW_HERE */
   -2,  /* (212) expression_binary_app ::= expression_binary_app expression_term */
   -1,  /* (213) expression_binary_app ::= expression_term */
   -2,  /* (214) expression_binary_app ::= KW_SUBSCRIBE id */
   -2,  /* (215) expression_binary_app ::= KW_PRIM prim_literal */
   -1,  /* (216) prim_literal ::= STR_SINGLE */
   -5,  /* (217) expression_binary_app ::= KW_MATCH expression_term INDENT match1_cases DEDENT */
   -5,  /* (218) expression_binary_app ::= KW_MATCH match_terms INDENT matchx_cases DEDENT */
   -3,  /* (219) match1_cases ::= match1_cases NL match1_case */
   -1,  /* (220) match1_cases ::= match1_case */
   -3,  /* (221) match1_case ::= pattern guard block_opt */
   -2,  /* (222) match_terms ::= expression_term expression_term */
   -2,  /* (223) match_terms ::= match_terms expression_term */
   -3,  /* (224) matchx_cases ::= matchx_cases NL matchx_case */
   -1,  /* (225) matchx_cases ::= matchx_case */
   -3,  /* (226) matchx_case ::= pattern_terms guard block_opt */
   -2,  /* (227) pattern_terms ::= pattern_terms pattern_term */
   -1,  /* (228) pattern_terms ::= pattern_term */
   -1,  /* (229) guard ::= P_EQUALS */
   -3,  /* (230) guard ::= KW_IF expression P_EQUALS */
   -1,  /* (231) expression ::= expression_binary_comma */
   -3,  /* (232) expression ::= P_BSLASH pattern_term expression */
   -6,  /* (233) expression ::= KW_IF block_opt KW_THEN block_opt KW_ELSE block_opt */
   -1,  /* (234) pattern ::= expression */
   -1,  /* (235) type ::= expression */
   -1,  /* (236) pattern_term ::= expression_term */
   -1,  /* (237) block_opt ::= expression */
   -2,  /* (238) block_opt ::= INDENT block */
   -1,  /* (239) block ::= body */
   -2,  /* (240) block ::= blockdefs body */
   -2,  /* (241) body ::= error DEDENT */
   -2,  /* (242) body ::= expression DEDENT */
   -3,  /* (243) body ::= KW_REQUIRE reqbad block */
   -5,  /* (244) body ::= KW_REQUIRE pattern reqbody reqelse block */
   -1,  /* (245) reqbad ::= reqelse */
   -2,  /* (246) reqbad ::= error reqelse */
    0,  /* (247) reqbody ::= */
   -1,  /* (248) reqbody ::= error */
   -1,  /* (249) reqbody ::= P_EQUALS */
   -2,  /* (250) reqbody ::= P_EQUALS block_opt */
   -3,  /* (251) reqelse ::= NL KW_ELSE reqelsebody */
   -2,  /* (252) reqelse ::= KW_ELSE reqelsebody */
   -1,  /* (253) reqelse ::= NL */
   -1,  /* (254) reqelsebody ::= NL */
   -2,  /* (255) reqelsebody ::= error NL */
   -2,  /* (256) reqelsebody ::= block_opt NL */
   -1,  /* (257) blockdefs ::= blockdef */
   -2,  /* (258) blockdefs ::= blockdefs blockdef */
   -2,  /* (259) blockdef ::= error NL */
   -3,  /* (260) blockdef ::= INDENT error DEDENT */
   -2,  /* (261) blockdef ::= KW_DEF NL */
   -3,  /* (262) blockdef ::= KW_DEF error NL */
   -3,  /* (263) blockdef ::= KW_DEF pattern NL */
   -4,  /* (264) blockdef ::= KW_DEF pattern error NL */
   -4,  /* (265) blockdef ::= KW_DEF pattern P_EQUALS NL */
   -5,  /* (266) blockdef ::= KW_DEF pattern P_EQUALS block_opt NL */
   -2,  /* (267) blockdef ::= KW_FROM NL */
   -3,  /* (268) blockdef ::= KW_FROM error NL */
   -3,  /* (269) blockdef ::= KW_FROM id NL */
   -4,  /* (270) blockdef ::= KW_FROM id error NL */
   -5,  /* (271) blockdef ::= KW_FROM id KW_IMPORT P_HOLE NL */
   -6,  /* (272) blockdef ::= KW_FROM id KW_IMPORT kind arity NL */
   -7,  /* (273) blockdef ::= KW_FROM id KW_IMPORT kind arity idopeqs NL */
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
**
** The yyLookahead and yyLookaheadToken parameters provide reduce actions
** access to the lookahead token (if any).  The yyLookahead will be YYNOCODE
** if the lookahead token has already been consumed.  As this procedure is
** only called from one place, optimizing compilers will in-line it, which
** means that the extra parameters have no performance impact.
*/
static YYACTIONTYPE yy_reduce(
  yyParser *yypParser,         /* The parser */
  unsigned int yyruleno,       /* Number of the rule by which to reduce */
  int yyLookahead,             /* Lookahead token, or YYNOCODE if none */
  ParseTOKENTYPE yyLookaheadToken  /* Value of the lookahead token */
  ParseCTX_PDECL                   /* %extra_context */
){
  int yygoto;                     /* The next state */
  YYACTIONTYPE yyact;             /* The next action */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH
  (void)yyLookahead;
  (void)yyLookaheadToken;
  yymsp = yypParser->yytos;

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
        YYMINORTYPE yylhsminor;
      case 0: /* start ::= top */
#line 57 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_TOP, yymsp[0].minor.yy39); }
#line 3176 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 1: /* top ::= */
#line 59 "parser.y"
{ yymsp[1].minor.yy39 = 0;   }
#line 3182 "parser.c"
        break;
      case 2: /* top ::= top topdef */
      case 27: /* idopeqs ::= idopeqs idopeq */ yytestcase(yyruleno==27);
      case 222: /* match_terms ::= expression_term expression_term */ yytestcase(yyruleno==222);
      case 223: /* match_terms ::= match_terms expression_term */ yytestcase(yyruleno==223);
      case 227: /* pattern_terms ::= pattern_terms pattern_term */ yytestcase(yyruleno==227);
      case 258: /* blockdefs ::= blockdefs blockdef */ yytestcase(yyruleno==258);
#line 60 "parser.y"
{ yylhsminor.yy39 = yymsp[-1].minor.yy39+yymsp[0].minor.yy39; }
#line 3192 "parser.c"
  yymsp[-1].minor.yy39 = yylhsminor.yy39;
        break;
      case 3: /* id ::= ID */
      case 31: /* idop ::= ID */ yytestcase(yyruleno==31);
      case 167: /* expression_nodot ::= ID */ yytestcase(yyruleno==167);
#line 62 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ID, yymsp[0].minor.yy0); }
#line 3200 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 4: /* topdef ::= error NL */
      case 259: /* blockdef ::= error NL */ yytestcase(yyruleno==259);
{  yy_destructor(yypParser,75,&yymsp[-1].minor);
#line 64 "parser.y"
{ yymsp[-1].minor.yy39 = 0; }
#line 3208 "parser.c"
}
        break;
      case 5: /* topdef ::= INDENT error DEDENT */
      case 7: /* topdef ::= KW_PACKAGE error NL */ yytestcase(yyruleno==7);
      case 10: /* topdef ::= KW_FROM error NL */ yytestcase(yyruleno==10);
      case 56: /* topdef ::= KW_PUBLISH error NL */ yytestcase(yyruleno==56);
      case 260: /* blockdef ::= INDENT error DEDENT */ yytestcase(yyruleno==260);
      case 262: /* blockdef ::= KW_DEF error NL */ yytestcase(yyruleno==262);
      case 268: /* blockdef ::= KW_FROM error NL */ yytestcase(yyruleno==268);
#line 65 "parser.y"
{ yymsp[-2].minor.yy39 = 0; }
#line 3220 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
        break;
      case 6: /* topdef ::= KW_PACKAGE NL */
#line 67 "parser.y"
{ yymsp[-1].minor.yy39 = 0; fail("keyword 'package' must be followed by a package name", yymsp[0].minor.yy0); }
#line 3226 "parser.c"
        break;
      case 8: /* topdef ::= KW_PACKAGE id NL */
#line 69 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_PACKAGE, yymsp[-2].minor.yy0, yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3231 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 9: /* topdef ::= KW_FROM NL */
      case 267: /* blockdef ::= KW_FROM NL */ yytestcase(yyruleno==267);
#line 71 "parser.y"
{ yymsp[-1].minor.yy39 = 0; fail("keyword 'from' must be followed by a package name", yymsp[0].minor.yy0); }
#line 3238 "parser.c"
        break;
      case 11: /* topdef ::= KW_FROM id NL */
#line 73 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_IMPORT, yymsp[-2].minor.yy0, yymsp[-1].minor.yy39, yymsp[0].minor.yy0); fail("keyword 'from' must be followed by a package name and 'import' or 'export'", yymsp[0].minor.yy0); }
#line 3243 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 12: /* topdef ::= KW_FROM id error NL */
#line 74 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_IMPORT, yymsp[-3].minor.yy0, yymsp[-2].minor.yy39, yymsp[0].minor.yy0); }
#line 3249 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
  yymsp[-3].minor.yy39 = yylhsminor.yy39;
        break;
      case 13: /* topdef ::= KW_FROM id KW_IMPORT P_HOLE NL */
      case 271: /* blockdef ::= KW_FROM id KW_IMPORT P_HOLE NL */ yytestcase(yyruleno==271);
#line 76 "parser.y"
{ yylhsminor.yy39 = 1;           add(CST_IMPORT, yymsp[-4].minor.yy0, yymsp[-3].minor.yy39, yymsp[0].minor.yy0); }
#line 3257 "parser.c"
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 14: /* topdef ::= KW_FROM id KW_IMPORT kind arity NL */
      case 272: /* blockdef ::= KW_FROM id KW_IMPORT kind arity NL */ yytestcase(yyruleno==272);
#line 77 "parser.y"
{ yylhsminor.yy39 = 1; pop(yymsp[-2].minor.yy39+yymsp[-1].minor.yy39); add(CST_IMPORT, yymsp[-5].minor.yy0, yymsp[-4].minor.yy39, yymsp[0].minor.yy0); fail("package import must be followed by a list of identifiers or operators", yymsp[0].minor.yy0); }
#line 3264 "parser.c"
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 15: /* topdef ::= KW_FROM id KW_IMPORT kind arity idopeqs NL */
      case 273: /* blockdef ::= KW_FROM id KW_IMPORT kind arity idopeqs NL */ yytestcase(yyruleno==273);
#line 78 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_IMPORT, yymsp[-6].minor.yy0, yymsp[-5].minor.yy39+yymsp[-3].minor.yy39+yymsp[-2].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3271 "parser.c"
  yymsp[-6].minor.yy39 = yylhsminor.yy39;
        break;
      case 16: /* topdef ::= KW_FROM id KW_EXPORT kind arity NL */
#line 80 "parser.y"
{ yymsp[-5].minor.yy39 = 0; pop(yymsp[-2].minor.yy39+yymsp[-1].minor.yy39+yymsp[-4].minor.yy39); fail("package export must be followed by a list of identifiers or operators", yymsp[0].minor.yy0); }
#line 3277 "parser.c"
        break;
      case 17: /* topdef ::= KW_FROM id KW_EXPORT kind arity idopeqs NL */
#line 81 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_EXPORT, yymsp[-6].minor.yy0, yymsp[-5].minor.yy39+yymsp[-3].minor.yy39+yymsp[-2].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3282 "parser.c"
  yymsp[-6].minor.yy39 = yylhsminor.yy39;
        break;
      case 18: /* kind ::= KW_DEF */
      case 19: /* kind ::= KW_TYPE */ yytestcase(yyruleno==19);
      case 20: /* kind ::= KW_TOPIC */ yytestcase(yyruleno==20);
#line 83 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_KIND, yymsp[0].minor.yy0); }
#line 3290 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 21: /* kind ::= */
      case 24: /* arity ::= */ yytestcase(yyruleno==24);
      case 45: /* global ::= */ yytestcase(yyruleno==45);
      case 47: /* export ::= */ yytestcase(yyruleno==47);
      case 182: /* mstr_cont ::= */ yytestcase(yyruleno==182);
      case 194: /* lstr_cont ::= */ yytestcase(yyruleno==194);
#line 86 "parser.y"
{ yymsp[1].minor.yy39 = 0; }
#line 3301 "parser.c"
        break;
      case 22: /* arity ::= KW_UNARY */
      case 23: /* arity ::= KW_BINARY */ yytestcase(yyruleno==23);
#line 88 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ARITY, yymsp[0].minor.yy0); }
#line 3307 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 25: /* idopeqs ::= error */
      case 68: /* data_elts ::= error */ yytestcase(yyruleno==68);
      case 79: /* tuple_elts ::= error */ yytestcase(yyruleno==79);
{  yy_destructor(yypParser,75,&yymsp[0].minor);
#line 92 "parser.y"
{ yymsp[0].minor.yy39 = 0;   }
#line 3316 "parser.c"
}
        break;
      case 26: /* idopeqs ::= idopeqs error */
#line 93 "parser.y"
{ yylhsminor.yy39 = yymsp[-1].minor.yy39;   }
#line 3322 "parser.c"
  yy_destructor(yypParser,75,&yymsp[0].minor);
  yymsp[-1].minor.yy39 = yylhsminor.yy39;
        break;
      case 28: /* idopeqs ::= idopeq */
      case 69: /* data_elts ::= type */ yytestcase(yyruleno==69);
      case 80: /* tuple_elts ::= tuple_elt */ yytestcase(yyruleno==80);
      case 96: /* target_pattern ::= pattern */ yytestcase(yyruleno==96);
      case 220: /* match1_cases ::= match1_case */ yytestcase(yyruleno==220);
      case 257: /* blockdefs ::= blockdef */ yytestcase(yyruleno==257);
#line 95 "parser.y"
{ yylhsminor.yy39 = yymsp[0].minor.yy39;   }
#line 3334 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 29: /* idopeq ::= idop P_EQUALS idop */
#line 97 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_IDEQ, yymsp[-2].minor.yy39+yymsp[0].minor.yy39); }
#line 3340 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 30: /* idopeq ::= idop */
#line 98 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_IDEQ, yymsp[0].minor.yy39); }
#line 3346 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 32: /* idop ::= OP_DOT */
      case 33: /* idop ::= OP_QUANT */ yytestcase(yyruleno==33);
      case 34: /* idop ::= OP_EXP */ yytestcase(yyruleno==34);
      case 35: /* idop ::= OP_MULDIV */ yytestcase(yyruleno==35);
      case 36: /* idop ::= OP_ADDSUB */ yytestcase(yyruleno==36);
      case 37: /* idop ::= OP_COMPARE */ yytestcase(yyruleno==37);
      case 38: /* idop ::= OP_INEQUAL */ yytestcase(yyruleno==38);
      case 39: /* idop ::= OP_AND */ yytestcase(yyruleno==39);
      case 40: /* idop ::= OP_OR */ yytestcase(yyruleno==40);
      case 41: /* idop ::= OP_DOLLAR */ yytestcase(yyruleno==41);
      case 42: /* idop ::= OP_LRARROW */ yytestcase(yyruleno==42);
      case 43: /* idop ::= OP_EQARROW */ yytestcase(yyruleno==43);
      case 44: /* idop ::= OP_COMMA */ yytestcase(yyruleno==44);
      case 99: /* expression_op_quant ::= OP_QUANT */ yytestcase(yyruleno==99);
      case 104: /* expression_op_exp ::= OP_EXP */ yytestcase(yyruleno==104);
      case 109: /* expression_op_muldiv ::= OP_MULDIV */ yytestcase(yyruleno==109);
      case 114: /* expression_op_addsub ::= OP_ADDSUB */ yytestcase(yyruleno==114);
      case 119: /* expression_op_compare ::= OP_COMPARE */ yytestcase(yyruleno==119);
      case 124: /* expression_op_inequal ::= OP_INEQUAL */ yytestcase(yyruleno==124);
      case 129: /* expression_op_and ::= OP_AND */ yytestcase(yyruleno==129);
      case 134: /* expression_op_or ::= OP_OR */ yytestcase(yyruleno==134);
      case 139: /* expression_op_dollar ::= OP_DOLLAR */ yytestcase(yyruleno==139);
      case 144: /* expression_op_colon ::= P_COLON */ yytestcase(yyruleno==144);
      case 149: /* expression_op_lrarrow ::= OP_LRARROW */ yytestcase(yyruleno==149);
      case 154: /* expression_op_eqarrow ::= OP_EQARROW */ yytestcase(yyruleno==154);
      case 159: /* expression_op_comma ::= OP_COMMA */ yytestcase(yyruleno==159);
      case 164: /* op_dot ::= OP_DOT */ yytestcase(yyruleno==164);
#line 101 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_OP, yymsp[0].minor.yy0); }
#line 3378 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 46: /* global ::= KW_GLOBAL */
#line 116 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_FLAG_GLOBAL, yymsp[0].minor.yy0); }
#line 3384 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 48: /* export ::= KW_EXPORT */
#line 118 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_FLAG_EXPORT, yymsp[0].minor.yy0); }
#line 3390 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 49: /* topdef ::= global export KW_TOPIC NL */
#line 120 "parser.y"
{ yylhsminor.yy39 = 0; pop(yymsp[-3].minor.yy39+yymsp[-2].minor.yy39); fail("keyword 'topic' must be followed by a topic name", yymsp[0].minor.yy0); }
#line 3396 "parser.c"
  yymsp[-3].minor.yy39 = yylhsminor.yy39;
        break;
      case 50: /* topdef ::= global export KW_TOPIC error NL */
      case 62: /* topdef ::= global export KW_DATA error NL */ yytestcase(yyruleno==62);
      case 73: /* topdef ::= global export KW_TUPLE error NL */ yytestcase(yyruleno==73);
      case 85: /* topdef ::= global export KW_DEF error NL */ yytestcase(yyruleno==85);
      case 91: /* topdef ::= global export KW_TARGET error NL */ yytestcase(yyruleno==91);
#line 121 "parser.y"
{ yylhsminor.yy39 = 0; pop(yymsp[-4].minor.yy39+yymsp[-3].minor.yy39); }
#line 3406 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 51: /* topdef ::= global export KW_TOPIC id NL */
#line 122 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_TOPIC, yymsp[-2].minor.yy0, yymsp[-4].minor.yy39+yymsp[-3].minor.yy39+yymsp[-1].minor.yy39+1, yymsp[0].minor.yy0); fail("topics must be followed by an ': type'", yymsp[0].minor.yy0); }
#line 3413 "parser.c"
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 52: /* topdef ::= global export KW_TOPIC id error NL */
#line 123 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_TOPIC, yymsp[-3].minor.yy0, yymsp[-5].minor.yy39+yymsp[-4].minor.yy39+yymsp[-2].minor.yy39+1, yymsp[0].minor.yy0); }
#line 3419 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 53: /* topdef ::= global export KW_TOPIC id P_COLON NL */
#line 124 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_TOPIC, yymsp[-3].minor.yy0, yymsp[-5].minor.yy39+yymsp[-4].minor.yy39+yymsp[-2].minor.yy39+1, yymsp[0].minor.yy0); fail("topics must be followed by an ': type'", yymsp[0].minor.yy0); }
#line 3426 "parser.c"
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 54: /* topdef ::= global export KW_TOPIC id P_COLON type NL */
#line 125 "parser.y"
{ yylhsminor.yy39 = 1;                    add(CST_TOPIC, yymsp[-4].minor.yy0, yymsp[-6].minor.yy39+yymsp[-5].minor.yy39+yymsp[-3].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3432 "parser.c"
  yymsp[-6].minor.yy39 = yylhsminor.yy39;
        break;
      case 55: /* topdef ::= KW_PUBLISH NL */
#line 127 "parser.y"
{ yymsp[-1].minor.yy39 = 0; fail("keyword 'publish' must be followed by a topic name", yymsp[0].minor.yy0); }
#line 3438 "parser.c"
        break;
      case 57: /* topdef ::= KW_PUBLISH id NL */
#line 129 "parser.y"
{ yymsp[-2].minor.yy39 = 0; pop(yymsp[-1].minor.yy39); fail("publishes must be followed by an '= expression'", yymsp[0].minor.yy0); }
#line 3443 "parser.c"
        break;
      case 58: /* topdef ::= KW_PUBLISH id error NL */
#line 130 "parser.y"
{ yymsp[-3].minor.yy39 = 0; pop(yymsp[-2].minor.yy39); }
#line 3448 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
        break;
      case 59: /* topdef ::= KW_PUBLISH id P_EQUALS NL */
#line 131 "parser.y"
{ yymsp[-3].minor.yy39 = 0; pop(yymsp[-2].minor.yy39); fail("publishes must be followed by an '= expression'", yymsp[0].minor.yy0); }
#line 3454 "parser.c"
        break;
      case 60: /* topdef ::= KW_PUBLISH id P_EQUALS block_opt NL */
#line 132 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_PUBLISH, yymsp[-4].minor.yy0, yymsp[-3].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3459 "parser.c"
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 61: /* topdef ::= global export KW_DATA NL */
#line 134 "parser.y"
{ yylhsminor.yy39 = 0; pop(yymsp[-3].minor.yy39+yymsp[-2].minor.yy39); fail("keyword 'data' must be followed by a type expression", yymsp[0].minor.yy0); }
#line 3465 "parser.c"
  yymsp[-3].minor.yy39 = yylhsminor.yy39;
        break;
      case 63: /* topdef ::= global export KW_DATA type NL */
#line 136 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_DATA, yymsp[-2].minor.yy0, yymsp[-4].minor.yy39+yymsp[-3].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); fail("data types must be followed by an '= constructor-cases+'", yymsp[0].minor.yy0); }
#line 3471 "parser.c"
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 64: /* topdef ::= global export KW_DATA type error NL */
#line 137 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_DATA, yymsp[-3].minor.yy0, yymsp[-5].minor.yy39+yymsp[-4].minor.yy39+yymsp[-2].minor.yy39, yymsp[0].minor.yy0); }
#line 3477 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 65: /* topdef ::= global export KW_DATA type P_EQUALS NL */
#line 138 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_DATA, yymsp[-3].minor.yy0, yymsp[-5].minor.yy39+yymsp[-4].minor.yy39+yymsp[-2].minor.yy39, yymsp[0].minor.yy0); fail("data types must be followed by an '= constructor-cases+'", yymsp[0].minor.yy0); }
#line 3484 "parser.c"
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 66: /* topdef ::= global export KW_DATA type P_EQUALS type NL */
#line 139 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_DATA, yymsp[-4].minor.yy0, yymsp[-6].minor.yy39+yymsp[-5].minor.yy39+yymsp[-3].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3490 "parser.c"
  yymsp[-6].minor.yy39 = yylhsminor.yy39;
        break;
      case 67: /* topdef ::= global export KW_DATA type P_EQUALS INDENT data_elts DEDENT */
#line 140 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_DATA, yymsp[-5].minor.yy0, yymsp[-7].minor.yy39+yymsp[-6].minor.yy39+yymsp[-4].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3496 "parser.c"
  yymsp[-7].minor.yy39 = yylhsminor.yy39;
        break;
      case 70: /* data_elts ::= data_elts NL error */
      case 81: /* tuple_elts ::= tuple_elts NL error */ yytestcase(yyruleno==81);
#line 144 "parser.y"
{ yylhsminor.yy39 = yymsp[-2].minor.yy39;   }
#line 3503 "parser.c"
  yy_destructor(yypParser,75,&yymsp[0].minor);
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 71: /* data_elts ::= data_elts NL type */
      case 82: /* tuple_elts ::= tuple_elts NL tuple_elt */ yytestcase(yyruleno==82);
      case 97: /* target_pattern ::= pattern P_BSLASH target_args */ yytestcase(yyruleno==97);
      case 219: /* match1_cases ::= match1_cases NL match1_case */ yytestcase(yyruleno==219);
      case 224: /* matchx_cases ::= matchx_cases NL matchx_case */ yytestcase(yyruleno==224);
#line 145 "parser.y"
{ yylhsminor.yy39 = yymsp[-2].minor.yy39+yymsp[0].minor.yy39; }
#line 3514 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 72: /* topdef ::= global export KW_TUPLE NL */
#line 147 "parser.y"
{ yylhsminor.yy39 = 0; pop(yymsp[-3].minor.yy39+yymsp[-2].minor.yy39); fail("keyword 'tuple' must be followed by a type expression", yymsp[0].minor.yy0); }
#line 3520 "parser.c"
  yymsp[-3].minor.yy39 = yylhsminor.yy39;
        break;
      case 74: /* topdef ::= global export KW_TUPLE type NL */
#line 149 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_TUPLE, yymsp[-2].minor.yy0, yymsp[-4].minor.yy39+yymsp[-3].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); fail("tuple types must be followed by an '= member-definitions+'", yymsp[0].minor.yy0); }
#line 3526 "parser.c"
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 75: /* topdef ::= global export KW_TUPLE type error NL */
#line 150 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_TUPLE, yymsp[-3].minor.yy0, yymsp[-5].minor.yy39+yymsp[-4].minor.yy39+yymsp[-2].minor.yy39, yymsp[0].minor.yy0); }
#line 3532 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 76: /* topdef ::= global export KW_TUPLE type P_EQUALS NL */
#line 151 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_TUPLE, yymsp[-3].minor.yy0, yymsp[-5].minor.yy39+yymsp[-4].minor.yy39+yymsp[-2].minor.yy39, yymsp[0].minor.yy0); fail("tuple types must be followed by an '= member-definitions+'", yymsp[0].minor.yy0); }
#line 3539 "parser.c"
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 77: /* topdef ::= global export KW_TUPLE type P_EQUALS error NL */
#line 152 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_TUPLE, yymsp[-4].minor.yy0, yymsp[-6].minor.yy39+yymsp[-5].minor.yy39+yymsp[-3].minor.yy39, yymsp[0].minor.yy0); }
#line 3545 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
  yymsp[-6].minor.yy39 = yylhsminor.yy39;
        break;
      case 78: /* topdef ::= global export KW_TUPLE type P_EQUALS INDENT tuple_elts DEDENT */
#line 153 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_TUPLE, yymsp[-5].minor.yy0, yymsp[-7].minor.yy39+yymsp[-6].minor.yy39+yymsp[-4].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3552 "parser.c"
  yymsp[-7].minor.yy39 = yylhsminor.yy39;
        break;
      case 83: /* tuple_elt ::= global export type */
#line 160 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_TUPLE_ELT, yymsp[-2].minor.yy39+yymsp[-1].minor.yy39+yymsp[0].minor.yy39); }
#line 3558 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 84: /* topdef ::= global export KW_DEF NL */
#line 162 "parser.y"
{ yylhsminor.yy39 = 0; pop(yymsp[-3].minor.yy39+yymsp[-2].minor.yy39); fail("keyword 'def' must be followed by a pattern", yymsp[0].minor.yy0); }
#line 3564 "parser.c"
  yymsp[-3].minor.yy39 = yylhsminor.yy39;
        break;
      case 86: /* topdef ::= global export KW_DEF pattern NL */
#line 164 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_DEF, yymsp[-2].minor.yy0, yymsp[-4].minor.yy39+yymsp[-3].minor.yy39+yymsp[-1].minor.yy39+1, yymsp[0].minor.yy0); fail("definitions must be followed by an '= expression'", yymsp[0].minor.yy0); }
#line 3570 "parser.c"
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 87: /* topdef ::= global export KW_DEF pattern error NL */
#line 165 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_DEF, yymsp[-3].minor.yy0, yymsp[-5].minor.yy39+yymsp[-4].minor.yy39+yymsp[-2].minor.yy39+1, yymsp[0].minor.yy0); }
#line 3576 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 88: /* topdef ::= global export KW_DEF pattern P_EQUALS NL */
#line 166 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_DEF, yymsp[-3].minor.yy0, yymsp[-5].minor.yy39+yymsp[-4].minor.yy39+yymsp[-2].minor.yy39+1, yymsp[0].minor.yy0); fail("definitions must be followed by an '= expression'", yymsp[0].minor.yy0); }
#line 3583 "parser.c"
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 89: /* topdef ::= global export KW_DEF pattern P_EQUALS block_opt NL */
#line 167 "parser.y"
{ yylhsminor.yy39 = 1;                    add(CST_DEF, yymsp[-4].minor.yy0, yymsp[-6].minor.yy39+yymsp[-5].minor.yy39+yymsp[-3].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3589 "parser.c"
  yymsp[-6].minor.yy39 = yylhsminor.yy39;
        break;
      case 90: /* topdef ::= global export KW_TARGET NL */
#line 169 "parser.y"
{ yylhsminor.yy39 = 0; pop(yymsp[-3].minor.yy39+yymsp[-2].minor.yy39); fail("keyword 'target' must be followed by a pattern", yymsp[0].minor.yy0); }
#line 3595 "parser.c"
  yymsp[-3].minor.yy39 = yylhsminor.yy39;
        break;
      case 92: /* topdef ::= global export KW_TARGET target_pattern NL */
#line 171 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_TARGET, yymsp[-2].minor.yy0, yymsp[-4].minor.yy39+yymsp[-3].minor.yy39+yymsp[-1].minor.yy39+1, yymsp[0].minor.yy0); fail("targets must be followed by an '= expression'", yymsp[0].minor.yy0); }
#line 3601 "parser.c"
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 93: /* topdef ::= global export KW_TARGET target_pattern error NL */
#line 172 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_TARGET, yymsp[-3].minor.yy0, yymsp[-5].minor.yy39+yymsp[-4].minor.yy39+yymsp[-2].minor.yy39+1, yymsp[0].minor.yy0); }
#line 3607 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 94: /* topdef ::= global export KW_TARGET target_pattern P_EQUALS NL */
#line 173 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_TARGET, yymsp[-3].minor.yy0, yymsp[-5].minor.yy39+yymsp[-4].minor.yy39+yymsp[-2].minor.yy39+1, yymsp[0].minor.yy0); fail("targets must be followed by an '= expression'", yymsp[0].minor.yy0); }
#line 3614 "parser.c"
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 95: /* topdef ::= global export KW_TARGET target_pattern P_EQUALS block_opt NL */
#line 174 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_TARGET, yymsp[-4].minor.yy0, yymsp[-6].minor.yy39+yymsp[-5].minor.yy39+yymsp[-3].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3620 "parser.c"
  yymsp[-6].minor.yy39 = yylhsminor.yy39;
        break;
      case 98: /* target_args ::= pattern_terms */
#line 179 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_TARGET_ARGS, yymsp[0].minor.yy39); }
#line 3626 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 100: /* expression_binary_quant ::= expression_binary_quant expression_op_quant expression_unary_quant */
      case 105: /* expression_binary_exp ::= expression_unary_exp expression_op_exp expression_binary_exp */ yytestcase(yyruleno==105);
      case 110: /* expression_binary_muldiv ::= expression_binary_muldiv expression_op_muldiv expression_unary_muldiv */ yytestcase(yyruleno==110);
      case 115: /* expression_binary_addsub ::= expression_binary_addsub expression_op_addsub expression_unary_addsub */ yytestcase(yyruleno==115);
      case 120: /* expression_binary_compare ::= expression_binary_compare expression_op_compare expression_unary_compare */ yytestcase(yyruleno==120);
      case 125: /* expression_binary_inequal ::= expression_binary_inequal expression_op_inequal expression_unary_inequal */ yytestcase(yyruleno==125);
      case 130: /* expression_binary_and ::= expression_binary_and expression_op_and expression_unary_and */ yytestcase(yyruleno==130);
      case 135: /* expression_binary_or ::= expression_binary_or expression_op_or expression_unary_or */ yytestcase(yyruleno==135);
      case 140: /* expression_binary_dollar ::= expression_unary_dollar expression_op_dollar expression_binary_dollar */ yytestcase(yyruleno==140);
      case 145: /* expression_binary_colon ::= expression_unary_colon expression_op_colon expression_binary_colon */ yytestcase(yyruleno==145);
      case 150: /* expression_binary_lrarrow ::= expression_binary_lrarrow expression_op_lrarrow expression_unary_lrarrow */ yytestcase(yyruleno==150);
      case 155: /* expression_binary_eqarrow ::= expression_binary_eqarrow expression_op_eqarrow expression_unary_eqarrow */ yytestcase(yyruleno==155);
      case 160: /* expression_binary_comma ::= expression_unary_comma expression_op_comma expression_binary_comma */ yytestcase(yyruleno==160);
      case 165: /* expression_term ::= expression_term op_dot expression_nodot */ yytestcase(yyruleno==165);
#line 190 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_BINARY, yymsp[-2].minor.yy39+yymsp[-1].minor.yy39+yymsp[0].minor.yy39); }
#line 3645 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 101: /* expression_binary_quant ::= expression_unary_quant */
      case 103: /* expression_unary_quant ::= expression_binary_app */ yytestcase(yyruleno==103);
      case 106: /* expression_binary_exp ::= expression_unary_exp */ yytestcase(yyruleno==106);
      case 108: /* expression_unary_exp ::= expression_binary_quant */ yytestcase(yyruleno==108);
      case 111: /* expression_binary_muldiv ::= expression_unary_muldiv */ yytestcase(yyruleno==111);
      case 113: /* expression_unary_muldiv ::= expression_binary_exp */ yytestcase(yyruleno==113);
      case 116: /* expression_binary_addsub ::= expression_unary_addsub */ yytestcase(yyruleno==116);
      case 118: /* expression_unary_addsub ::= expression_binary_muldiv */ yytestcase(yyruleno==118);
      case 121: /* expression_binary_compare ::= expression_unary_compare */ yytestcase(yyruleno==121);
      case 123: /* expression_unary_compare ::= expression_binary_addsub */ yytestcase(yyruleno==123);
      case 126: /* expression_binary_inequal ::= expression_unary_inequal */ yytestcase(yyruleno==126);
      case 128: /* expression_unary_inequal ::= expression_binary_compare */ yytestcase(yyruleno==128);
      case 131: /* expression_binary_and ::= expression_unary_and */ yytestcase(yyruleno==131);
      case 133: /* expression_unary_and ::= expression_binary_inequal */ yytestcase(yyruleno==133);
      case 136: /* expression_binary_or ::= expression_unary_or */ yytestcase(yyruleno==136);
      case 138: /* expression_unary_or ::= expression_binary_and */ yytestcase(yyruleno==138);
      case 141: /* expression_binary_dollar ::= expression_unary_dollar */ yytestcase(yyruleno==141);
      case 142: /* expression_unary_dollar ::= expression_binary_or */ yytestcase(yyruleno==142);
      case 146: /* expression_binary_colon ::= expression_unary_colon */ yytestcase(yyruleno==146);
      case 148: /* expression_unary_colon ::= expression_binary_dollar */ yytestcase(yyruleno==148);
      case 151: /* expression_binary_lrarrow ::= expression_unary_lrarrow */ yytestcase(yyruleno==151);
      case 153: /* expression_unary_lrarrow ::= expression_binary_colon */ yytestcase(yyruleno==153);
      case 156: /* expression_binary_eqarrow ::= expression_unary_eqarrow */ yytestcase(yyruleno==156);
      case 158: /* expression_unary_eqarrow ::= expression_binary_lrarrow */ yytestcase(yyruleno==158);
      case 161: /* expression_binary_comma ::= expression_unary_comma */ yytestcase(yyruleno==161);
      case 162: /* expression_unary_comma ::= expression_binary_eqarrow */ yytestcase(yyruleno==162);
      case 166: /* expression_term ::= expression_nodot */ yytestcase(yyruleno==166);
      case 173: /* interpolated_string ::= expression */ yytestcase(yyruleno==173);
      case 178: /* expression_nodot ::= mstr_single */ yytestcase(yyruleno==178);
      case 180: /* interpolated_mstring ::= expression */ yytestcase(yyruleno==180);
      case 190: /* expression_nodot ::= lstr_single */ yytestcase(yyruleno==190);
      case 192: /* interpolated_lstring ::= expression */ yytestcase(yyruleno==192);
      case 204: /* interpolated_regexp ::= expression */ yytestcase(yyruleno==204);
      case 213: /* expression_binary_app ::= expression_term */ yytestcase(yyruleno==213);
      case 225: /* matchx_cases ::= matchx_case */ yytestcase(yyruleno==225);
      case 228: /* pattern_terms ::= pattern_term */ yytestcase(yyruleno==228);
      case 231: /* expression ::= expression_binary_comma */ yytestcase(yyruleno==231);
      case 234: /* pattern ::= expression */ yytestcase(yyruleno==234);
      case 235: /* type ::= expression */ yytestcase(yyruleno==235);
      case 236: /* pattern_term ::= expression_term */ yytestcase(yyruleno==236);
      case 237: /* block_opt ::= expression */ yytestcase(yyruleno==237);
      case 239: /* block ::= body */ yytestcase(yyruleno==239);
#line 191 "parser.y"
{ yylhsminor.yy39 = yymsp[0].minor.yy39; }
#line 3692 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 102: /* expression_unary_quant ::= expression_op_quant expression_unary_quant */
      case 107: /* expression_unary_exp ::= expression_op_exp expression_unary_exp */ yytestcase(yyruleno==107);
      case 112: /* expression_unary_muldiv ::= expression_op_muldiv expression_unary_muldiv */ yytestcase(yyruleno==112);
      case 117: /* expression_unary_addsub ::= expression_op_addsub expression_unary_addsub */ yytestcase(yyruleno==117);
      case 122: /* expression_unary_compare ::= expression_op_compare expression_unary_compare */ yytestcase(yyruleno==122);
      case 127: /* expression_unary_inequal ::= expression_op_inequal expression_unary_inequal */ yytestcase(yyruleno==127);
      case 132: /* expression_unary_and ::= expression_op_and expression_unary_and */ yytestcase(yyruleno==132);
      case 137: /* expression_unary_or ::= expression_op_or expression_unary_or */ yytestcase(yyruleno==137);
      case 143: /* expression_unary_dollar ::= expression_unary_dollar expression_op_dollar */ yytestcase(yyruleno==143);
      case 147: /* expression_unary_colon ::= expression_op_colon expression_unary_colon */ yytestcase(yyruleno==147);
      case 152: /* expression_unary_lrarrow ::= expression_op_lrarrow expression_unary_lrarrow */ yytestcase(yyruleno==152);
      case 157: /* expression_unary_eqarrow ::= expression_op_eqarrow expression_unary_eqarrow */ yytestcase(yyruleno==157);
      case 163: /* expression_unary_comma ::= expression_unary_comma expression_op_comma */ yytestcase(yyruleno==163);
#line 192 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_UNARY,  yymsp[-1].minor.yy39+yymsp[0].minor.yy39); }
#line 3710 "parser.c"
  yymsp[-1].minor.yy39 = yylhsminor.yy39;
        break;
      case 168: /* expression_nodot ::= P_POPEN block_opt P_PCLOSE */
#line 263 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_PAREN, yymsp[-2].minor.yy0, yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3716 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 169: /* expression_nodot ::= P_HOLE */
#line 265 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_HOLE, yymsp[0].minor.yy0); }
#line 3722 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 170: /* expression_nodot ::= STR_RAW */
      case 171: /* expression_nodot ::= STR_SINGLE */ yytestcase(yyruleno==171);
      case 175: /* str_mid ::= STR_MID */ yytestcase(yyruleno==175);
      case 176: /* str_open ::= STR_OPEN */ yytestcase(yyruleno==176);
      case 177: /* str_close ::= STR_CLOSE */ yytestcase(yyruleno==177);
      case 202: /* expression_nodot ::= REG_SINGLE */ yytestcase(yyruleno==202);
      case 206: /* reg_mid ::= REG_MID */ yytestcase(yyruleno==206);
      case 207: /* reg_open ::= REG_OPEN */ yytestcase(yyruleno==207);
      case 208: /* reg_close ::= REG_CLOSE */ yytestcase(yyruleno==208);
      case 209: /* expression_nodot ::= DOUBLE */ yytestcase(yyruleno==209);
      case 210: /* expression_nodot ::= INTEGER */ yytestcase(yyruleno==210);
      case 211: /* expression_nodot ::= KW_HERE */ yytestcase(yyruleno==211);
      case 216: /* prim_literal ::= STR_SINGLE */ yytestcase(yyruleno==216);
#line 266 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_LITERAL, yymsp[0].minor.yy0); }
#line 3740 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 172: /* expression_nodot ::= str_open interpolated_string str_close */
      case 179: /* expression_nodot ::= mstr_open interpolated_mstring mstr_close */ yytestcase(yyruleno==179);
      case 191: /* expression_nodot ::= lstr_open interpolated_lstring lstr_close */ yytestcase(yyruleno==191);
      case 203: /* expression_nodot ::= reg_open interpolated_regexp reg_close */ yytestcase(yyruleno==203);
#line 269 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_INTERPOLATE, yymsp[-2].minor.yy39+yymsp[-1].minor.yy39+yymsp[0].minor.yy39); }
#line 3749 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 174: /* interpolated_string ::= interpolated_string str_mid expression */
      case 181: /* interpolated_mstring ::= interpolated_mstring mstr_mid expression */ yytestcase(yyruleno==181);
      case 193: /* interpolated_lstring ::= interpolated_lstring lstr_mid expression */ yytestcase(yyruleno==193);
      case 205: /* interpolated_regexp ::= interpolated_regexp reg_mid expression */ yytestcase(yyruleno==205);
#line 272 "parser.y"
{ yylhsminor.yy39 = yymsp[-2].minor.yy39+yymsp[-1].minor.yy39+yymsp[0].minor.yy39; }
#line 3758 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 183: /* mstr_cont ::= mstr_cont MSTR_CONTINUE */
      case 184: /* mstr_cont ::= mstr_cont NL */ yytestcase(yyruleno==184);
{  yy_destructor(yypParser,149,&yymsp[-1].minor);
#line 285 "parser.y"
{ yymsp[-1].minor.yy39 = 0; }
#line 3766 "parser.c"
}
        break;
      case 185: /* mstr_single ::= MSTR_BEGIN mstr_cont MSTR_END */
      case 186: /* mstr_open ::= MSTR_BEGIN mstr_cont MSTR_PAUSE */ yytestcase(yyruleno==186);
      case 188: /* mstr_mid ::= MSTR_RESUME mstr_cont MSTR_PAUSE */ yytestcase(yyruleno==188);
      case 189: /* mstr_close ::= MSTR_RESUME mstr_cont MSTR_END */ yytestcase(yyruleno==189);
#line 288 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_LITERAL, yymsp[-2].minor.yy0, 0, yymsp[0].minor.yy0); }
#line 3775 "parser.c"
  yy_destructor(yypParser,149,&yymsp[-1].minor);
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 187: /* mstr_mid ::= MSTR_MID */
      case 199: /* lstr_mid ::= LSTR_MID */ yytestcase(yyruleno==199);
#line 290 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_LITERAL, yymsp[0].minor.yy0);       }
#line 3783 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 195: /* lstr_cont ::= lstr_cont LSTR_CONTINUE */
      case 196: /* lstr_cont ::= lstr_cont NL */ yytestcase(yyruleno==196);
{  yy_destructor(yypParser,155,&yymsp[-1].minor);
#line 301 "parser.y"
{ yymsp[-1].minor.yy39 = 0; }
#line 3791 "parser.c"
}
        break;
      case 197: /* lstr_single ::= LSTR_BEGIN lstr_cont LSTR_END */
      case 198: /* lstr_open ::= LSTR_BEGIN lstr_cont LSTR_PAUSE */ yytestcase(yyruleno==198);
      case 200: /* lstr_mid ::= LSTR_RESUME lstr_cont LSTR_PAUSE */ yytestcase(yyruleno==200);
      case 201: /* lstr_close ::= LSTR_RESUME lstr_cont LSTR_END */ yytestcase(yyruleno==201);
#line 304 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_LITERAL, yymsp[-2].minor.yy0, 0, yymsp[0].minor.yy0); }
#line 3800 "parser.c"
  yy_destructor(yypParser,155,&yymsp[-1].minor);
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 212: /* expression_binary_app ::= expression_binary_app expression_term */
#line 324 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_APP, yymsp[-1].minor.yy39+yymsp[0].minor.yy39); }
#line 3807 "parser.c"
  yymsp[-1].minor.yy39 = yylhsminor.yy39;
        break;
      case 214: /* expression_binary_app ::= KW_SUBSCRIBE id */
#line 327 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_SUBSCRIBE, yymsp[-1].minor.yy0, yymsp[0].minor.yy39); }
#line 3813 "parser.c"
  yymsp[-1].minor.yy39 = yylhsminor.yy39;
        break;
      case 215: /* expression_binary_app ::= KW_PRIM prim_literal */
#line 329 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_PRIM, yymsp[-1].minor.yy0, yymsp[0].minor.yy39); }
#line 3819 "parser.c"
  yymsp[-1].minor.yy39 = yylhsminor.yy39;
        break;
      case 217: /* expression_binary_app ::= KW_MATCH expression_term INDENT match1_cases DEDENT */
      case 218: /* expression_binary_app ::= KW_MATCH match_terms INDENT matchx_cases DEDENT */ yytestcase(yyruleno==218);
#line 333 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_MATCH, yymsp[-4].minor.yy0, yymsp[-3].minor.yy39+yymsp[-1].minor.yy39); }
#line 3826 "parser.c"
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 221: /* match1_case ::= pattern guard block_opt */
      case 226: /* matchx_case ::= pattern_terms guard block_opt */ yytestcase(yyruleno==226);
#line 338 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_CASE, yymsp[-2].minor.yy39+yymsp[-1].minor.yy39+yymsp[0].minor.yy39); }
#line 3833 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 229: /* guard ::= P_EQUALS */
#line 350 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_GUARD, yymsp[0].minor.yy0); }
#line 3839 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 230: /* guard ::= KW_IF expression P_EQUALS */
#line 351 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_GUARD, yymsp[-2].minor.yy0, yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3845 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 232: /* expression ::= P_BSLASH pattern_term expression */
#line 355 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_LAMBDA, yymsp[-2].minor.yy0, yymsp[-1].minor.yy39+yymsp[0].minor.yy39); }
#line 3851 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 233: /* expression ::= KW_IF block_opt KW_THEN block_opt KW_ELSE block_opt */
#line 357 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_IF, yymsp[-5].minor.yy0, yymsp[-4].minor.yy39+yymsp[-2].minor.yy39+yymsp[0].minor.yy39); }
#line 3857 "parser.c"
  yymsp[-5].minor.yy39 = yylhsminor.yy39;
        break;
      case 238: /* block_opt ::= INDENT block */
      case 250: /* reqbody ::= P_EQUALS block_opt */ yytestcase(yyruleno==250);
#line 364 "parser.y"
{ yymsp[-1].minor.yy39 = yymsp[0].minor.yy39; }
#line 3864 "parser.c"
        break;
      case 240: /* block ::= blockdefs body */
#line 367 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_BLOCK, yymsp[-1].minor.yy39+yymsp[0].minor.yy39); }
#line 3869 "parser.c"
  yymsp[-1].minor.yy39 = yylhsminor.yy39;
        break;
      case 241: /* body ::= error DEDENT */
      case 255: /* reqelsebody ::= error NL */ yytestcase(yyruleno==255);
{  yy_destructor(yypParser,75,&yymsp[-1].minor);
#line 369 "parser.y"
{ yymsp[-1].minor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); }
#line 3877 "parser.c"
}
        break;
      case 242: /* body ::= expression DEDENT */
      case 256: /* reqelsebody ::= block_opt NL */ yytestcase(yyruleno==256);
#line 370 "parser.y"
{ yylhsminor.yy39 = yymsp[-1].minor.yy39; }
#line 3884 "parser.c"
  yymsp[-1].minor.yy39 = yylhsminor.yy39;
        break;
      case 243: /* body ::= KW_REQUIRE reqbad block */
#line 372 "parser.y"
{ yymsp[-2].minor.yy39 = yymsp[0].minor.yy39; }
#line 3890 "parser.c"
  yy_destructor(yypParser,171,&yymsp[-1].minor);
        break;
      case 244: /* body ::= KW_REQUIRE pattern reqbody reqelse block */
#line 373 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_REQUIRE, yymsp[-4].minor.yy0, yymsp[-3].minor.yy39+yymsp[-2].minor.yy39+yymsp[-1].minor.yy39+yymsp[0].minor.yy39); }
#line 3896 "parser.c"
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 245: /* reqbad ::= reqelse */
{  yy_destructor(yypParser,173,&yymsp[0].minor);
#line 376 "parser.y"
{ yymsp[0].minor.yy39 = 0; fail("keyword 'require' must be followed by a pattern", yyLookaheadToken); }
#line 3903 "parser.c"
}
        break;
      case 246: /* reqbad ::= error reqelse */
{  yy_destructor(yypParser,75,&yymsp[-1].minor);
#line 377 "parser.y"
{ yymsp[-1].minor.yy39 = 0; }
#line 3910 "parser.c"
  yy_destructor(yypParser,173,&yymsp[0].minor);
}
        break;
      case 247: /* reqbody ::= */
#line 379 "parser.y"
{ yymsp[1].minor.yy39 = 1; add(CST_ERROR, yyLookaheadToken); fail("requirements must be followed by an '= expression", yyLookaheadToken); }
#line 3917 "parser.c"
        break;
      case 248: /* reqbody ::= error */
{  yy_destructor(yypParser,75,&yymsp[0].minor);
#line 380 "parser.y"
{ yymsp[0].minor.yy39 = 1; add(CST_ERROR, yyLookaheadToken); }
#line 3923 "parser.c"
}
        break;
      case 249: /* reqbody ::= P_EQUALS */
#line 381 "parser.y"
{ yymsp[0].minor.yy39 = 1; add(CST_ERROR, yyLookaheadToken); fail("requirements must be followed by an '= expression", yyLookaheadToken); }
#line 3929 "parser.c"
        break;
      case 251: /* reqelse ::= NL KW_ELSE reqelsebody */
#line 386 "parser.y"
{ yymsp[-2].minor.yy39 = 1; add(CST_REQ_ELSE, yymsp[0].minor.yy39); }
#line 3934 "parser.c"
        break;
      case 252: /* reqelse ::= KW_ELSE reqelsebody */
#line 387 "parser.y"
{ yymsp[-1].minor.yy39 = 1; add(CST_REQ_ELSE, yymsp[0].minor.yy39); }
#line 3939 "parser.c"
        break;
      case 253: /* reqelse ::= NL */
#line 388 "parser.y"
{ yymsp[0].minor.yy39 = 0; }
#line 3944 "parser.c"
        break;
      case 254: /* reqelsebody ::= NL */
#line 390 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); fail("keyword 'else' must be followed by an expression", yymsp[0].minor.yy0); }
#line 3949 "parser.c"
  yymsp[0].minor.yy39 = yylhsminor.yy39;
        break;
      case 261: /* blockdef ::= KW_DEF NL */
#line 400 "parser.y"
{ yymsp[-1].minor.yy39 = 0; fail("keyword 'def' must be followed by a pattern", yymsp[0].minor.yy0); }
#line 3955 "parser.c"
        break;
      case 263: /* blockdef ::= KW_DEF pattern NL */
#line 402 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_DEF, yymsp[-2].minor.yy0, yymsp[-1].minor.yy39+1, yymsp[0].minor.yy0); fail("definitions must be followed by an '= expression'", yymsp[0].minor.yy0); }
#line 3960 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 264: /* blockdef ::= KW_DEF pattern error NL */
#line 403 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_DEF, yymsp[-3].minor.yy0, yymsp[-2].minor.yy39+1, yymsp[0].minor.yy0); }
#line 3966 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
  yymsp[-3].minor.yy39 = yylhsminor.yy39;
        break;
      case 265: /* blockdef ::= KW_DEF pattern P_EQUALS NL */
#line 404 "parser.y"
{ yylhsminor.yy39 = 1; add(CST_ERROR, yymsp[0].minor.yy0); add(CST_DEF, yymsp[-3].minor.yy0, yymsp[-2].minor.yy39+1, yymsp[0].minor.yy0); fail("definitions must be followed by an '= expression'", yymsp[0].minor.yy0); }
#line 3973 "parser.c"
  yymsp[-3].minor.yy39 = yylhsminor.yy39;
        break;
      case 266: /* blockdef ::= KW_DEF pattern P_EQUALS block_opt NL */
#line 405 "parser.y"
{ yylhsminor.yy39 = 1;                    add(CST_DEF, yymsp[-4].minor.yy0, yymsp[-3].minor.yy39+yymsp[-1].minor.yy39, yymsp[0].minor.yy0); }
#line 3979 "parser.c"
  yymsp[-4].minor.yy39 = yylhsminor.yy39;
        break;
      case 269: /* blockdef ::= KW_FROM id NL */
#line 409 "parser.y"
{ yylhsminor.yy39 = 1;           add(CST_IMPORT, yymsp[-2].minor.yy0, yymsp[-1].minor.yy39, yymsp[0].minor.yy0); fail("keyword 'from' must be followed by a package name and 'import'", yymsp[0].minor.yy0); }
#line 3985 "parser.c"
  yymsp[-2].minor.yy39 = yylhsminor.yy39;
        break;
      case 270: /* blockdef ::= KW_FROM id error NL */
#line 410 "parser.y"
{ yylhsminor.yy39 = 1;           add(CST_IMPORT, yymsp[-3].minor.yy0, yymsp[-2].minor.yy39, yymsp[0].minor.yy0); }
#line 3991 "parser.c"
  yy_destructor(yypParser,75,&yymsp[-1].minor);
  yymsp[-3].minor.yy39 = yylhsminor.yy39;
        break;
      default:
        break;
/********** End reduce actions ************************************************/
  };
  assert( yyruleno<sizeof(yyRuleInfoLhs)/sizeof(yyRuleInfoLhs[0]) );
  yygoto = yyRuleInfoLhs[yyruleno];
  yysize = yyRuleInfoNRhs[yyruleno];
  yyact = yy_find_reduce_action(yymsp[yysize].stateno,(YYCODETYPE)yygoto);

  /* There are no SHIFTREDUCE actions on nonterminals because the table
  ** generator has simplified them to pure REDUCE actions. */
  assert( !(yyact>YY_MAX_SHIFT && yyact<=YY_MAX_SHIFTREDUCE) );

  /* It is not possible for a REDUCE to be followed by an error */
  assert( yyact!=YY_ERROR_ACTION );

  yymsp += yysize+1;
  yypParser->yytos = yymsp;
  yymsp->stateno = (YYACTIONTYPE)yyact;
  yymsp->major = (YYCODETYPE)yygoto;
  yyTraceShift(yypParser, yyact, "... then shift");
  return yyact;
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH
  ParseCTX_FETCH
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/
#line 487 "parser.y"

  TokenInfo ti;
  ti.start = pinfo.fcontent->start;
  ti.end = pinfo.fcontent->end;
  pinfo.reporter->reportError(ti.location(*pinfo.fcontent), "Parser was unable to proceed");
#line 4043 "parser.c"
/************ End %parse_failure code *****************************************/
  ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseCTX_STORE
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  ParseTOKENTYPE yyminor         /* The minor type of the error token */
){
  ParseARG_FETCH
  ParseCTX_FETCH
#define TOKEN yyminor
/************ Begin %syntax_error code ****************************************/
#line 460 "parser.y"
 
  const char *example = symbolExample(yymajor);
  int example_len = strlen(example);
  int token_len = yyminor.size();
  std::stringstream ss, tokens;
  ss << "syntax error; found ";
  if (token_len > 0) ss << yyminor << ", ";
  bool same =
    token_len == example_len &&
    memcmp(yyminor.start, example, example_len) == 0;
  if (!same || token_len == 0) ss << "a " << example << ", ";
  tokens << "but was expecting one of:\n";
  int num = 0;
  for (int i = 1; i < YYNTOKEN; ++i) {
    if (ParseShifts(yypParser, i)) {
      ++num;
      tokens << "    " << symbolExample(i);
    }
  }
  if (num) {
    ss << tokens.rdbuf();
  } else {
    ss << "which is inappropriate here";
  }
  pinfo.reporter->reportError(yyminor.location(*pinfo.fcontent), ss.str());
#line 4088 "parser.c"
/************ End %syntax_error code ******************************************/
  ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseCTX_STORE
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH
  ParseCTX_FETCH
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  assert( yypParser->yytos==yypParser->yystack );
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/
/*********** End %parse_accept code *******************************************/
  ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseCTX_STORE
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  YYACTIONTYPE yyact;   /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser = (yyParser*)yyp;  /* The parser */
  ParseCTX_FETCH
  ParseARG_STORE

  assert( yypParser->yytos!=0 );
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif

  yyact = yypParser->yytos->stateno;
#ifndef NDEBUG
  if( yyTraceFILE ){
    if( yyact < YY_MIN_REDUCE ){
      fprintf(yyTraceFILE,"%sInput '%s' in state %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact);
    }else{
      fprintf(yyTraceFILE,"%sInput '%s' with pending reduce %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact-YY_MIN_REDUCE);
    }
  }
#endif

  while(1){ /* Exit by "break" */
    assert( yypParser->yytos>=yypParser->yystack );
    assert( yyact==yypParser->yytos->stateno );
    yyact = yy_find_shift_action((YYCODETYPE)yymajor,yyact);
    if( yyact >= YY_MIN_REDUCE ){
      unsigned int yyruleno = yyact - YY_MIN_REDUCE; /* Reduce by this rule */
      assert( yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) );
#ifndef NDEBUG
      if( yyTraceFILE ){
        int yysize = yyRuleInfoNRhs[yyruleno];
        if( yysize ){
          fprintf(yyTraceFILE, "%sReduce %d [%s]%s, pop back to state %d.\n",
            yyTracePrompt,
            yyruleno, yyRuleName[yyruleno],
            yyruleno<YYNRULE_WITH_ACTION ? "" : " without external action",
            yypParser->yytos[yysize].stateno);
        }else{
          fprintf(yyTraceFILE, "%sReduce %d [%s]%s.\n",
            yyTracePrompt, yyruleno, yyRuleName[yyruleno],
            yyruleno<YYNRULE_WITH_ACTION ? "" : " without external action");
        }
      }
#endif /* NDEBUG */

      /* Check that the stack is large enough to grow by a single entry
      ** if the RHS of the rule is empty.  This ensures that there is room
      ** enough on the stack to push the LHS value */
      if( yyRuleInfoNRhs[yyruleno]==0 ){
#ifdef YYTRACKMAXSTACKDEPTH
        if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
          yypParser->yyhwm++;
          assert( yypParser->yyhwm ==
                  (int)(yypParser->yytos - yypParser->yystack));
        }
#endif
#if YYSTACKDEPTH>0 
        if( yypParser->yytos>=yypParser->yystackEnd ){
          yyStackOverflow(yypParser);
          break;
        }
#else
        if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz-1] ){
          if( yyGrowStack(yypParser) ){
            yyStackOverflow(yypParser);
            break;
          }
        }
#endif
      }
      yyact = yy_reduce(yypParser,yyruleno,yymajor,yyminor ParseCTX_PARAM);
    }else if( yyact <= YY_MAX_SHIFTREDUCE ){
      yy_shift(yypParser,yyact,(YYCODETYPE)yymajor,yyminor);
#ifndef YYNOERRORRECOVERY
      yypParser->yyerrcnt--;
#endif
      break;
    }else if( yyact==YY_ACCEPT_ACTION ){
      yypParser->yytos--;
      yy_accept(yypParser);
      return;
    }else{
      assert( yyact == YY_ERROR_ACTION );
      yyminorunion.yy0 = yyminor;
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminor);
      }
      yymx = yypParser->yytos->major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor, &yyminorunion);
        yymajor = YYNOCODE;
      }else{
        while( yypParser->yytos > yypParser->yystack ){
          yyact = yy_find_reduce_action(yypParser->yytos->stateno,
                                        YYERRORSYMBOL);
          if( yyact<=YY_MAX_SHIFTREDUCE ) break;
          if( yyact>=YY_MIN_REDUCE && yyRuleInfoNRhs[yyact-YY_MIN_REDUCE] ){
            yyact -= YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
            break;
          }
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yytos <= yypParser->yystack || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
          yypParser->yyerrcnt = -1;
#endif
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
      if( yymajor==YYNOCODE ) break;
      yyact = yypParser->yytos->stateno;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor, yyminor);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      break;
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor, yyminor);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
        yypParser->yyerrcnt = -1;
#endif
      }
      break;
#endif
    }
  }
#ifndef NDEBUG
  if( yyTraceFILE ){
    yyStackEntry *i;
    char cDiv = '[';
    fprintf(yyTraceFILE,"%sReturn. Stack=",yyTracePrompt);
    for(i=&yypParser->yystack[1]; i<=yypParser->yytos; i++){
      fprintf(yyTraceFILE,"%c%s", cDiv, yyTokenName[i->major]);
      cDiv = ' ';
    }
    fprintf(yyTraceFILE,"]\n");
  }
#endif
  return;
}

/*
** Return the fallback token corresponding to canonical token iToken, or
** 0 if iToken has no fallback.
*/
int ParseFallback(int iToken){
#ifdef YYFALLBACK
  assert( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) );
  return yyFallback[iToken];
#else
  (void)iToken;
  return 0;
#endif
}
#line 415 "parser.y"

bool ParseShifts(void *p, int yymajor) {
  yyParser *pParser = (yyParser*)p;
  YYACTIONTYPE yyact = pParser->yytos->stateno;
  std::vector<YYACTIONTYPE> speculation;
  size_t offset = pParser->yytos - pParser->yystack;
  size_t end = offset + 1;

  while (1) {
    // printf("STATE %d => ", yyact);
    yyact = yy_find_shift_action((YYCODETYPE)yymajor, yyact);
    // printf("ACTION %d => ", yyact);
    if (yyact >= YY_MIN_REDUCE) {
      int yyruleno = yyact - YY_MIN_REDUCE;
      int yygoto = yyRuleInfoLhs[yyruleno];
      int yysize = yyRuleInfoNRhs[yyruleno];
      // printf("REDUCE %d by %d => ", yyruleno, yysize);
      YYACTIONTYPE stateno;
      offset += yysize; // remove tokens
      if (offset < end) {
        stateno = pParser->yystack[offset].stateno;
        end = ++offset;
        speculation.clear();
      } else {
      	stateno = speculation[offset-end];
        speculation.resize(++offset-end);
      }
      // printf("FIND %d %d => ", stateno, yygoto);
      yyact = yy_find_reduce_action(stateno, (YYCODETYPE)yygoto);
      speculation.push_back(yyact);
      // printf("%d\n", yyact);
    } else if (yyact <= YY_MAX_SHIFTREDUCE) {
      // printf("shift\n");
      return true;
    } else if (yyact == YY_ACCEPT_ACTION) {
      // printf("accept\n");
      return true;
    } else {
      // printf("reject\n");
      return false;
    }
  }
}
#line 4412 "parser.c"
