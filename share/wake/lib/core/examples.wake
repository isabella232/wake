# Copyright 2021 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
package wake

#def expectOne (msg: String) (result: Result (List a) Error): Result a Error = match result
#    Fail err      = addErrorContext msg (Fail err)
#    Pass (x, Nil)  = Pass x
#    Pass otherwise = failWithError "{msg}: expected 1, got {len otherwise | str}"

# Ported from the jq tutorial
export def example1 (j: JValue): Result JValue Error = Pass j
export def example2: JValue => Result JValue Error =
    jAt 0 =: Pass

# Simplify github json first commit
export def example3 (log: JValue): Result JValue Error =
    # Fine
    require Pass commit = jAt 0 Pass log

    # I didn't find a nice way to use jField or jField2.
    # We lack sufficent support for getters on Lists to use those
    require Pass message =
        commit
        |  jFieldMatch `commit`
        =: jFieldMatch `message`
        =: getSinglePass

    require message, other = message else failWithError "Expected at least one commit message"
    require Nil = other else failWithError "Did not expect mulltiple messages in commit"

    require Pass name =
        commit
        |  jFieldMatch `commit`
        =: jFieldMatch `author`
        =: jFieldMatch `name`
        =: getSinglePass

    require name, other = name else failWithError "Expected at least one commit name"
    require Nil = other else failWithError "Did not expect multiple commit names"

    def output = JObject (
        "message" :-> message,
        "name" :-> name,
        Nil
    )

    Pass output

# Simplify full github json log
export def example4 (log: JValue): Result JValue Error =
    def simpleCommit commit =
        # These look preety awesome to me except for the :| operator
        require Pass message =
           commit
           |  jField "commit"
           =: jField "message"
           =: Pass

        require Pass name =
            commit
            |  jField "commit"
            =: jField "name"
            =: Pass

        def output = JObject (
            "message" :-> message,
            "name" :-> name,
            Nil
        )

        Pass output

    require Pass orig = jMap Pass log
    require Pass simplified = findFailFn simpleCommit orig
    Pass (JArray simplified)

# Simplify full github json log but keep parent urls
export def example5 (log: JValue): Result JValue Error =
    def simpleCommit commit =
        require Pass message =
           commit
           |  jField "commit"
           =: jField "message"
           =: Pass

        require Pass name =
            commit
            |  jField "commit"
            =: jField "name"
            =: Pass

        # I'm honestly kinda baffled at how clean this looks...but omg
        # don't make a mistake lol, the types are a nightmare.
        require Pass parents =
            commit
            |  jField "parents"
            =: jMap
            =: jField "html_url"
            =: Pass

        def output = JObject (
            "message" :-> message,
            "name" :-> name,
            "parents" :-> JArray parents,
            Nil
        )

        Pass output

    require Pass orig = jMap Pass log
    require Pass simplified = findFailFn simpleCommit orig
    Pass (JArray simplified)

# Convert a git log to a simplified wake tuple
export tuple Commit =
    Message: String
    Name: String
    Parents: List String

# Simplify github json log
export def example6 (log: JValue): Result (List Commit) Error =
    def simpleCommit commit =
        require Pass message =
           commit
           |  jField "commit"
           =: jField "message"
           =: jString
           =: Pass

        require Pass name =
            commit
            |  jField "commit"
            =: jField "name"
            =: jString
            =: Pass

        require Pass parents =
            commit
            |  jField "parents"
            =: jMap
            =: jField "html_url"
            =: jString
            =: Pass

        def output = Commit message name parents

        Pass output

    jMap simpleCommit log

# This is terrible, no one is going to do this
export def example7 (json: JValue): Result (List JValue) Error =
    json
    |  jField "instances"
    =: jFlatten
    =: getIf (jField "instance_name" =: jExists "testIndicator".JString) Nil
    =: getSinglePass

export def exampleEdit1: Pair Integer b => Pair Integer b =
    editPairFirst =: (_+4)

export def exampleEdit2: Triple (Pair a Integer) b c => Triple (Pair a Integer) b c =
    editTripleFirst =: editPairSecond =: (_+4)

export def exampleEdit3: JValue => Result JValue Error =
    editJField "hello"
    =: editJField "bar"
    =: editJString
    =: makePass
    =: ("zzz{_}zzz")
