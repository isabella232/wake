# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# unit / void
export data Unit = Unit

# Creates a ``Pair``, a tuple containing two elements.
export tuple Pair a b =
    export First:  a
    export Second: b

# Defines an arrow operator as an alternate way to initialize a ``Pair``.
from wake export def binary â†’ = Pair
from wake export def binary :-> = Pair

# Creates a ``Triple``, a tuple containing three elements.
export tuple Triple a b c =
    export First:  a
    export Second: b
    export Third:  c

# Variable length Tuples (terminate with Unit if you want ._x accessors)
# aka: a List with fixed length and heterogeneous element types
# Examples:
#   def tup = (1; "xx"; 1e8; Unit)
#   def (x; y; z; Unit) = tup
#   def _ = println (str tup._0)
#   def _ = println (dstr tup._2)
#   def (a; b) = (5; "z")
export data a; b = a; b

# Handy accessor methods
export def _0 (x; _) = x
export def _1 (_; x; _) = x
export def _2 (_; _; x; _) = x
export def _3 (_; _; _; x; _) = x
export def _4 (_; _; _; _; x; _) = x
export def _5 (_; _; _; _; _; x; _) = x
export def _6 (_; _; _; _; _; _; x; _) = x
export def _7 (_; _; _; _; _; _; _; x; _) = x
export def _8 (_; _; _; _; _; _; _; _; x; _) = x
export def _9 (_; _; _; _; _; _; _; _; _; x; _) = x

#export def pairFirstT: Setter (Pair a b) a = fromTupleField getPairFirst editPairFirst
#export def pairSecondT: Setter (Pair a b) b = fromTupleField getPairSecond editPairSecond

#export def tripleFirstT: Traversal (Triple a b c) a = fromTupleField getTripleFirst editTripleFirst
#export def tripleSecondT: Traversal (Triple a b c) b = fromTupleField getTripleSecond editTripleSecond
#export def tripleThirdT: Traversal (Triple a b c) c = fromTupleField getTripleThird editTripleThird

#export def firstT: Traversal (a; b) a =
#  def view (x; _) = x, Nil
#  def edit f (x; y) = f x; y
#  Traversal view edit
#export def secondT: Traversal (a; b) b =
#  def view (_; y) = y, Nil
#  def edit f (x; y) = x; f y
#  Traversal view edit

#export def _0T = firstT
#export def _1T = secondT |> firstT
#export def _2T = secondT |> secondT |> firstT
#export def _3T = secondT |> secondT |> secondT |> firstT
#export def _4T = secondT |> secondT |> secondT |> secondT |> firstT
#export def _5T = secondT |> secondT |> secondT |> secondT |> secondT |> firstT
#export def _6T = secondT |> secondT |> secondT |> secondT |> secondT |> secondT |> firstT
#export def _7T = secondT |> secondT |> secondT |> secondT |> secondT |> secondT |> secondT |> firstT
#export def _8T = secondT |> secondT |> secondT |> secondT |> secondT |> secondT |> secondT |> secondT |> firstT
#export def _9T = secondT |> secondT |> secondT |> secondT |> secondT |> secondT |> secondT |> secondT |> secondT |> firstT